Author: aszlig <aszlig@nix.build>
Date:   Mon May 13 11:42:29 2019 +0200

    Add ability to generate invite URLs
    
    On the server side, we don't necessarily have an MTA running, so
    inviting others via email is not an option. This is getting even more
    crucial because by default we are in invite-only mode.
    
    In addition, people not always have the email address of another person
    but rather just a contact via some other means (eg. instant messaging),
    so just being able to paste an URL is way more convenient.
    
    The implementation adds a new API endpoint (/groups/ID/generate-invite),
    which just returns a new invitation URL and also isn't subject to the
    invitation limit, because generating these URLs is a way cheaper
    operation than sending out one or more emails.
    
    Signed-off-by: aszlig <aszlig@nix.build>
    Filename: allow-invite-by-url.patch

diff --git a/test/api/v3/integration/groups/POST-groups_invite.test.js b/test/api/v3/integration/groups/POST-groups_invite.test.js
index 27f1a5c628..49b174b594 100644
--- a/test/api/v3/integration/groups/POST-groups_invite.test.js
+++ b/test/api/v3/integration/groups/POST-groups_invite.test.js
@@ -337,6 +337,32 @@ describe('Post /groups/:groupId/invite', () => {
     });
   });
 
+  describe('URL invites', () => {
+    it('returns an error when inviter has no chat privileges', async () => {
+      let inviterMuted = await inviter.update({'flags.chatRevoked': true});
+      await expect(inviterMuted.post(`/groups/${group._id}/generate-invite`))
+        .to.eventually.be.rejected.and.eql({
+          code: 401,
+          error: 'NotAuthorized',
+          message: t('chatPrivilegesRevoked'),
+        });
+    });
+
+    it('is not subject to INVITES_LIMIT', async () => {
+      for (let i = 0; i < INVITES_LIMIT + 10; ++i) {
+        await inviter.post(`/groups/${group._id}/generate-invite`); // eslint-disable-line no-await-in-loop
+      }
+
+      await expect(inviter.post(`/groups/${group._id}/generate-invite`)).to.exist;
+    });
+
+    it('returns an absolute URL', async () => {
+      let res = await inviter.post(`/groups/${group._id}/generate-invite`);
+      expect(res).to.exist;
+      expect(res).to.match(/^http/);
+    });
+  });
+
   describe('user and email invites', () => {
     it('returns an error when emails and uuids are not provided', async () => {
       await expect(inviter.post(`/groups/${group._id}/invite`))
diff --git a/website/client/components/groups/inviteModal.vue b/website/client/components/groups/inviteModal.vue
index a1e8a312eb..e761094de0 100644
--- a/website/client/components/groups/inviteModal.vue
+++ b/website/client/components/groups/inviteModal.vue
@@ -1,6 +1,15 @@
 <template lang="pug">
   b-modal#invite-modal(:title='$t(`inviteTo${groupType}`)', :hide-footer='true')
     div
+      strong Invite via URL
+      .mt-2.mb-4.d-flex
+        button.btn.btn-secondary(@click='generateInviteUrl') Generate URL
+        .input-group-text(v-if='inviteUrl', @click='copyInviteUrl')
+          #invite-url.text {{ inviteUrl }}
+          .ml-3
+            .svg-icon.copy-icon(v-html='icons.copy')
+            .small(v-once) {{ $t('copy') }}
+
       strong {{ $t('inviteEmailUsername') }}
       .small {{ $t('inviteEmailUsernameInfo') }}
       div(v-for='(invite, index) in invites')
@@ -41,6 +50,29 @@
 <style lang="scss" scoped>
   @import '~client/assets/scss/colors.scss';
 
+  .input-group-text {
+    background-color: $gray-600;
+    border-radius: 2px;
+    border: solid 1px $gray-500;
+    margin: auto;
+    cursor: pointer;
+    overflow: hidden;
+
+    .text {
+      overflow: hidden;
+      min-height: 1rem;
+    }
+
+    .copy-icon {
+      width: 1rem;
+      margin: 0 auto;
+    }
+
+    .small {
+      margin: 0 auto;
+    }
+  }
+
   a:not([href]) {
     color: $blue-10;
     font-size: 16px;
@@ -99,6 +131,7 @@
   import isUUID from 'validator/lib/isUUID';
   import notifications from 'client/mixins/notifications';
   import positiveIcon from 'assets/svg/positive.svg';
+  import copyIcon from 'assets/svg/copy.svg';
 
   const INVITE_DEFAULTS = {text: '', error: null, valid: null};
 
@@ -117,9 +150,11 @@
     },
     data () {
       return {
+        inviteUrl: null,
         invites: [clone(INVITE_DEFAULTS), clone(INVITE_DEFAULTS)],
         icons: Object.freeze({
           positiveIcon,
+          copy: copyIcon,
         }),
       };
     },
@@ -192,6 +227,24 @@
         this.text(this.$t(invitationString));
         this.close();
       },
+      async generateInviteUrl () {
+        this.inviteUrl = await this.$store.dispatch('guilds:inviteUrl', {
+          groupId: this.group._id,
+        });
+      },
+      copyInviteUrl () {
+        if (navigator.clipboard) {
+          navigator.clipboard.writeText(this.inviteUrl);
+        } else {
+          let copyText = document.createElement('textarea');
+          copyText.value = this.inviteUrl;
+          document.body.appendChild(copyText);
+          copyText.select();
+          document.execCommand('copy');
+          document.body.removeChild(copyText);
+        }
+        this.text('Invite URL copied to clipboard.');
+      },
     },
     mixins: [notifications],
     props: ['group', 'groupType'],
diff --git a/website/client/store/actions/guilds.js b/website/client/store/actions/guilds.js
index b4eda8714b..d186fbbd3b 100644
--- a/website/client/store/actions/guilds.js
+++ b/website/client/store/actions/guilds.js
@@ -169,6 +169,11 @@ export async function invite (store, payload) {
   return response;
 }
 
+export async function inviteUrl (store, payload) {
+  let response = await axios.post(`/api/v4/groups/${payload.groupId}/generate-invite`);
+  return response.data.data;
+}
+
 export async function inviteToQuest (store, payload) {
   let response = await axios.post(`/api/v4/groups/${payload.groupId}/quests/invite/${payload.key}`);
 
diff --git a/website/server/controllers/api-v3/groups.js b/website/server/controllers/api-v3/groups.js
index aa6b2f4f8a..73d56fdf87 100644
--- a/website/server/controllers/api-v3/groups.js
+++ b/website/server/controllers/api-v3/groups.js
@@ -24,9 +24,11 @@ import {
 import common from '../../../common';
 import apiError from '../../libs/apiError';
 import payments from '../../libs/payments/payments';
+import { encrypt } from '../../libs/encryption';
 
 const MAX_EMAIL_INVITES_BY_USER = 200;
 const TECH_ASSISTANCE_EMAIL = nconf.get('ADMIN_EMAIL');
+const BASE_URL = nconf.get('BASE_URL');
 
 /**
  * @apiDefine GroupBodyInvalid
@@ -979,6 +981,59 @@ api.inviteToGroup = {
   },
 };
 
+/**
+ * @api {post} /api/v3/groups/:groupId/generate-invite Generate invite URL
+ * @apiName GenerateInviteUrlToGroup
+ * @apiGroup Group
+ *
+ * @apiParam (Path) {String} groupId The group _id ('party' for the user party and 'habitrpg' for tavern are accepted)
+ *
+ * @apiSuccess {String} url The generated URL
+ *
+ * @apiError (401) {NotAuthorized} CannotInviteWhenMuted You cannot invite anyone to a guild or party because your chat privileges have been revoked.
+ *
+ * @apiUse GroupNotFound
+ * @apiUse PartyNotFound
+ */
+api.generateInviteUrlToGroup = {
+  method: 'POST',
+  url: '/groups/:groupId/generate-invite',
+  middlewares: [authWithHeaders()],
+  async handler (req, res) {
+    const user = res.locals.user;
+
+    if (user.flags.chatRevoked)
+      throw new NotAuthorized(res.t('chatPrivilegesRevoked'));
+
+    req.checkParams('groupId', apiError('groupIdRequired')).notEmpty();
+
+    const validationErrors = req.validationErrors();
+    if (validationErrors) throw validationErrors;
+
+    const group = await Group.getGroup({
+      user, groupId: req.params.groupId, fields: '-chat',
+    });
+    if (!group) throw new NotFound(res.t('groupNotFound'));
+
+    if (group.purchased && group.purchased.plan.customerId &&
+        user._id !== group.leader)
+      throw new NotAuthorized(res.t('onlyGroupLeaderCanInviteToGroupPlan'));
+
+    let cancelledPlan = false;
+    if (group.isSubscribed() && !group.hasNotCancelled()) cancelledPlan = true;
+
+    const groupQueryString = JSON.stringify({
+      id: group._id,
+      inviter: res.locals.user._id,
+      publicGuild: group.type === 'guild' && group.privacy === 'public',
+      sentAt: Date.now(), // so we can let it expire
+      cancelledPlan,
+    });
+    const payload = encrypt(groupQueryString);
+    res.respond(200, `${BASE_URL}/static/front?groupInvite=${payload}`);
+  },
+};
+
 /**
  * @api {post} /api/v3/groups/:groupId/add-manager Add a manager to a group
  * @apiName AddGroupManager
