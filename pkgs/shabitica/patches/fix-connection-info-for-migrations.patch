Author: aszlig <aszlig@nix.build>
Date:   Thu Jun 28 15:26:53 2018 +0200

    migrations: Reuse Mongoose connection info
    
    Instead of using the hardcoded default values for Monk, let's actually
    use the info from Mongoose to connect to the database using Monk.
    
    We only really care about the host, because we're connecting using Unix
    sockets so we don't need any auth information.
    
    Signed-off-by: aszlig <aszlig@nix.build>
    Filename: fix-connection-info-for-migrations.patch

diff --git a/migrations/archive/2018/20180811_inboxOutsideUser.js b/migrations/archive/2018/20180811_inboxOutsideUser.js
index a58df2a4cf..35da63622b 100644
--- a/migrations/archive/2018/20180811_inboxOutsideUser.js
+++ b/migrations/archive/2018/20180811_inboxOutsideUser.js
@@ -6,12 +6,12 @@ const authorUuid = 'ed4c688c-6652-4a92-9d03-a5a79844174a'; // ... own data is do
  * Move inbox messages from the user model to their own collection
  */
 
+const mongoose = require('mongoose');
 const monk = require('monk');
-const nconf = require('nconf');
 const uuid = require('uuid').v4;
 
 const Inbox = require('../website/server/models/message').inboxModel;
-const connectionString = nconf.get('MIGRATION_CONNECT_STRING'); // FOR TEST DATABASE
+const connectionString = `mongodb://${mongoose.connection.host}`;
 const dbInboxes = monk(connectionString).get('inboxes', { castIds: false });
 const dbUsers = monk(connectionString).get('users', { castIds: false });
 
diff --git a/migrations/restock_armoire.js b/migrations/restock_armoire.js
index 5046998a3b..34188d0688 100644
--- a/migrations/restock_armoire.js
+++ b/migrations/restock_armoire.js
@@ -6,8 +6,9 @@ let authorUuid = '7f14ed62-5408-4e1b-be83-ada62d504931'; // ... own data is done
  * Remove flag stating that the Enchanted Armoire is empty, for when new equipment is added
  */
 
+let mongoose = require('mongoose');
 let monk = require('monk');
-let connectionString = 'mongodb://localhost:27017/habitrpg?auto_reconnect=true'; // FOR TEST DATABASE
+let connectionString = `mongodb://${mongoose.connection.host}`;
 let dbUsers = monk(connectionString).get('users', { castIds: false });
 
 function processUsers (lastId) {
diff --git a/migrations/tasks/habits-one-history-entry-per-day-challenges.js b/migrations/tasks/habits-one-history-entry-per-day-challenges.js
index dcb05f48bf..12e55ecb79 100644
--- a/migrations/tasks/habits-one-history-entry-per-day-challenges.js
+++ b/migrations/tasks/habits-one-history-entry-per-day-challenges.js
@@ -6,10 +6,11 @@
  * Iterates over all habits and condense multiple history entries for the same day into a single entry
  */
 
+const mongoose = require('mongoose');
 const monk = require('monk');
 const _ = require('lodash');
 const moment = require('moment');
-const connectionString = 'mongodb://localhost:27017/habitrpg?auto_reconnect=true'; // FOR TEST DATABASE
+const connectionString = `mongodb://${mongoose.connection.host}`;
 const dbTasks = monk(connectionString).get('tasks', { castIds: false });
 
 function processChallengeHabits (lastId) {
diff --git a/migrations/tasks/habits-one-history-entry-per-day-users.js b/migrations/tasks/habits-one-history-entry-per-day-users.js
index 509aa71eb7..f71cad61ed 100644
--- a/migrations/tasks/habits-one-history-entry-per-day-users.js
+++ b/migrations/tasks/habits-one-history-entry-per-day-users.js
@@ -6,10 +6,11 @@ const authorUuid = 'ed4c688c-6652-4a92-9d03-a5a79844174a'; // ... own data is do
  * Iterates over all habits and condense multiple history entries for the same day into a single entry
  */
 
+const mongoose = require('mongoose');
 const monk = require('monk');
 const _ = require('lodash');
 const moment = require('moment');
-const connectionString = 'mongodb://localhost:27017/habitrpg?auto_reconnect=true'; // FOR TEST DATABASE
+const connectionString = `mongodb://${mongoose.connection.host}`;
 const dbTasks = monk(connectionString).get('tasks', { castIds: false });
 const dbUsers = monk(connectionString).get('users', { castIds: false });
 
