Author: aszlig <aszlig@nix.build>
Date:   Tue Mar 27 05:37:23 2018 +0200

    Allow anybody to create a group plan
    
    Group plans are not free on the official instance, so in order to get
    this feature in the standalone instance we need to create the group in
    the same way as it would be created when the user would use one of the
    payment systems to pay for the subscription.
    
    The subscription is unlimited of course.
    
    Signed-off-by: aszlig <aszlig@nix.build>
    Filename: free-group-plans.patch

diff --git a/test/api/unit/models/group.test.js b/test/api/unit/models/group.test.js
index 0a2b45b571..1470f0ad5d 100644
--- a/test/api/unit/models/group.test.js
+++ b/test/api/unit/models/group.test.js
@@ -1,4 +1,3 @@
-import moment from 'moment';
 import { v4 as generateUUID } from 'uuid';
 import validator from 'validator';
 import { sleep, translationCheck } from '../../../helpers/api-unit.helper';
@@ -17,7 +16,6 @@ import {
 } from '../../../../website/server/libs/webhook';
 import * as email from '../../../../website/server/libs/email';
 import { TAVERN_ID } from '../../../../website/common/script/';
-import shared from '../../../../website/common';
 
 describe('Group Model', () => {
   let party, questLeader, participatingMember, sleepingParticipatingMember, nonParticipatingMember, undecidedMember;
@@ -1167,32 +1165,21 @@ describe('Group Model', () => {
         expect(party).to.not.exist;
       });
 
-      it('does not delete a private group when the last member leaves and a subscription is active', async () => {
+      it('deletes a private group when the last member leaves and a subscription is active', async () => {
         party.memberCount = 1;
         party.purchased.plan.customerId = '110002222333';
 
-        await expect(party.leave(participatingMember))
-          .to.eventually.be.rejected.and.to.eql({
-            name: 'NotAuthorized',
-            httpCode: 401,
-            message: shared.i18n.t('cannotDeleteActiveGroup'),
-          });
+        await party.leave(participatingMember);
 
         party = await Group.findOne({_id: party._id});
-        expect(party).to.exist;
-        expect(party.memberCount).to.eql(1);
+        expect(party).to.not.exist;
       });
 
-      it('does not allow a leader to leave a group with an active subscription', async () => {
+      it('allows a leader to leave a group with an active subscription', async () => {
         party.memberCount = 2;
         party.purchased.plan.customerId = '110002222333';
 
-        await expect(party.leave(questLeader))
-          .to.eventually.be.rejected.and.to.eql({
-            name: 'NotAuthorized',
-            httpCode: 401,
-            message: shared.i18n.t('leaderCannotLeaveGroupWithActiveGroup'),
-          });
+        await party.leave(questLeader);
 
         party = await Group.findOne({_id: party._id});
         expect(party).to.exist;
@@ -2341,7 +2328,7 @@ describe('Group Model', () => {
 
     context('isSubscribed', () => {
       it('returns false if group does not have customer id', () => {
-        expect(party.isSubscribed()).to.be.undefined;
+        expect(party.isSubscribed()).to.be.false;
       });
 
       it('returns true if group does not have plan.dateTerminated', () => {
@@ -2349,20 +2336,6 @@ describe('Group Model', () => {
 
         expect(party.isSubscribed()).to.be.true;
       });
-
-      it('returns true if group if plan.dateTerminated is after today', () => {
-        party.purchased.plan.customerId = 'test-id';
-        party.purchased.plan.dateTerminated = moment().add(1, 'days').toDate();
-
-        expect(party.isSubscribed()).to.be.true;
-      });
-
-      it('returns false if group if plan.dateTerminated is before today', () => {
-        party.purchased.plan.customerId = 'test-id';
-        party.purchased.plan.dateTerminated = moment().subtract(1, 'days').toDate();
-
-        expect(party.isSubscribed()).to.be.false;
-      });
     });
 
     context('hasNotCancelled', () => {
@@ -2375,46 +2348,14 @@ describe('Group Model', () => {
 
         expect(party.hasNotCancelled()).to.be.true;
       });
-
-      it('returns false if group if plan.dateTerminated is after today', () => {
-        party.purchased.plan.customerId = 'test-id';
-        party.purchased.plan.dateTerminated = moment().add(1, 'days').toDate();
-
-        expect(party.hasNotCancelled()).to.be.false;
-      });
-
-      it('returns false if group if plan.dateTerminated is before today', () => {
-        party.purchased.plan.customerId = 'test-id';
-        party.purchased.plan.dateTerminated = moment().subtract(1, 'days').toDate();
-
-        expect(party.hasNotCancelled()).to.be.false;
-      });
     });
 
     context('hasCancelled', () => {
-      it('returns false if group does not have customer id', () => {
-        expect(party.hasCancelled()).to.be.false;
-      });
-
       it('returns false if group does not have plan.dateTerminated', () => {
         party.purchased.plan.customerId = 'test-id';
 
         expect(party.hasCancelled()).to.be.false;
       });
-
-      it('returns true if group if plan.dateTerminated is after today', () => {
-        party.purchased.plan.customerId = 'test-id';
-        party.purchased.plan.dateTerminated = moment().add(1, 'days').toDate();
-
-        expect(party.hasCancelled()).to.be.true;
-      });
-
-      it('returns false if group if plan.dateTerminated is before today', () => {
-        party.purchased.plan.customerId = 'test-id';
-        party.purchased.plan.dateTerminated = moment().subtract(1, 'days').toDate();
-
-        expect(party.hasCancelled()).to.be.false;
-      });
     });
   });
 });
diff --git a/test/api/unit/models/user.test.js b/test/api/unit/models/user.test.js
index 1e82b58f97..d1c5b0804a 100644
--- a/test/api/unit/models/user.test.js
+++ b/test/api/unit/models/user.test.js
@@ -356,20 +356,6 @@ describe('User Model', () => {
 
       expect(user.hasCancelled()).to.be.false;
     });
-
-    it('returns true if user if plan.dateTerminated is after today', () => {
-      user.purchased.plan.customerId = 'test-id';
-      user.purchased.plan.dateTerminated = moment().add(1, 'days').toDate();
-
-      expect(user.hasCancelled()).to.be.true;
-    });
-
-    it('returns false if user if plan.dateTerminated is before today', () => {
-      user.purchased.plan.customerId = 'test-id';
-      user.purchased.plan.dateTerminated = moment().subtract(1, 'days').toDate();
-
-      expect(user.hasCancelled()).to.be.false;
-    });
   });
 
   context('pre-save hook', () => {
diff --git a/test/api/v3/integration/groups/POST-groups_invite.test.js b/test/api/v3/integration/groups/POST-groups_invite.test.js
index 1695d3966d..27f1a5c628 100644
--- a/test/api/v3/integration/groups/POST-groups_invite.test.js
+++ b/test/api/v3/integration/groups/POST-groups_invite.test.js
@@ -1,14 +1,11 @@
 import {
   generateUser,
-  generateGroup,
   translate as t,
 } from '../../../../helpers/api-integration/v3';
 import { v4 as generateUUID } from 'uuid';
-import nconf from 'nconf';
 
 const INVITES_LIMIT = 100;
 const PARTY_LIMIT_MEMBERS = 30;
-const MAX_EMAIL_INVITES_BY_USER = 200;
 
 describe('Post /groups/:groupId/invite', () => {
   let inviter;
@@ -316,27 +313,6 @@ describe('Post /groups/:groupId/invite', () => {
         });
     });
 
-    it('returns an error when a user has sent the max number of email invites', async () => {
-      let inviterWithMax = await generateUser({
-        invitesSent: MAX_EMAIL_INVITES_BY_USER,
-        balance: 4,
-      });
-      let tmpGroup = await inviterWithMax.post('/groups', {
-        name: groupName,
-        type: 'guild',
-      });
-
-      await expect(inviterWithMax.post(`/groups/${tmpGroup._id}/invite`, {
-        emails: [testInvite],
-        inviter: 'inviter name',
-      }))
-        .to.eventually.be.rejected.and.eql({
-          code: 401,
-          error: 'NotAuthorized',
-          message: t('inviteLimitReached', {techAssistanceEmail: nconf.get('ADMIN_EMAIL')}),
-        });
-    });
-
     it('invites a user to a group by email', async () => {
       let res = await inviter.post(`/groups/${group._id}/invite`, {
         emails: [testInvite],
@@ -405,25 +381,6 @@ describe('Post /groups/:groupId/invite', () => {
       expect(invitedUser.invitations.guilds[0].id).to.equal(group._id);
       expect(invite).to.exist;
     });
-
-    it('invites marks invite with cancelled plan', async () => {
-      let cancelledPlanGroup = await generateGroup(inviter, {
-        type: 'guild',
-        name: generateUUID(),
-      });
-      await cancelledPlanGroup.createCancelledSubscription();
-
-      let newUser = await generateUser();
-      let invite = await inviter.post(`/groups/${cancelledPlanGroup._id}/invite`, {
-        uuids: [newUser._id],
-        emails: [{name: 'test', email: 'test@habitica.com'}],
-      });
-      let invitedUser = await newUser.get('/user');
-
-      expect(invitedUser.invitations.guilds[0].id).to.equal(cancelledPlanGroup._id);
-      expect(invitedUser.invitations.guilds[0].cancelledPlan).to.be.true;
-      expect(invite).to.exist;
-    });
   });
 
   describe('guild invites', () => {
diff --git a/website/client/components/group-plans/index.vue b/website/client/components/group-plans/index.vue
index 82a20d244d..9a5e64926f 100644
--- a/website/client/components/group-plans/index.vue
+++ b/website/client/components/group-plans/index.vue
@@ -6,11 +6,6 @@
       exact, :class="{'active': $route.name === 'groupPlanDetailTaskInformation'}") {{ $t('groupTaskBoard') }}
     router-link.nav-link(:to="{name: 'groupPlanDetailInformation', params: {groupId}}",
       exact, :class="{'active': $route.name === 'groupPlanDetailInformation'}") {{ $t('groupInformation') }}
-    router-link.nav-link(
-      v-if='isLeader',
-      :to="{name: 'groupPlanBilling', params: {groupId}}",
-      exact,
-      :class="{'active': $route.name === 'groupPlanBilling'}") {{ $t('groupBilling') }}
 
   .col-12
     router-view
diff --git a/website/client/components/group-plans/taskInformation.vue b/website/client/components/group-plans/taskInformation.vue
index a30df3683b..f00a229a67 100644
--- a/website/client/components/group-plans/taskInformation.vue
+++ b/website/client/components/group-plans/taskInformation.vue
@@ -1,6 +1,5 @@
 <template lang="pug">
 .standard-page
-  group-plan-overview-modal
   task-modal(
     :task="workingTask",
     :purpose="taskFormPurpose",
@@ -70,7 +69,6 @@
 import taskDefaults from 'common/script/libs/taskDefaults';
 import TaskColumn from '../tasks/column';
 import TaskModal from '../tasks/taskModal';
-import GroupPlanOverviewModal from './groupPlanOverviewModal';
 
 import positiveIcon from 'assets/svg/positive.svg';
 import filterIcon from 'assets/svg/filter.svg';
@@ -91,7 +89,6 @@ export default {
   components: {
     TaskColumn,
     TaskModal,
-    GroupPlanOverviewModal,
   },
   data () {
     return {
@@ -137,10 +134,6 @@ export default {
   mounted () {
     if (!this.searchId) this.searchId = this.groupId;
     this.load();
-
-    if (this.$route.query.showGroupOverview) {
-      this.$root.$emit('bv::show::modal', 'group-plan-overview');
-    }
   },
   computed: {
     ...mapState({user: 'user.data'}),
diff --git a/website/client/components/groups/groupPlan.vue b/website/client/components/groups/groupPlan.vue
index 2561b2946b..5f43a03430 100644
--- a/website/client/components/groups/groupPlan.vue
+++ b/website/client/components/groups/groupPlan.vue
@@ -30,21 +30,8 @@ div
             h2 In-Game Benefits
             p Group members get an exclusive Jackalope Mount, as well as full subscription benefits, including special monthly equipment sets and the ability to buy gems with gold.
 
-    #upgrading-group.container.payment-options(v-if='upgradingGroup._id')
+    .container.upgrade-group(v-if='upgradingGroup._id')
       h1.text-center.purple-header Are you ready to upgrade?
-      .row
-        .col-12.text-center
-          .purple-box
-            .amount-section
-              .dollar $
-              .number 9
-              .name Group Owner Subscription
-            .plus
-              .svg-icon(v-html="icons.positiveIcon")
-            .amount-section
-              .dollar $
-              .number 3
-              .name Each Individual Group Member
 
     .container.col-6.offset-3.create-option(v-if='!upgradingGroup._id')
       .row
@@ -52,23 +39,8 @@ div
       .row
         .col-12.text-center
           button.btn.btn-primary.create-group(@click='launchModal("create")') Create Your New Group
-      .row.pricing
-        .col-5
-          .dollar $
-          .number 9
-          .name
-            div Group Owner
-            div Subscription
-        .col-1
-          .plus +
-        .col-6
-          .dollar $
-          .number 3
-          .name
-            div Each Additional
-            div Member
 
-  b-modal#group-plan-modal(title="Select Payment", size='md', hide-footer=true)
+  b-modal#group-plan-modal(:title="$t('createAGroup')", size='md', hide-footer=true)
     .col-12(v-if='activePage === PAGES.CREATE_GROUP')
       .form-group
         label.control-label(for='new-group-name') Name
@@ -91,36 +63,6 @@ div
 </template>
 
 <style lang="scss" scoped>
-  #upgrading-group {
-    .amount-section {
-      position: relative;
-    }
-
-    .dollar {
-      position: absolute;
-      left: -1em;
-      top: 1em;
-    }
-
-    .purple-box {
-      color: #bda8ff;
-      margin-bottom: 2em;
-    }
-
-    .number {
-      font-weight: bold;
-      color: #fff;
-    }
-
-    .plus .svg-icon{
-      width: 24px;
-    }
-
-    .payment-providers {
-      width: 350px;
-    }
-  }
-
   .header {
     background: #432874;
     background: linear-gradient(180deg, #4F2A93 0%, #432874 100%);
@@ -195,88 +137,21 @@ div
     height: 96px;
   }
 
+  .upgrade-group {
+    margin-bottom: 4em;
+  }
+
   .purple-header {
     color: #6133b4;
     font-size: 48px;
     margin-top: 1em;
   }
-
-  .pricing {
-    margin-top: 2em;
-    margin-bottom: 4em;
-
-    .dollar, .number, .name {
-      display: inline-block;
-      vertical-align: bottom;
-      color: #a5a1ac;
-    }
-
-    .plus {
-      font-size: 34px;
-      color: #a5a1ac;
-    }
-
-    .dollar {
-      margin-bottom: 1.5em;
-      font-size: 32px;
-      font-weight: bold;
-    }
-
-    .name {
-      font-size: 24px;
-      margin-bottom: .8em;
-      margin-left: .5em;
-    }
-
-    .number {
-      font-size: 72px;
-      font-weight: bolder;
-    }
-  }
-
-  .payment-options {
-    margin-bottom: 4em;
-
-    .purple-box {
-      background-color: #4f2a93;
-      color: #fff;
-      padding: .5em;
-      border-radius: 8px;
-      width: 200px;
-      height: 215px;
-
-      .dollar {
-      }
-
-      .number {
-        font-size: 60px;
-      }
-
-      .name {
-        width: 100px;
-        margin-left: .3em;
-      }
-
-      .plus {
-        width: 100%;
-        text-align: center;
-      }
-
-      div {
-        display: inline-block;
-      }
-    }
-
-    .box, .purple-box {
-      display: inline-block;
-      vertical-align: bottom;
-    }
-  }
 </style>
 
 <script>
 import { mapState } from 'client/libs/store';
 import positiveIcon from 'assets/svg/positive.svg';
+import axios from 'axios';
 
 export default {
   data () {
@@ -287,9 +162,7 @@ export default {
       PAGES: {
         CREATE_GROUP: 'create-group',
         UPGRADE_GROUP: 'upgrade-group',
-        PAY: 'pay',
       },
-      paymentMethod: '',
       newGroup: {
         type: 'guild',
         privacy: 'private',
@@ -324,21 +197,25 @@ export default {
       this.activePage = page;
       window.scrollTo(0, 0);
     },
-    createGroup () {
-      this.changePage(this.PAGES.PAY);
-    },
-    pay (paymentMethod) {
-      const subscriptionKey = 'group_monthly'; // @TODO: Get from content API?
-      const paymentData = {
-        subscription: subscriptionKey,
-        coupon: null,
-      };
-
+    async createGroup () {
       if (this.upgradingGroup && this.upgradingGroup._id) {
-        paymentData.groupId = this.upgradingGroup._id;
-        paymentData.group = this.upgradingGroup;
+        this.$router.push(
+          `/group-plans/${this.upgradingGroup._id}/task-information`
+        );
       } else {
-        paymentData.groupToCreate = this.newGroup;
+        let response = await axios.post('/api/v3/groups/create-plan', {
+          groupToCreate: this.newGroup,
+        });
+
+        if (response.status >= 400) {
+          alert(`Error: ${response.message}`);
+          return;
+        }
+
+        let newGroup = response.data.data;
+        this.user.guilds.push(newGroup._id);
+        this.$store.state.groupPlans.push(newGroup);
+        this.$router.push(`/group-plans/${newGroup._id}/task-information`);
       }
     },
   },
diff --git a/website/client/router/index.js b/website/client/router/index.js
index 05663006bc..0a760836f0 100644
--- a/website/client/router/index.js
+++ b/website/client/router/index.js
@@ -70,7 +70,6 @@ const GroupPlansAppPage = () => import(/* webpackChunkName: "guilds" */ 'client/
 // Group Plans
 const GroupPlanIndex = () => import(/* webpackChunkName: "group-plans" */ 'client/components/group-plans/index');
 const GroupPlanTaskInformation = () => import(/* webpackChunkName: "group-plans" */ 'client/components/group-plans/taskInformation');
-const GroupPlanBilling = () => import(/* webpackChunkName: "group-plans" */ 'client/components/group-plans/billing');
 
 // Challenges
 const ChallengeIndex = () => import(/* webpackChunkName: "challenges" */ 'client/components/challenges/index');
@@ -153,12 +152,6 @@ const router = new VueRouter({
           component: GroupPage,
           props: true,
         },
-        {
-          name: 'groupPlanBilling',
-          path: '/group-plans/:groupId/billing',
-          component: GroupPlanBilling,
-          props: true,
-        },
       ],
     },
     {
diff --git a/website/server/controllers/api-v3/groups.js b/website/server/controllers/api-v3/groups.js
index 96ffc6ed7e..dc35d5db83 100644
--- a/website/server/controllers/api-v3/groups.js
+++ b/website/server/controllers/api-v3/groups.js
@@ -23,6 +23,7 @@ import {
 } from '../../libs/invites';
 import common from '../../../common';
 import apiError from '../../libs/apiError';
+import payments from '../../libs/payments/payments';
 
 const MAX_EMAIL_INVITES_BY_USER = 200;
 const TECH_ASSISTANCE_EMAIL = nconf.get('ADMIN_EMAIL');
@@ -162,8 +163,6 @@ api.createGroupPlan = {
     let user = res.locals.user;
     let group = new Group(Group.sanitize(req.body.groupToCreate));
 
-    req.checkBody('paymentType', res.t('paymentTypeRequired')).notEmpty();
-
     let validationErrors = req.validationErrors();
     if (validationErrors) throw validationErrors;
 
@@ -173,6 +172,18 @@ api.createGroupPlan = {
     user.guilds.push(group._id);
 
     let results = await Promise.all([user.save(), group.save()]);
+
+    await payments.createSubscription({
+      user,
+      customerId: 'habitrpg',
+      paymentMethod: '',
+      sub: {
+        key: 'group_monthly',
+        quantity: 100000,
+      },
+      groupId: group._id,
+    });
+
     let savedGroup = results[1];
 
     // Instead of populate we make a find call manually because of https://github.com/Automattic/mongoose/issues/3833
diff --git a/website/server/models/group.js b/website/server/models/group.js
index 489aba6938..8b9133d85e 100644
--- a/website/server/models/group.js
+++ b/website/server/models/group.js
@@ -1,4 +1,3 @@
-import moment from 'moment';
 import mongoose from 'mongoose';
 import {
   model as User,
@@ -1547,19 +1546,16 @@ schema.methods.checkChatSpam = function groupCheckChatSpam (user) {
 };
 
 schema.methods.isSubscribed = function isSubscribed () {
-  let now = new Date();
   let plan = this.purchased.plan;
-  return plan && plan.customerId && (!plan.dateTerminated || moment(plan.dateTerminated).isAfter(now));
+  return Boolean(plan && plan.customerId);
 };
 
 schema.methods.hasNotCancelled = function hasNotCancelled () {
-  let plan = this.purchased.plan;
-  return Boolean(this.isSubscribed() && !plan.dateTerminated);
+  return this.isSubscribed();
 };
 
-schema.methods.hasCancelled = function hasNotCancelled () {
-  let plan = this.purchased.plan;
-  return Boolean(this.isSubscribed() && plan.dateTerminated);
+schema.methods.hasCancelled = function hasCancelled () {
+  return !this.isSubscribed();
 };
 
 schema.methods.updateGroupPlan = async function updateGroupPlan () {
