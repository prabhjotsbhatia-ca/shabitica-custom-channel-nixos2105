Author: aszlig <aszlig@nix.build>
Date:   Tue Mar 27 07:32:57 2018 +0200

    Do not restrict email domains
    
    Those restrictions are on habitica.com and habitrpg.com, so they don't
    apply to a standalone setup anyway.
    
    Signed-off-by: aszlig <aszlig@nix.build>
    Filename: dont-restrict-email-domains.patch

diff --git a/test/api/v3/integration/user/auth/POST-register_local.test.js b/test/api/v3/integration/user/auth/POST-register_local.test.js
index 5b559aae5b..22f440ee6a 100644
--- a/test/api/v3/integration/user/auth/POST-register_local.test.js
+++ b/test/api/v3/integration/user/auth/POST-register_local.test.js
@@ -389,38 +389,32 @@ describe('POST /user/auth/local/register', () => {
       expect(user.auth.local.email).to.equal(email.toLowerCase());
     });
 
-    it('fails on a habitica.com email', async () => {
+    it('works even on a habitica.com email', async () => {
       let username = generateRandomUserName();
       let email = `${username}@habitica.com`;
       let password = 'password';
 
-      await expect(api.post('/user/auth/local/register', {
+      let user = await api.post('/user/auth/local/register', {
         username,
         email,
         password,
         confirmPassword: password,
-      })).to.eventually.be.rejected.and.eql({
-        code: 400,
-        error: 'BadRequest',
-        message: 'User validation failed',
       });
+      expect(user._id).to.exist;
     });
 
-    it('fails on a habitrpg.com email', async () => {
+    it('works even on a habitrpg.com email', async () => {
       let username = generateRandomUserName();
       let email = `${username}@habitrpg.com`;
       let password = 'password';
 
-      await expect(api.post('/user/auth/local/register', {
+      let user = await api.post('/user/auth/local/register', {
         username,
         email,
         password,
         confirmPassword: password,
-      })).to.eventually.be.rejected.and.eql({
-        code: 400,
-        error: 'BadRequest',
-        message: 'User validation failed',
       });
+      expect(user._id).to.exist;
     });
 
     it('requires a password', async () => {
diff --git a/test/api/v4/user/auth/POST-register_local.test.js b/test/api/v4/user/auth/POST-register_local.test.js
index b75c9b4c55..8bdf4dd4c0 100644
--- a/test/api/v4/user/auth/POST-register_local.test.js
+++ b/test/api/v4/user/auth/POST-register_local.test.js
@@ -372,38 +372,32 @@ describe('POST /user/auth/local/register', () => {
       expect(user.auth.local.email).to.equal(email.toLowerCase());
     });
 
-    it('fails on a habitica.com email', async () => {
+    it('works even on a habitica.com email', async () => {
       let username = generateRandomUserName();
       let email = `${username}@habitica.com`;
       let password = 'password';
 
-      await expect(api.post('/user/auth/local/register', {
+      let user = await api.post('/user/auth/local/register', {
         username,
         email,
         password,
         confirmPassword: password,
-      })).to.eventually.be.rejected.and.eql({
-        code: 400,
-        error: 'BadRequest',
-        message: 'User validation failed',
       });
+      expect(user._id).to.exist;
     });
 
-    it('fails on a habitrpg.com email', async () => {
+    it('works even on a habitrpg.com email', async () => {
       let username = generateRandomUserName();
       let email = `${username}@habitrpg.com`;
       let password = 'password';
 
-      await expect(api.post('/user/auth/local/register', {
+      let user = await api.post('/user/auth/local/register', {
         username,
         email,
         password,
         confirmPassword: password,
-      })).to.eventually.be.rejected.and.eql({
-        code: 400,
-        error: 'BadRequest',
-        message: 'User validation failed',
       });
+      expect(user._id).to.exist;
     });
 
     it('requires a password', async () => {
diff --git a/website/server/models/user/schema.js b/website/server/models/user/schema.js
index 621f66e92c..75efb7f937 100644
--- a/website/server/models/user/schema.js
+++ b/website/server/models/user/schema.js
@@ -15,8 +15,6 @@ import {
 
 const Schema = mongoose.Schema;
 
-const RESTRICTED_EMAIL_DOMAINS = Object.freeze(['habitica.com', 'habitrpg.com']);
-
 // User schema definition
 let schema = new Schema({
   apiToken: {
@@ -32,15 +30,6 @@ let schema = new Schema({
         validate: [{
           validator: (v) => validator.isEmail(v),
           message: shared.i18n.t('invalidEmail'),
-        }, {
-          validator (email) {
-            let lowercaseEmail = email.toLowerCase();
-
-            return RESTRICTED_EMAIL_DOMAINS.every((domain) => {
-              return !lowercaseEmail.endsWith(`@${domain}`);
-            });
-          },
-          message: shared.i18n.t('invalidEmailDomain', { domains: RESTRICTED_EMAIL_DOMAINS.join(', ')}),
         }],
       },
       username: {
