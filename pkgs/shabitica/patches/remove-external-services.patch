Author: aszlig <aszlig@nix.build>
Date:   Tue Mar 27 05:37:11 2018 +0200

    Remove all external services from the code
    
    This is one of the bigger changes in our standalone version and this
    removes all the analytics, trackers, payment systems, social networking
    integration and others.
    
    The services that are removed are the following:
    
      * Amazon Payments
      * Amazon S3
      * Amplitude (users behavior analytics)
      * Apple Push Notifications
      * Apple iTunes Store
      * CloudKarafka (hosted Apache Kafka service)
      * External request to Google Fonts
      * Facebook share buttons
      * Facebook social authentication
      * Firebase Cloud Messaging
      * Google Analytics
      * Google Cloud Messaging
      * Google Docs links
      * Google In-App-Payments
      * Google Play Store
      * Google social authentication
      * Instagram links
      * Loggly log analysis
      * New Relic analytics
      * Paypal payments
      * Pusher (publish/subscribe)
      * Slack integration
      * StackImpact (external service for performance profiling)
      * Stripe payments
      * Tumblr share buttons
      * Twitter share buttons
    
    Signed-off-by: aszlig <aszlig@nix.build>
    Filename: remove-external-services.patch

diff --git a/config.json.example b/config.json.example
index ae805b0561..e13607e0ee 100644
--- a/config.json.example
+++ b/config.json.example
@@ -1,12 +1,5 @@
 {
   "ADMIN_EMAIL": "you@example.com",
-  "AMAZON_PAYMENTS_CLIENT_ID": "CLIENT_ID",
-  "AMAZON_PAYMENTS_MODE": "sandbox",
-  "AMAZON_PAYMENTS_MWS_KEY": "MWS_KEY",
-  "AMAZON_PAYMENTS_MWS_SECRET": "MWS_SECRET",
-  "AMAZON_PAYMENTS_SELLER_ID": "SELLER_ID",
-  "AMPLITUDE_KEY": "AMPLITUDE_KEY",
-  "AMPLITUDE_SECRET": "AMPLITUDE_SECRET",
   "BASE_URL": "http://localhost:3000",
   "CRON_SAFE_MODE": "false",
   "CRON_SEMI_SAFE_MODE": "false",
@@ -19,58 +12,20 @@
   "EMAIL_SERVER_URL": "http://example.com",
   "ENABLE_CONSOLE_LOGS_IN_PROD": "false",
   "ENABLE_CONSOLE_LOGS_IN_TEST": "false",
-  "FACEBOOK_KEY": "123456789012345",
-  "FACEBOOK_SECRET": "aaaabbbbccccddddeeeeffff00001111",
   "FLAG_REPORT_EMAIL": "email@example.com, email2@example.com",
-  "GA_ID": "GA_ID",
-  "GOOGLE_CLIENT_ID": "123456789012345",
-  "GOOGLE_CLIENT_SECRET": "aaaabbbbccccddddeeeeffff00001111",
-  "IAP_GOOGLE_KEYDIR": "/path/to/google/public/key/dir/",
   "IGNORE_REDIRECT": "true",
-  "ITUNES_SHARED_SECRET": "aaaabbbbccccddddeeeeffff00001111",
-  "LOGGLY_CLIENT_TOKEN": "token",
-  "LOGGLY_SUBDOMAIN": "example-subdomain",
-  "LOGGLY_TOKEN": "example-token",
   "MAINTENANCE_MODE": "false",
   "NODE_DB_URI": "mongodb://localhost/habitrpg",
   "NODE_ENV": "development",
   "PATH": "bin:node_modules/.bin:/usr/local/bin:/usr/bin:/bin",
-  "PAYPAL_BILLING_PLANS_basic_12mo": "basic_12mo",
-  "PAYPAL_BILLING_PLANS_basic_3mo": "basic_3mo",
-  "PAYPAL_BILLING_PLANS_basic_6mo": "basic_6mo",
-  "PAYPAL_BILLING_PLANS_basic_earned": "basic_earned",
-  "PAYPAL_BILLING_PLANS_google_6mo": "google_6mo",
-  "PAYPAL_CLIENT_ID": "client_id",
-  "PAYPAL_CLIENT_SECRET": "client_secret",
-  "PAYPAL_EXPERIENCE_PROFILE_ID": "xp_profile_id",
-  "PAYPAL_MODE": "sandbox",
-  "PLAY_API_ACCESS_TOKEN": "aaaabbbbccccddddeeeeffff00001111",
-  "PLAY_API_CLIENT_ID": "aaaabbbbccccddddeeeeffff00001111",
-  "PLAY_API_CLIENT_SECRET": "aaaabbbbccccddddeeeeffff00001111",
-  "PLAY_API_REFRESH_TOKEN": "aaaabbbbccccddddeeeeffff00001111",
   "PORT": 3000,
-  "PUSH_CONFIGS_APN_ENABLED": "false",
-  "PUSH_CONFIGS_APN_KEY": "xxxxxxxxxx",
-  "PUSH_CONFIGS_APN_KEY_ID": "xxxxxxxxxx",
-  "PUSH_CONFIGS_APN_TEAM_ID": "aaabbbcccd",
-  "PUSH_CONFIGS_FCM_SERVER_API_KEY": "aaabbbcccd",
-  "S3_ACCESS_KEY_ID": "accessKeyId",
-  "S3_BUCKET": "bucket",
-  "S3_SECRET_ACCESS_KEY": "secretAccessKey",
   "SESSION_SECRET": "YOUR SECRET HERE",
   "SESSION_SECRET_IV": "12345678912345678912345678912345",
   "SESSION_SECRET_KEY": "1234567891234567891234567891234567891234567891234567891234567891",
   "SITE_HTTP_AUTH_ENABLED": "false",
   "SITE_HTTP_AUTH_PASSWORDS": "password,wordpass,passkey",
   "SITE_HTTP_AUTH_USERNAMES": "admin,tester,contributor",
-  "SLACK_FLAGGING_FOOTER_LINK": "https://habitrpg.github.io/flag-o-rama/",
-  "SLACK_FLAGGING_URL": "https://hooks.slack.com/services/id/id/id",
-  "SLACK_SUBSCRIPTIONS_URL": "https://hooks.slack.com/services/id/id/id",
-  "SLACK_URL": "https://hooks.slack.com/services/some-url",
-  "STRIPE_API_KEY": "aaaabbbbccccddddeeeeffff00001111",
-  "STRIPE_PUB_KEY": "22223333444455556666777788889999",
   "TEST_DB_URI": "mongodb://localhost/habitrpg_test",
-  "TRANSIFEX_SLACK_CHANNEL": "transifex",
   "WEB_CONCURRENCY": 1,
   "SKIP_SSL_CHECK_KEY": "key",
   "ENABLE_STACKDRIVER_TRACING": "false"
diff --git a/gulp/taskHelper.js b/gulp/taskHelper.js
index 270573ba70..75d2ae7596 100644
--- a/gulp/taskHelper.js
+++ b/gulp/taskHelper.js
@@ -2,7 +2,6 @@ import { exec }                   from 'child_process';
 import psTree                     from 'ps-tree';
 import nconf                      from 'nconf';
 import net                        from 'net';
-import { post }                   from 'superagent';
 import { sync as glob }           from 'glob';
 import Mocha                      from 'mocha';
 import { resolve }                from 'path';
@@ -79,31 +78,6 @@ export function pipe (child) {
   });
 }
 
-/*
- * Post request to notify configured slack channel
- */
-export function postToSlack (msg, config = {}) {
-  let slackUrl = nconf.get('SLACK_URL');
-
-  if (!slackUrl) {
-    console.error('No slack post url specified. Your message was:'); // eslint-disable-line no-console
-    console.log(msg); // eslint-disable-line no-console
-
-    return;
-  }
-
-  post(slackUrl)
-    .send({
-      channel: `#${config.channel || '#general'}`,
-      username: config.username || 'gulp task',
-      text: msg,
-      icon_emoji: `:${config.emoji || 'gulp'}:`, // eslint-disable-line camelcase
-    })
-    .end((err) => {
-      if (err) console.error('Unable to post to slack', err); // eslint-disable-line no-console
-    });
-}
-
 export function runMochaTests (files, server, cb) {
   require('../test/helpers/globals.helper'); // eslint-disable-line global-require
 
diff --git a/test/api/unit/libs/cron.test.js b/test/api/unit/libs/cron.test.js
index 61e7499393..2666f11cdf 100644
--- a/test/api/unit/libs/cron.test.js
+++ b/test/api/unit/libs/cron.test.js
@@ -6,7 +6,6 @@ import { recoverCron, cron } from '../../../../website/server/libs/cron';
 import { model as User } from '../../../../website/server/models/user';
 import * as Tasks from '../../../../website/server/models/task';
 import common from '../../../../website/common';
-import analytics from '../../../../website/server/libs/analyticsService';
 
 // const scoreTask = common.ops.scoreTask;
 
@@ -30,47 +29,33 @@ describe('cron', () => {
         },
       },
     });
-
-    sinon.spy(analytics, 'track');
   });
 
   afterEach(() => {
     if (clock !== null)
       clock.restore();
-    analytics.track.restore();
   });
 
   it('updates user.preferences.timezoneOffsetAtLastCron', () => {
     let timezoneOffsetFromUserPrefs = 1;
 
-    cron({user, tasksByType, daysMissed, analytics, timezoneOffsetFromUserPrefs});
+    cron({user, tasksByType, daysMissed, timezoneOffsetFromUserPrefs});
 
     expect(user.preferences.timezoneOffsetAtLastCron).to.equal(timezoneOffsetFromUserPrefs);
   });
 
   it('resets user.items.lastDrop.count', () => {
     user.items.lastDrop.count = 4;
-    cron({user, tasksByType, daysMissed, analytics});
+    cron({user, tasksByType, daysMissed});
     expect(user.items.lastDrop.count).to.equal(0);
   });
 
   it('increments user cron count', () => {
     let cronCountBefore = user.flags.cronCount;
-    cron({user, tasksByType, daysMissed, analytics});
+    cron({user, tasksByType, daysMissed});
     expect(user.flags.cronCount).to.be.greaterThan(cronCountBefore);
   });
 
-  it('calls analytics', () => {
-    cron({user, tasksByType, daysMissed, analytics});
-    expect(analytics.track.callCount).to.equal(1);
-  });
-
-  it('calls analytics when user is sleeping', () => {
-    user.preferences.sleep = true;
-    cron({user, tasksByType, daysMissed, analytics});
-    expect(analytics.track.callCount).to.equal(1);
-  });
-
   describe('end of the month perks', () => {
     beforeEach(() => {
       user.purchased.plan.customerId = 'subscribedId';
@@ -79,14 +64,14 @@ describe('cron', () => {
 
     it('resets plan.gemsBought on a new month', () => {
       user.purchased.plan.gemsBought = 10;
-      cron({user, tasksByType, daysMissed, analytics});
+      cron({user, tasksByType, daysMissed});
       expect(user.purchased.plan.gemsBought).to.equal(0);
     });
 
     it('resets plan.gemsBought on a new month if user does not have purchased.plan.dateUpdated', () => {
       user.purchased.plan.gemsBought = 10;
       user.purchased.plan.dateUpdated = undefined;
-      cron({user, tasksByType, daysMissed, analytics});
+      cron({user, tasksByType, daysMissed});
       expect(user.purchased.plan.gemsBought).to.equal(0);
     });
 
@@ -95,32 +80,32 @@ describe('cron', () => {
       user.purchased.plan.dateUpdated = moment().startOf('month').toDate();
 
       user.purchased.plan.gemsBought = 10;
-      cron({user, tasksByType, daysMissed, analytics});
+      cron({user, tasksByType, daysMissed});
       expect(user.purchased.plan.gemsBought).to.equal(10);
     });
 
     it('resets plan.dateUpdated on a new month', () => {
       let currentMonth = moment().startOf('month');
-      cron({user, tasksByType, daysMissed, analytics});
+      cron({user, tasksByType, daysMissed});
       expect(moment(user.purchased.plan.dateUpdated).startOf('month').isSame(currentMonth)).to.eql(true);
     });
 
     it('increments plan.consecutive.count', () => {
       user.purchased.plan.consecutive.count = 0;
-      cron({user, tasksByType, daysMissed, analytics});
+      cron({user, tasksByType, daysMissed});
       expect(user.purchased.plan.consecutive.count).to.equal(1);
     });
 
     it('increments plan.consecutive.count by more than 1 if user skipped months between logins', () => {
       user.purchased.plan.dateUpdated = moment().subtract(2, 'months').toDate();
       user.purchased.plan.consecutive.count = 0;
-      cron({user, tasksByType, daysMissed, analytics});
+      cron({user, tasksByType, daysMissed});
       expect(user.purchased.plan.consecutive.count).to.equal(2);
     });
 
     it('decrements plan.consecutive.offset when offset is greater than 0', () => {
       user.purchased.plan.consecutive.offset = 2;
-      cron({user, tasksByType, daysMissed, analytics});
+      cron({user, tasksByType, daysMissed});
       expect(user.purchased.plan.consecutive.offset).to.equal(1);
     });
 
@@ -130,7 +115,7 @@ describe('cron', () => {
       user.purchased.plan.consecutive.count = 5;
       user.purchased.plan.consecutive.trinkets = 1;
 
-      cron({user, tasksByType, daysMissed, analytics});
+      cron({user, tasksByType, daysMissed});
 
       expect(user.purchased.plan.consecutive.trinkets).to.equal(1);
     });
@@ -138,13 +123,13 @@ describe('cron', () => {
     it('does not increment plan.consecutive.gemCapExtra when user has reached the gemCap limit', () => {
       user.purchased.plan.consecutive.gemCapExtra = 25;
       user.purchased.plan.consecutive.count = 5;
-      cron({user, tasksByType, daysMissed, analytics});
+      cron({user, tasksByType, daysMissed});
       expect(user.purchased.plan.consecutive.gemCapExtra).to.equal(25);
     });
 
     it('does not reset plan stats if we are before the last day of the cancelled month', () => {
       user.purchased.plan.dateTerminated = moment(new Date()).add({days: 1});
-      cron({user, tasksByType, daysMissed, analytics});
+      cron({user, tasksByType, daysMissed});
       expect(user.purchased.plan.customerId).to.exist;
     });
 
@@ -154,7 +139,7 @@ describe('cron', () => {
       user.purchased.plan.consecutive.count = 5;
       user.purchased.plan.consecutive.offset = 1;
 
-      cron({user, tasksByType, daysMissed, analytics});
+      cron({user, tasksByType, daysMissed});
 
       expect(user.purchased.plan.customerId).to.not.exist;
       expect(user.purchased.plan.consecutive.gemCapExtra).to.equal(0);
@@ -188,7 +173,7 @@ describe('cron', () => {
         clock = sinon.useFakeTimers(moment().zone(0).startOf('month').add(1, 'months').add(2, 'days').toDate());
         // Add 1 month to simulate what happens a month after the subscription was created.
         // Add 2 days so that we're sure we're not affected by any start-of-month effects e.g., from time zone oddness.
-        cron({user: user1, tasksByType, daysMissed, analytics});
+        cron({user: user1, tasksByType, daysMissed});
         expect(user1.purchased.plan.consecutive.count).to.equal(1);
         expect(user1.purchased.plan.consecutive.offset).to.equal(0);
         expect(user1.purchased.plan.consecutive.trinkets).to.equal(0);
@@ -199,7 +184,7 @@ describe('cron', () => {
         clock = sinon.useFakeTimers(moment().zone(0).startOf('month').add(2, 'months').add(2, 'days').toDate());
         // Add 1 month to simulate what happens a month after the subscription was created.
         // Add 2 days so that we're sure we're not affected by any start-of-month effects e.g., from time zone oddness.
-        cron({user: user1, tasksByType, daysMissed, analytics});
+        cron({user: user1, tasksByType, daysMissed});
         expect(user1.purchased.plan.consecutive.count).to.equal(2);
         expect(user1.purchased.plan.consecutive.offset).to.equal(0);
         expect(user1.purchased.plan.consecutive.trinkets).to.equal(0);
@@ -210,7 +195,7 @@ describe('cron', () => {
         clock = sinon.useFakeTimers(moment().zone(0).startOf('month').add(3, 'months').add(2, 'days').toDate());
         // Add 1 month to simulate what happens a month after the subscription was created.
         // Add 2 days so that we're sure we're not affected by any start-of-month effects e.g., from time zone oddness.
-        cron({user: user1, tasksByType, daysMissed, analytics});
+        cron({user: user1, tasksByType, daysMissed});
         expect(user1.purchased.plan.consecutive.count).to.equal(3);
         expect(user1.purchased.plan.consecutive.offset).to.equal(0);
         expect(user1.purchased.plan.consecutive.trinkets).to.equal(1);
@@ -221,7 +206,7 @@ describe('cron', () => {
         clock = sinon.useFakeTimers(moment().zone(0).startOf('month').add(4, 'months').add(2, 'days').toDate());
         // Add 1 month to simulate what happens a month after the subscription was created.
         // Add 2 days so that we're sure we're not affected by any start-of-month effects e.g., from time zone oddness.
-        cron({user: user1, tasksByType, daysMissed, analytics});
+        cron({user: user1, tasksByType, daysMissed});
         expect(user1.purchased.plan.consecutive.count).to.equal(4);
         expect(user1.purchased.plan.consecutive.offset).to.equal(0);
         expect(user1.purchased.plan.consecutive.trinkets).to.equal(1);
@@ -230,7 +215,7 @@ describe('cron', () => {
 
       it('increments consecutive benefits correctly if user has been absent with continuous subscription', () => {
         clock = sinon.useFakeTimers(moment().zone(0).startOf('month').add(10, 'months').add(2, 'days').toDate());
-        cron({user: user1, tasksByType, daysMissed, analytics});
+        cron({user: user1, tasksByType, daysMissed});
         expect(user1.purchased.plan.consecutive.count).to.equal(10);
         expect(user1.purchased.plan.consecutive.offset).to.equal(0);
         expect(user1.purchased.plan.consecutive.trinkets).to.equal(3);
@@ -261,7 +246,7 @@ describe('cron', () => {
 
       it('does not increment consecutive benefits in the first month of the first paid period that they already have benefits for', () => {
         clock = sinon.useFakeTimers(moment().zone(0).startOf('month').add(1, 'months').add(2, 'days').toDate());
-        cron({user: user3, tasksByType, daysMissed, analytics});
+        cron({user: user3, tasksByType, daysMissed});
         expect(user3.purchased.plan.consecutive.count).to.equal(1);
         expect(user3.purchased.plan.consecutive.offset).to.equal(2);
         expect(user3.purchased.plan.consecutive.trinkets).to.equal(1);
@@ -270,7 +255,7 @@ describe('cron', () => {
 
       it('does not increment consecutive benefits in the middle of the period that they already have benefits for', () => {
         clock = sinon.useFakeTimers(moment().zone(0).startOf('month').add(2, 'months').add(2, 'days').toDate());
-        cron({user: user3, tasksByType, daysMissed, analytics});
+        cron({user: user3, tasksByType, daysMissed});
         expect(user3.purchased.plan.consecutive.count).to.equal(2);
         expect(user3.purchased.plan.consecutive.offset).to.equal(1);
         expect(user3.purchased.plan.consecutive.trinkets).to.equal(1);
@@ -279,7 +264,7 @@ describe('cron', () => {
 
       it('does not increment consecutive benefits in the final month of the period that they already have benefits for', () => {
         clock = sinon.useFakeTimers(moment().zone(0).startOf('month').add(3, 'months').add(2, 'days').toDate());
-        cron({user: user3, tasksByType, daysMissed, analytics});
+        cron({user: user3, tasksByType, daysMissed});
         expect(user3.purchased.plan.consecutive.count).to.equal(3);
         expect(user3.purchased.plan.consecutive.offset).to.equal(0);
         expect(user3.purchased.plan.consecutive.trinkets).to.equal(1);
@@ -288,7 +273,7 @@ describe('cron', () => {
 
       it('increments consecutive benefits the month after the second paid period has started', () => {
         clock = sinon.useFakeTimers(moment().zone(0).startOf('month').add(4, 'months').add(2, 'days').toDate());
-        cron({user: user3, tasksByType, daysMissed, analytics});
+        cron({user: user3, tasksByType, daysMissed});
         expect(user3.purchased.plan.consecutive.count).to.equal(4);
         expect(user3.purchased.plan.consecutive.offset).to.equal(2);
         expect(user3.purchased.plan.consecutive.trinkets).to.equal(2);
@@ -297,7 +282,7 @@ describe('cron', () => {
 
       it('does not increment consecutive benefits in the second month of the second period that they already have benefits for', () => {
         clock = sinon.useFakeTimers(moment().zone(0).startOf('month').add(5, 'months').add(2, 'days').toDate());
-        cron({user: user3, tasksByType, daysMissed, analytics});
+        cron({user: user3, tasksByType, daysMissed});
         expect(user3.purchased.plan.consecutive.count).to.equal(5);
         expect(user3.purchased.plan.consecutive.offset).to.equal(1);
         expect(user3.purchased.plan.consecutive.trinkets).to.equal(2);
@@ -306,7 +291,7 @@ describe('cron', () => {
 
       it('does not increment consecutive benefits in the final month of the second period that they already have benefits for', () => {
         clock = sinon.useFakeTimers(moment().zone(0).startOf('month').add(6, 'months').add(2, 'days').toDate());
-        cron({user: user3, tasksByType, daysMissed, analytics});
+        cron({user: user3, tasksByType, daysMissed});
         expect(user3.purchased.plan.consecutive.count).to.equal(6);
         expect(user3.purchased.plan.consecutive.offset).to.equal(0);
         expect(user3.purchased.plan.consecutive.trinkets).to.equal(2);
@@ -315,7 +300,7 @@ describe('cron', () => {
 
       it('increments consecutive benefits the month after the third paid period has started', () => {
         clock = sinon.useFakeTimers(moment().zone(0).startOf('month').add(7, 'months').add(2, 'days').toDate());
-        cron({user: user3, tasksByType, daysMissed, analytics});
+        cron({user: user3, tasksByType, daysMissed});
         expect(user3.purchased.plan.consecutive.count).to.equal(7);
         expect(user3.purchased.plan.consecutive.offset).to.equal(2);
         expect(user3.purchased.plan.consecutive.trinkets).to.equal(3);
@@ -324,7 +309,7 @@ describe('cron', () => {
 
       it('increments consecutive benefits correctly if user has been absent with continuous subscription', () => {
         clock = sinon.useFakeTimers(moment().zone(0).startOf('month').add(10, 'months').add(2, 'days').toDate());
-        cron({user: user3, tasksByType, daysMissed, analytics});
+        cron({user: user3, tasksByType, daysMissed});
         expect(user3.purchased.plan.consecutive.count).to.equal(10);
         expect(user3.purchased.plan.consecutive.offset).to.equal(2);
         expect(user3.purchased.plan.consecutive.trinkets).to.equal(4);
@@ -355,7 +340,7 @@ describe('cron', () => {
 
       it('does not increment consecutive benefits in the first month of the first paid period that they already have benefits for', () => {
         clock = sinon.useFakeTimers(moment().zone(0).startOf('month').add(1, 'months').add(2, 'days').toDate());
-        cron({user: user6, tasksByType, daysMissed, analytics});
+        cron({user: user6, tasksByType, daysMissed});
         expect(user6.purchased.plan.consecutive.count).to.equal(1);
         expect(user6.purchased.plan.consecutive.offset).to.equal(5);
         expect(user6.purchased.plan.consecutive.trinkets).to.equal(2);
@@ -364,7 +349,7 @@ describe('cron', () => {
 
       it('does not increment consecutive benefits in the final month of the period that they already have benefits for', () => {
         clock = sinon.useFakeTimers(moment().zone(0).startOf('month').add(6, 'months').add(2, 'days').toDate());
-        cron({user: user6, tasksByType, daysMissed, analytics});
+        cron({user: user6, tasksByType, daysMissed});
         expect(user6.purchased.plan.consecutive.count).to.equal(6);
         expect(user6.purchased.plan.consecutive.offset).to.equal(0);
         expect(user6.purchased.plan.consecutive.trinkets).to.equal(2);
@@ -373,7 +358,7 @@ describe('cron', () => {
 
       it('increments consecutive benefits the month after the second paid period has started', () => {
         clock = sinon.useFakeTimers(moment().zone(0).startOf('month').add(7, 'months').add(2, 'days').toDate());
-        cron({user: user6, tasksByType, daysMissed, analytics});
+        cron({user: user6, tasksByType, daysMissed});
         expect(user6.purchased.plan.consecutive.count).to.equal(7);
         expect(user6.purchased.plan.consecutive.offset).to.equal(5);
         expect(user6.purchased.plan.consecutive.trinkets).to.equal(4);
@@ -382,7 +367,7 @@ describe('cron', () => {
 
       it('increments consecutive benefits the month after the third paid period has started', () => {
         clock = sinon.useFakeTimers(moment().zone(0).startOf('month').add(13, 'months').add(2, 'days').toDate());
-        cron({user: user6, tasksByType, daysMissed, analytics});
+        cron({user: user6, tasksByType, daysMissed});
         expect(user6.purchased.plan.consecutive.count).to.equal(13);
         expect(user6.purchased.plan.consecutive.offset).to.equal(5);
         expect(user6.purchased.plan.consecutive.trinkets).to.equal(6);
@@ -391,7 +376,7 @@ describe('cron', () => {
 
       it('increments consecutive benefits correctly if user has been absent with continuous subscription', () => {
         clock = sinon.useFakeTimers(moment().zone(0).startOf('month').add(19, 'months').add(2, 'days').toDate());
-        cron({user: user6, tasksByType, daysMissed, analytics});
+        cron({user: user6, tasksByType, daysMissed});
         expect(user6.purchased.plan.consecutive.count).to.equal(19);
         expect(user6.purchased.plan.consecutive.offset).to.equal(5);
         expect(user6.purchased.plan.consecutive.trinkets).to.equal(8);
@@ -422,7 +407,7 @@ describe('cron', () => {
 
       it('does not increment consecutive benefits in the first month of the first paid period that they already have benefits for', () => {
         clock = sinon.useFakeTimers(moment().zone(0).startOf('month').add(1, 'months').add(2, 'days').toDate());
-        cron({user: user12, tasksByType, daysMissed, analytics});
+        cron({user: user12, tasksByType, daysMissed});
         expect(user12.purchased.plan.consecutive.count).to.equal(1);
         expect(user12.purchased.plan.consecutive.offset).to.equal(11);
         expect(user12.purchased.plan.consecutive.trinkets).to.equal(4);
@@ -431,7 +416,7 @@ describe('cron', () => {
 
       it('does not increment consecutive benefits in the final month of the period that they already have benefits for', () => {
         clock = sinon.useFakeTimers(moment().zone(0).startOf('month').add(12, 'months').add(2, 'days').toDate());
-        cron({user: user12, tasksByType, daysMissed, analytics});
+        cron({user: user12, tasksByType, daysMissed});
         expect(user12.purchased.plan.consecutive.count).to.equal(12);
         expect(user12.purchased.plan.consecutive.offset).to.equal(0);
         expect(user12.purchased.plan.consecutive.trinkets).to.equal(4);
@@ -440,7 +425,7 @@ describe('cron', () => {
 
       it('increments consecutive benefits the month after the second paid period has started', () => {
         clock = sinon.useFakeTimers(moment().zone(0).startOf('month').add(13, 'months').add(2, 'days').toDate());
-        cron({user: user12, tasksByType, daysMissed, analytics});
+        cron({user: user12, tasksByType, daysMissed});
         expect(user12.purchased.plan.consecutive.count).to.equal(13);
         expect(user12.purchased.plan.consecutive.offset).to.equal(11);
         expect(user12.purchased.plan.consecutive.trinkets).to.equal(8);
@@ -449,7 +434,7 @@ describe('cron', () => {
 
       it('increments consecutive benefits the month after the third paid period has started', () => {
         clock = sinon.useFakeTimers(moment().zone(0).startOf('month').add(25, 'months').add(2, 'days').toDate());
-        cron({user: user12, tasksByType, daysMissed, analytics});
+        cron({user: user12, tasksByType, daysMissed});
         expect(user12.purchased.plan.consecutive.count).to.equal(25);
         expect(user12.purchased.plan.consecutive.offset).to.equal(11);
         expect(user12.purchased.plan.consecutive.trinkets).to.equal(12);
@@ -458,7 +443,7 @@ describe('cron', () => {
 
       it('increments consecutive benefits correctly if user has been absent with continuous subscription', () => {
         clock = sinon.useFakeTimers(moment().zone(0).startOf('month').add(37, 'months').add(2, 'days').toDate());
-        cron({user: user12, tasksByType, daysMissed, analytics});
+        cron({user: user12, tasksByType, daysMissed});
         expect(user12.purchased.plan.consecutive.count).to.equal(37);
         expect(user12.purchased.plan.consecutive.offset).to.equal(11);
         expect(user12.purchased.plan.consecutive.trinkets).to.equal(16);
@@ -490,7 +475,7 @@ describe('cron', () => {
 
       it('does not increment consecutive benefits in the first month of the gift subscription', () => {
         clock = sinon.useFakeTimers(moment().zone(0).startOf('month').add(1, 'months').add(2, 'days').toDate());
-        cron({user: user3g, tasksByType, daysMissed, analytics});
+        cron({user: user3g, tasksByType, daysMissed});
         expect(user3g.purchased.plan.consecutive.count).to.equal(1);
         expect(user3g.purchased.plan.consecutive.offset).to.equal(2);
         expect(user3g.purchased.plan.consecutive.trinkets).to.equal(1);
@@ -499,7 +484,7 @@ describe('cron', () => {
 
       it('does not increment consecutive benefits in the second month of the gift subscription', () => {
         clock = sinon.useFakeTimers(moment().zone(0).startOf('month').add(2, 'months').add(2, 'days').toDate());
-        cron({user: user3g, tasksByType, daysMissed, analytics});
+        cron({user: user3g, tasksByType, daysMissed});
         expect(user3g.purchased.plan.consecutive.count).to.equal(2);
         expect(user3g.purchased.plan.consecutive.offset).to.equal(1);
         expect(user3g.purchased.plan.consecutive.trinkets).to.equal(1);
@@ -508,7 +493,7 @@ describe('cron', () => {
 
       it('does not increment consecutive benefits in the third month of the gift subscription', () => {
         clock = sinon.useFakeTimers(moment().zone(0).startOf('month').add(3, 'months').add(2, 'days').toDate());
-        cron({user: user3g, tasksByType, daysMissed, analytics});
+        cron({user: user3g, tasksByType, daysMissed});
         expect(user3g.purchased.plan.consecutive.count).to.equal(3);
         expect(user3g.purchased.plan.consecutive.offset).to.equal(0);
         expect(user3g.purchased.plan.consecutive.trinkets).to.equal(1);
@@ -517,7 +502,7 @@ describe('cron', () => {
 
       it('does not increment consecutive benefits in the month after the gift subscription has ended', () => {
         clock = sinon.useFakeTimers(moment().zone(0).startOf('month').add(4, 'months').add(2, 'days').toDate());
-        cron({user: user3g, tasksByType, daysMissed, analytics});
+        cron({user: user3g, tasksByType, daysMissed});
         expect(user3g.purchased.plan.consecutive.count).to.equal(0); // subscription has been erased by now
         expect(user3g.purchased.plan.consecutive.offset).to.equal(0);
         expect(user3g.purchased.plan.consecutive.trinkets).to.equal(1);
@@ -548,7 +533,7 @@ describe('cron', () => {
 
       it('increments consecutive benefits in the first month since the fix for #4819 goes live', () => {
         clock = sinon.useFakeTimers(moment().zone(0).startOf('month').add(1, 'months').add(2, 'days').toDate());
-        cron({user: user6x, tasksByType, daysMissed, analytics});
+        cron({user: user6x, tasksByType, daysMissed});
         expect(user6x.purchased.plan.consecutive.count).to.equal(9);
         expect(user6x.purchased.plan.consecutive.offset).to.equal(5);
         expect(user6x.purchased.plan.consecutive.trinkets).to.equal(5);
@@ -557,7 +542,7 @@ describe('cron', () => {
 
       it('does not increment consecutive benefits in the second month after the fix goes live', () => {
         clock = sinon.useFakeTimers(moment().zone(0).startOf('month').add(2, 'months').add(2, 'days').toDate());
-        cron({user: user6x, tasksByType, daysMissed, analytics});
+        cron({user: user6x, tasksByType, daysMissed});
         expect(user6x.purchased.plan.consecutive.count).to.equal(10);
         expect(user6x.purchased.plan.consecutive.offset).to.equal(4);
         expect(user6x.purchased.plan.consecutive.trinkets).to.equal(5);
@@ -566,7 +551,7 @@ describe('cron', () => {
 
       it('does not increment consecutive benefits in the third month after the fix goes live', () => {
         clock = sinon.useFakeTimers(moment().zone(0).startOf('month').add(3, 'months').add(2, 'days').toDate());
-        cron({user: user6x, tasksByType, daysMissed, analytics});
+        cron({user: user6x, tasksByType, daysMissed});
         expect(user6x.purchased.plan.consecutive.count).to.equal(11);
         expect(user6x.purchased.plan.consecutive.offset).to.equal(3);
         expect(user6x.purchased.plan.consecutive.trinkets).to.equal(5);
@@ -575,7 +560,7 @@ describe('cron', () => {
 
       it('increments consecutive benefits in the seventh month after the fix goes live', () => {
         clock = sinon.useFakeTimers(moment().zone(0).startOf('month').add(7, 'months').add(2, 'days').toDate());
-        cron({user: user6x, tasksByType, daysMissed, analytics});
+        cron({user: user6x, tasksByType, daysMissed});
         expect(user6x.purchased.plan.consecutive.count).to.equal(15);
         expect(user6x.purchased.plan.consecutive.offset).to.equal(5);
         expect(user6x.purchased.plan.consecutive.trinkets).to.equal(7);
@@ -591,7 +576,7 @@ describe('cron', () => {
 
     it('resets plan.gemsBought on a new month', () => {
       user.purchased.plan.gemsBought = 10;
-      cron({user, tasksByType, daysMissed, analytics});
+      cron({user, tasksByType, daysMissed});
       expect(user.purchased.plan.gemsBought).to.equal(0);
     });
 
@@ -600,49 +585,49 @@ describe('cron', () => {
       user.purchased.plan.dateUpdated = moment().startOf('month').toDate();
 
       user.purchased.plan.gemsBought = 10;
-      cron({user, tasksByType, daysMissed, analytics});
+      cron({user, tasksByType, daysMissed});
       expect(user.purchased.plan.gemsBought).to.equal(10);
     });
 
     it('does not reset plan.dateUpdated on a new month', () => {
-      cron({user, tasksByType, daysMissed, analytics});
+      cron({user, tasksByType, daysMissed});
       expect(user.purchased.plan.dateUpdated).to.be.empty;
     });
 
     it('does not increment plan.consecutive.count', () => {
       user.purchased.plan.consecutive.count = 0;
-      cron({user, tasksByType, daysMissed, analytics});
+      cron({user, tasksByType, daysMissed});
       expect(user.purchased.plan.consecutive.count).to.equal(0);
     });
 
     it('does not decrement plan.consecutive.offset when offset is greater than 0', () => {
       user.purchased.plan.consecutive.offset = 1;
-      cron({user, tasksByType, daysMissed, analytics});
+      cron({user, tasksByType, daysMissed});
       expect(user.purchased.plan.consecutive.offset).to.equal(1);
     });
 
     it('does not increment plan.consecutive.trinkets when user has reached a month that is a multiple of 3', () => {
       user.purchased.plan.consecutive.count = 5;
-      cron({user, tasksByType, daysMissed, analytics});
+      cron({user, tasksByType, daysMissed});
       expect(user.purchased.plan.consecutive.trinkets).to.equal(0);
     });
 
     it('does not increment plan.consecutive.gemCapExtra when user has reached a month that is a multiple of 3', () => {
       user.purchased.plan.consecutive.count = 5;
-      cron({user, tasksByType, daysMissed, analytics});
+      cron({user, tasksByType, daysMissed});
       expect(user.purchased.plan.consecutive.gemCapExtra).to.equal(0);
     });
 
     it('does not increment plan.consecutive.gemCapExtra when user has reached the gemCap limit', () => {
       user.purchased.plan.consecutive.gemCapExtra = 25;
       user.purchased.plan.consecutive.count = 5;
-      cron({user, tasksByType, daysMissed, analytics});
+      cron({user, tasksByType, daysMissed});
       expect(user.purchased.plan.consecutive.gemCapExtra).to.equal(25);
     });
 
     it('does nothing to plan stats if we are before the last day of the cancelled month', () => {
       user.purchased.plan.dateTerminated = moment(new Date()).add({days: 1});
-      cron({user, tasksByType, daysMissed, analytics});
+      cron({user, tasksByType, daysMissed});
       expect(user.purchased.plan.customerId).to.not.exist;
     });
 
@@ -652,7 +637,7 @@ describe('cron', () => {
       user.purchased.plan.consecutive.count = 5;
       user.purchased.plan.consecutive.offset = 1;
 
-      cron({user, tasksByType, daysMissed, analytics});
+      cron({user, tasksByType, daysMissed});
 
       expect(user.purchased.plan.customerId).to.exist;
       expect(user.purchased.plan.consecutive.gemCapExtra).to.exist;
@@ -675,14 +660,14 @@ describe('cron', () => {
 
     it('should make uncompleted todos redder', () => {
       let valueBefore = tasksByType.todos[0].value;
-      cron({user, tasksByType, daysMissed, analytics});
+      cron({user, tasksByType, daysMissed});
       expect(tasksByType.todos[0].value).to.be.lessThan(valueBefore);
     });
 
     it('should add history of completed todos to user history', () => {
       tasksByType.todos[0].completed = true;
 
-      cron({user, tasksByType, daysMissed, analytics});
+      cron({user, tasksByType, daysMissed});
 
       expect(user.history.todos).to.be.lengthOf(1);
     });
@@ -711,7 +696,7 @@ describe('cron', () => {
       expect(tasksByType.todos).to.be.lengthOf(2);
       expect(user.tasksOrder.todos).to.be.lengthOf(3);
 
-      cron({user, tasksByType, daysMissed, analytics});
+      cron({user, tasksByType, daysMissed});
 
       // user.tasksOrder.todos should be filtered while tasks by type remains unchanged
       expect(tasksByType.todos).to.be.lengthOf(2);
@@ -740,7 +725,7 @@ describe('cron', () => {
       }).reverse();
       let original = user.tasksOrder.todos; // Preserve the original order
 
-      cron({user, tasksByType, daysMissed, analytics});
+      cron({user, tasksByType, daysMissed});
 
       let listsAreEqual = true;
       user.tasksOrder.todos.forEach((taskId, index) => {
@@ -778,7 +763,7 @@ describe('cron', () => {
       tasksByType.dailys[0].frequency = 'daily';
       tasksByType.dailys[0].everyX = 5;
       tasksByType.dailys[0].startDate = moment().add(1, 'days').toDate();
-      cron({user, tasksByType, daysMissed, analytics});
+      cron({user, tasksByType, daysMissed});
       expect(tasksByType.dailys[0].isDue).to.be.false;
     });
 
@@ -787,7 +772,7 @@ describe('cron', () => {
       tasksByType.dailys[0].frequency = 'daily';
       tasksByType.dailys[0].everyX = 5;
       tasksByType.dailys[0].startDate = moment().toDate();
-      cron({user, tasksByType, daysMissed, analytics});
+      cron({user, tasksByType, daysMissed});
       expect(tasksByType.dailys[0].isDue).to.exist;
     });
 
@@ -795,32 +780,32 @@ describe('cron', () => {
       tasksByType.dailys[0].frequency = 'daily';
       tasksByType.dailys[0].everyX = 5;
       tasksByType.dailys[0].startDate = moment().add(1, 'days').toDate();
-      cron({user, tasksByType, daysMissed, analytics});
+      cron({user, tasksByType, daysMissed});
       expect(tasksByType.dailys[0].nextDue.length).to.eql(6);
     });
 
     it('should add history', () => {
-      cron({user, tasksByType, daysMissed, analytics});
+      cron({user, tasksByType, daysMissed});
       expect(tasksByType.dailys[0].history).to.be.lengthOf(1);
     });
 
     it('should set tasks completed to false', () => {
       tasksByType.dailys[0].completed = true;
-      cron({user, tasksByType, daysMissed, analytics});
+      cron({user, tasksByType, daysMissed});
       expect(tasksByType.dailys[0].completed).to.be.false;
     });
 
     it('should set tasks completed to false when user is sleeping', () => {
       user.preferences.sleep = true;
       tasksByType.dailys[0].completed = true;
-      cron({user, tasksByType, daysMissed, analytics});
+      cron({user, tasksByType, daysMissed});
       expect(tasksByType.dailys[0].completed).to.be.false;
     });
 
     it('should reset task checklist for completed dailys', () => {
       tasksByType.dailys[0].checklist.push({title: 'test', completed: false});
       tasksByType.dailys[0].completed = true;
-      cron({user, tasksByType, daysMissed, analytics});
+      cron({user, tasksByType, daysMissed});
       expect(tasksByType.dailys[0].checklist[0].completed).to.be.false;
     });
 
@@ -828,7 +813,7 @@ describe('cron', () => {
       user.preferences.sleep = true;
       tasksByType.dailys[0].checklist.push({title: 'test', completed: false});
       tasksByType.dailys[0].completed = true;
-      cron({user, tasksByType, daysMissed, analytics});
+      cron({user, tasksByType, daysMissed});
       expect(tasksByType.dailys[0].checklist[0].completed).to.be.false;
     });
 
@@ -836,7 +821,7 @@ describe('cron', () => {
       daysMissed = 10;
       tasksByType.dailys[0].checklist.push({title: 'test', completed: false});
       tasksByType.dailys[0].startDate = moment(new Date()).subtract({days: 1});
-      cron({user, tasksByType, daysMissed, analytics});
+      cron({user, tasksByType, daysMissed});
       expect(tasksByType.dailys[0].checklist[0].completed).to.be.false;
     });
 
@@ -844,7 +829,7 @@ describe('cron', () => {
       daysMissed = 1;
       let hpBefore = user.stats.hp;
       tasksByType.dailys[0].startDate = moment(new Date()).subtract({days: 1});
-      cron({user, tasksByType, daysMissed, analytics});
+      cron({user, tasksByType, daysMissed});
       expect(user.stats.hp).to.be.lessThan(hpBefore);
     });
 
@@ -853,7 +838,7 @@ describe('cron', () => {
       daysMissed = 1;
       let hpBefore = user.stats.hp;
       tasksByType.dailys[0].startDate = moment(new Date()).subtract({days: 1});
-      cron({user, tasksByType, daysMissed, analytics});
+      cron({user, tasksByType, daysMissed});
       expect(user.stats.hp).to.equal(hpBefore);
     });
 
@@ -865,7 +850,7 @@ describe('cron', () => {
       let hpBefore = user.stats.hp;
       tasksByType.dailys[0].startDate = moment(new Date()).subtract({days: 1});
 
-      cronOverride({user, tasksByType, daysMissed, analytics});
+      cronOverride({user, tasksByType, daysMissed});
 
       expect(user.stats.hp).to.equal(hpBefore);
     });
@@ -876,7 +861,7 @@ describe('cron', () => {
       user.stats.buffs.stealth = 2;
       tasksByType.dailys[0].startDate = moment(new Date()).subtract({days: 1});
 
-      cron({user, tasksByType, daysMissed, analytics});
+      cron({user, tasksByType, daysMissed});
 
       expect(user.stats.hp).to.equal(hpBefore);
     });
@@ -885,13 +870,13 @@ describe('cron', () => {
       daysMissed = 1;
       let hpBefore = user.stats.hp;
       tasksByType.dailys[0].startDate = moment(new Date()).subtract({days: 1});
-      cron({user, tasksByType, daysMissed, analytics});
+      cron({user, tasksByType, daysMissed});
       let hpDifferenceOfFullyIncompleteDaily = hpBefore - user.stats.hp;
 
       hpBefore = user.stats.hp;
       tasksByType.dailys[0].checklist.push({title: 'test', completed: true});
       tasksByType.dailys[0].checklist.push({title: 'test2', completed: false});
-      cron({user, tasksByType, daysMissed, analytics});
+      cron({user, tasksByType, daysMissed});
       let hpDifferenceOfPartiallyIncompleteDaily = hpBefore - user.stats.hp;
 
       expect(hpDifferenceOfPartiallyIncompleteDaily).to.be.lessThan(hpDifferenceOfFullyIncompleteDaily);
@@ -901,7 +886,7 @@ describe('cron', () => {
       daysMissed = 1;
       tasksByType.dailys[0].startDate = moment(new Date()).subtract({days: 1});
 
-      let progress = cron({user, tasksByType, daysMissed, analytics});
+      let progress = cron({user, tasksByType, daysMissed});
 
       expect(progress.down).to.equal(-1);
     });
@@ -911,7 +896,7 @@ describe('cron', () => {
       daysMissed = 1;
       tasksByType.dailys[0].startDate = moment(new Date()).subtract({days: 1});
 
-      let progress = cron({user, tasksByType, daysMissed, analytics});
+      let progress = cron({user, tasksByType, daysMissed});
 
       expect(progress.down).to.equal(0);
     });
@@ -930,7 +915,7 @@ describe('cron', () => {
       tasksByType.dailys[1].everyX = 2;
       tasksByType.dailys[1].frequency = 'daily';
 
-      cron({user, tasksByType, daysMissed, analytics});
+      cron({user, tasksByType, daysMissed});
 
       expect(user.stats.hp).to.equal(48);
     });
@@ -952,7 +937,7 @@ describe('cron', () => {
       tasksByType.habits[0].value = 1;
       tasksByType.habits[0].down = false;
 
-      cron({user, tasksByType, daysMissed, analytics});
+      cron({user, tasksByType, daysMissed});
 
       expect(tasksByType.habits[0].value).to.be.lessThan(1);
     });
@@ -961,7 +946,7 @@ describe('cron', () => {
       tasksByType.habits[0].value = 1;
       tasksByType.habits[0].up = false;
 
-      cron({user, tasksByType, daysMissed, analytics});
+      cron({user, tasksByType, daysMissed});
 
       expect(tasksByType.habits[0].value).to.be.lessThan(1);
     });
@@ -971,7 +956,7 @@ describe('cron', () => {
       tasksByType.habits[0].up = true;
       tasksByType.habits[0].down = true;
 
-      cron({user, tasksByType, daysMissed, analytics});
+      cron({user, tasksByType, daysMissed});
 
       expect(tasksByType.habits[0].value).to.equal(1);
     });
@@ -988,7 +973,7 @@ describe('cron', () => {
         tasksByType.habits[0].counterUp = 1;
         tasksByType.habits[0].counterDown = 1;
 
-        cron({user, tasksByType, daysMissed, analytics});
+        cron({user, tasksByType, daysMissed});
 
         expect(tasksByType.habits[0].counterUp).to.equal(0);
         expect(tasksByType.habits[0].counterDown).to.equal(0);
@@ -999,7 +984,7 @@ describe('cron', () => {
         tasksByType.habits[0].counterUp = 1;
         tasksByType.habits[0].counterDown = 1;
 
-        cron({user, tasksByType, daysMissed, analytics});
+        cron({user, tasksByType, daysMissed});
 
         expect(tasksByType.habits[0].counterUp).to.equal(0);
         expect(tasksByType.habits[0].counterDown).to.equal(0);
@@ -1011,14 +996,14 @@ describe('cron', () => {
         tasksByType.habits[0].counterDown = 1;
 
         // should not reset
-        cron({user, tasksByType, daysMissed, analytics});
+        cron({user, tasksByType, daysMissed});
 
         expect(tasksByType.habits[0].counterUp).to.equal(1);
         expect(tasksByType.habits[0].counterDown).to.equal(1);
 
         // should reset
         daysMissed = 8;
-        cron({user, tasksByType, daysMissed, analytics});
+        cron({user, tasksByType, daysMissed});
 
         expect(tasksByType.habits[0].counterUp).to.equal(0);
         expect(tasksByType.habits[0].counterDown).to.equal(0);
@@ -1040,7 +1025,7 @@ describe('cron', () => {
         daysMissed = 1;
 
         // should not reset
-        cron({user, tasksByType, daysMissed, analytics});
+        cron({user, tasksByType, daysMissed});
 
         expect(tasksByType.habits[0].counterUp).to.equal(1);
         expect(tasksByType.habits[0].counterDown).to.equal(1);
@@ -1052,7 +1037,7 @@ describe('cron', () => {
         clock = sinon.useFakeTimers(monday);
 
         // should reset after user CDS
-        cron({user, tasksByType, daysMissed, analytics});
+        cron({user, tasksByType, daysMissed});
 
         expect(tasksByType.habits[0].counterUp).to.equal(0);
         expect(tasksByType.habits[0].counterDown).to.equal(0);
@@ -1074,7 +1059,7 @@ describe('cron', () => {
         daysMissed = 1;
 
         // should not reset
-        cron({user, tasksByType, daysMissed, analytics});
+        cron({user, tasksByType, daysMissed});
 
         expect(tasksByType.habits[0].counterUp).to.equal(1);
         expect(tasksByType.habits[0].counterDown).to.equal(1);
@@ -1082,7 +1067,7 @@ describe('cron', () => {
         // User missed one cron, which will subtract User clock back to Monday 1am UTC + 2
         // should reset
         daysMissed = 2;
-        cron({user, tasksByType, daysMissed, analytics});
+        cron({user, tasksByType, daysMissed});
 
         expect(tasksByType.habits[0].counterUp).to.equal(0);
         expect(tasksByType.habits[0].counterDown).to.equal(0);
@@ -1104,7 +1089,7 @@ describe('cron', () => {
         daysMissed = 1;
 
         // should reset
-        cron({user, tasksByType, daysMissed, analytics});
+        cron({user, tasksByType, daysMissed});
 
         expect(tasksByType.habits[0].counterUp).to.equal(0);
         expect(tasksByType.habits[0].counterDown).to.equal(0);
@@ -1126,7 +1111,7 @@ describe('cron', () => {
         daysMissed = 1;
 
         // should not reset
-        cron({user, tasksByType, daysMissed, analytics});
+        cron({user, tasksByType, daysMissed});
 
         expect(tasksByType.habits[0].counterUp).to.equal(1);
         expect(tasksByType.habits[0].counterDown).to.equal(1);
@@ -1138,14 +1123,14 @@ describe('cron', () => {
         tasksByType.habits[0].counterDown = 1;
 
         // should not reset
-        cron({user, tasksByType, daysMissed, analytics});
+        cron({user, tasksByType, daysMissed});
 
         expect(tasksByType.habits[0].counterUp).to.equal(1);
         expect(tasksByType.habits[0].counterDown).to.equal(1);
 
         // should reset
         daysMissed = 32;
-        cron({user, tasksByType, daysMissed, analytics});
+        cron({user, tasksByType, daysMissed});
 
         expect(tasksByType.habits[0].counterUp).to.equal(0);
         expect(tasksByType.habits[0].counterDown).to.equal(0);
@@ -1168,7 +1153,7 @@ describe('cron', () => {
         daysMissed = 1;
 
         // should reset
-        cron({user, tasksByType, daysMissed, analytics});
+        cron({user, tasksByType, daysMissed});
 
         expect(tasksByType.habits[0].counterUp).to.equal(0);
         expect(tasksByType.habits[0].counterDown).to.equal(0);
@@ -1190,7 +1175,7 @@ describe('cron', () => {
         daysMissed = 1;
 
         // should not reset
-        cron({user, tasksByType, daysMissed, analytics});
+        cron({user, tasksByType, daysMissed});
 
         expect(tasksByType.habits[0].counterUp).to.equal(1);
         expect(tasksByType.habits[0].counterDown).to.equal(1);
@@ -1198,7 +1183,7 @@ describe('cron', () => {
         // User missed one day, which will subtract User clock back to 5/1/17 2am UTC + 3
         // should reset
         daysMissed = 2;
-        cron({user, tasksByType, daysMissed, analytics});
+        cron({user, tasksByType, daysMissed});
 
         expect(tasksByType.habits[0].counterUp).to.equal(0);
         expect(tasksByType.habits[0].counterDown).to.equal(0);
@@ -1229,7 +1214,7 @@ describe('cron', () => {
     it('stores a new entry in user.history.exp', () => {
       user.stats.lvl = 2;
 
-      cron({user, tasksByType, daysMissed, analytics});
+      cron({user, tasksByType, daysMissed});
 
       expect(user.history.exp).to.have.lengthOf(1);
       expect(user.history.exp[0].value).to.equal(25);
@@ -1240,7 +1225,7 @@ describe('cron', () => {
       tasksByType.dailys[0].completed = true;
       tasksByType.dailys[0].startDate = moment(new Date()).subtract({days: 1});
 
-      cron({user, tasksByType, daysMissed, analytics});
+      cron({user, tasksByType, daysMissed});
 
       expect(user.achievements.perfect).to.equal(1);
     });
@@ -1250,7 +1235,7 @@ describe('cron', () => {
       tasksByType.dailys[0].completed = true;
       tasksByType.dailys[0].startDate = moment(new Date()).add({days: 1});
 
-      cron({user, tasksByType, daysMissed, analytics});
+      cron({user, tasksByType, daysMissed});
 
       expect(user.achievements.perfect).to.equal(0);
     });
@@ -1262,7 +1247,7 @@ describe('cron', () => {
 
       let previousBuffs = user.stats.buffs.toObject();
 
-      cron({user, tasksByType, daysMissed, analytics});
+      cron({user, tasksByType, daysMissed});
 
       expect(user.stats.buffs.str).to.be.greaterThan(previousBuffs.str);
       expect(user.stats.buffs.int).to.be.greaterThan(previousBuffs.int);
@@ -1278,7 +1263,7 @@ describe('cron', () => {
 
       let previousBuffs = user.stats.buffs.toObject();
 
-      cron({user, tasksByType, daysMissed, analytics});
+      cron({user, tasksByType, daysMissed});
 
       expect(user.stats.buffs.str).to.be.greaterThan(previousBuffs.str);
       expect(user.stats.buffs.int).to.be.greaterThan(previousBuffs.int);
@@ -1300,7 +1285,7 @@ describe('cron', () => {
         streaks: true,
       };
 
-      cron({user, tasksByType, daysMissed, analytics});
+      cron({user, tasksByType, daysMissed});
 
       expect(user.stats.buffs.str).to.equal(0);
       expect(user.stats.buffs.int).to.equal(0);
@@ -1325,7 +1310,7 @@ describe('cron', () => {
         streaks: true,
       };
 
-      cron({user, tasksByType, daysMissed, analytics});
+      cron({user, tasksByType, daysMissed});
 
       expect(user.stats.buffs.str).to.equal(0);
       expect(user.stats.buffs.int).to.equal(0);
@@ -1349,7 +1334,7 @@ describe('cron', () => {
         streaks: true,
       };
 
-      cron({user, tasksByType, daysMissed, analytics});
+      cron({user, tasksByType, daysMissed});
 
       expect(user.stats.buffs.str).to.equal(0);
       expect(user.stats.buffs.int).to.equal(0);
@@ -1374,7 +1359,7 @@ describe('cron', () => {
         streaks: true,
       };
 
-      cron({user, tasksByType, daysMissed, analytics});
+      cron({user, tasksByType, daysMissed});
 
       expect(user.stats.buffs.str).to.equal(0);
       expect(user.stats.buffs.int).to.equal(0);
@@ -1393,7 +1378,7 @@ describe('cron', () => {
 
       let previousBuffs = user.stats.buffs.toObject();
 
-      cronOverride({user, tasksByType, daysMissed, analytics});
+      cronOverride({user, tasksByType, daysMissed});
 
       expect(user.stats.buffs.str).to.be.greaterThan(previousBuffs.str);
       expect(user.stats.buffs.int).to.be.greaterThan(previousBuffs.int);
@@ -1411,7 +1396,7 @@ describe('cron', () => {
 
       let previousBuffs = user.stats.buffs.toObject();
 
-      cronOverride({user, tasksByType, daysMissed, analytics});
+      cronOverride({user, tasksByType, daysMissed});
 
       expect(user.stats.buffs.str).to.be.greaterThan(previousBuffs.str);
       expect(user.stats.buffs.int).to.be.greaterThan(previousBuffs.int);
@@ -1428,7 +1413,7 @@ describe('cron', () => {
       let mpBefore = user.stats.mp;
       tasksByType.dailys[0].completed = true;
       stubbedStatsComputed.returns(Object.assign(statsComputedRes, {maxMP: 100}));
-      cron({user, tasksByType, daysMissed, analytics});
+      cron({user, tasksByType, daysMissed});
       expect(user.stats.mp).to.be.greaterThan(mpBefore);
 
       common.statsComputed.restore();
@@ -1442,7 +1427,7 @@ describe('cron', () => {
       let mpBefore = user.stats.mp;
       tasksByType.dailys[0].completed = true;
       stubbedStatsComputed.returns(Object.assign(statsComputedRes, {maxMP: 100}));
-      cron({user, tasksByType, daysMissed, analytics});
+      cron({user, tasksByType, daysMissed});
       expect(user.stats.mp).to.equal(mpBefore);
 
       common.statsComputed.restore();
@@ -1453,7 +1438,7 @@ describe('cron', () => {
       const stubbedStatsComputed = sinon.stub(common, 'statsComputed');
       user.stats.mp = 120;
       stubbedStatsComputed.returns(Object.assign(statsComputedRes, {maxMP: 100}));
-      cron({user, tasksByType, daysMissed, analytics});
+      cron({user, tasksByType, daysMissed});
       expect(user.stats.mp).to.equal(common.statsComputed(user).maxMP);
 
       common.statsComputed.restore();
@@ -1484,14 +1469,14 @@ describe('cron', () => {
     });
 
     it('resets user progress', () => {
-      cron({user, tasksByType, daysMissed, analytics});
+      cron({user, tasksByType, daysMissed});
       expect(user.party.quest.progress.up).to.equal(0);
       expect(user.party.quest.progress.down).to.equal(0);
       expect(user.party.quest.progress.collectedItems).to.equal(0);
     });
 
     it('applies the user progress', () => {
-      let progress = cron({user, tasksByType, daysMissed, analytics});
+      let progress = cron({user, tasksByType, daysMissed});
       expect(progress.down).to.equal(-1);
     });
   });
@@ -1509,7 +1494,7 @@ describe('cron', () => {
       let hpBefore = user.stats.hp;
       tasksByType.dailys[0].startDate = moment(new Date()).subtract({days: 1});
 
-      cron({user, tasksByType, daysMissed, analytics});
+      cron({user, tasksByType, daysMissed});
 
       expect(user.notifications.length).to.be.greaterThan(0);
       expect(user.notifications[1].type).to.equal('CRON');
@@ -1533,7 +1518,7 @@ describe('cron', () => {
       let hpBefore1 = user.stats.hp;
       tasksByType.dailys[0].startDate = moment(new Date()).subtract({days: 1});
 
-      cron({user, tasksByType, daysMissed, analytics});
+      cron({user, tasksByType, daysMissed});
 
       expect(user.notifications.length).to.be.greaterThan(0);
       expect(user.notifications[1].type).to.equal('CRON');
@@ -1548,7 +1533,7 @@ describe('cron', () => {
 
       user.lastCron = moment(new Date()).subtract({days: 2});
 
-      cron({user, tasksByType, daysMissed, analytics});
+      cron({user, tasksByType, daysMissed});
 
       expect(user.notifications.length - notifsBefore2).to.equal(0);
       expect(user.notifications[0].type).to.not.equal('CRON');
@@ -1593,23 +1578,23 @@ describe('cron', () => {
 
   describe('login incentives', () => {
     it('increments incentive counter each cron', () => {
-      cron({user, tasksByType, daysMissed, analytics});
+      cron({user, tasksByType, daysMissed});
       expect(user.loginIncentives).to.eql(1);
       user.lastCron = moment(new Date()).subtract({days: 1});
-      cron({user, tasksByType, daysMissed, analytics});
+      cron({user, tasksByType, daysMissed});
       expect(user.loginIncentives).to.eql(2);
     });
 
     it('pushes a notification of the day\'s incentive each cron', () => {
-      cron({user, tasksByType, daysMissed, analytics});
+      cron({user, tasksByType, daysMissed});
       expect(user.notifications.length).to.be.greaterThan(1);
       expect(user.notifications[0].type).to.eql('LOGIN_INCENTIVE');
     });
 
     it('replaces previous notifications', () => {
-      cron({user, tasksByType, daysMissed, analytics});
-      cron({user, tasksByType, daysMissed, analytics});
-      cron({user, tasksByType, daysMissed, analytics});
+      cron({user, tasksByType, daysMissed});
+      cron({user, tasksByType, daysMissed});
+      cron({user, tasksByType, daysMissed});
 
       let filteredNotifications = user.notifications.filter(n => n.type === 'LOGIN_INCENTIVE');
 
@@ -1618,18 +1603,18 @@ describe('cron', () => {
 
     it('increments loginIncentives by 1 even if days are skipped in between', () => {
       daysMissed = 3;
-      cron({user, tasksByType, daysMissed, analytics});
+      cron({user, tasksByType, daysMissed});
       expect(user.loginIncentives).to.eql(1);
     });
 
     it('increments loginIncentives by 1 even if user is sleeping', () => {
       user.preferences.sleep = true;
-      cron({user, tasksByType, daysMissed, analytics});
+      cron({user, tasksByType, daysMissed});
       expect(user.loginIncentives).to.eql(1);
     });
 
     it('awards user bard robes if login incentive is 1', () => {
-      cron({user, tasksByType, daysMissed, analytics});
+      cron({user, tasksByType, daysMissed});
       expect(user.loginIncentives).to.eql(1);
       expect(user.items.gear.owned.armor_special_bardRobes).to.eql(true);
       expect(user.notifications[0].type).to.eql('LOGIN_INCENTIVE');
@@ -1637,7 +1622,7 @@ describe('cron', () => {
 
     it('awards user incentive backgrounds if login incentive is 2', () => {
       user.loginIncentives = 1;
-      cron({user, tasksByType, daysMissed, analytics});
+      cron({user, tasksByType, daysMissed});
       expect(user.loginIncentives).to.eql(2);
       expect(user.purchased.background.blue).to.eql(true);
       expect(user.purchased.background.green).to.eql(true);
@@ -1649,7 +1634,7 @@ describe('cron', () => {
 
     it('awards user Bard Hat if login incentive is 3', () => {
       user.loginIncentives = 2;
-      cron({user, tasksByType, daysMissed, analytics});
+      cron({user, tasksByType, daysMissed});
       expect(user.loginIncentives).to.eql(3);
       expect(user.items.gear.owned.head_special_bardHat).to.eql(true);
       expect(user.notifications[0].type).to.eql('LOGIN_INCENTIVE');
@@ -1657,7 +1642,7 @@ describe('cron', () => {
 
     it('awards user RoyalPurple Hatching Potion if login incentive is 4', () => {
       user.loginIncentives = 3;
-      cron({user, tasksByType, daysMissed, analytics});
+      cron({user, tasksByType, daysMissed});
       expect(user.loginIncentives).to.eql(4);
       expect(user.items.hatchingPotions.RoyalPurple).to.eql(1);
       expect(user.notifications[0].type).to.eql('LOGIN_INCENTIVE');
@@ -1665,7 +1650,7 @@ describe('cron', () => {
 
     it('awards user a Chocolate, Meat and Pink Contton Candy if login incentive is 5', () => {
       user.loginIncentives = 4;
-      cron({user, tasksByType, daysMissed, analytics});
+      cron({user, tasksByType, daysMissed});
       expect(user.loginIncentives).to.eql(5);
 
       expect(user.items.food.Chocolate).to.eql(1);
@@ -1677,7 +1662,7 @@ describe('cron', () => {
 
     it('awards user moon quest if login incentive is 7', () => {
       user.loginIncentives = 6;
-      cron({user, tasksByType, daysMissed, analytics});
+      cron({user, tasksByType, daysMissed});
       expect(user.loginIncentives).to.eql(7);
       expect(user.items.quests.moon1).to.eql(1);
       expect(user.notifications[0].type).to.eql('LOGIN_INCENTIVE');
@@ -1685,7 +1670,7 @@ describe('cron', () => {
 
     it('awards user RoyalPurple Hatching Potion if login incentive is 10', () => {
       user.loginIncentives = 9;
-      cron({user, tasksByType, daysMissed, analytics});
+      cron({user, tasksByType, daysMissed});
       expect(user.loginIncentives).to.eql(10);
       expect(user.items.hatchingPotions.RoyalPurple).to.eql(1);
       expect(user.notifications[0].type).to.eql('LOGIN_INCENTIVE');
@@ -1693,7 +1678,7 @@ describe('cron', () => {
 
     it('awards user a Strawberry, Patato and Blue Contton Candy if login incentive is 14', () => {
       user.loginIncentives = 13;
-      cron({user, tasksByType, daysMissed, analytics});
+      cron({user, tasksByType, daysMissed});
       expect(user.loginIncentives).to.eql(14);
 
       expect(user.items.food.Strawberry).to.eql(1);
@@ -1705,7 +1690,7 @@ describe('cron', () => {
 
     it('awards user a bard instrument if login incentive is 18', () => {
       user.loginIncentives = 17;
-      cron({user, tasksByType, daysMissed, analytics});
+      cron({user, tasksByType, daysMissed});
       expect(user.loginIncentives).to.eql(18);
       expect(user.items.gear.owned.weapon_special_bardInstrument).to.eql(true);
       expect(user.notifications[0].type).to.eql('LOGIN_INCENTIVE');
@@ -1713,7 +1698,7 @@ describe('cron', () => {
 
     it('awards user second moon quest if login incentive is 22', () => {
       user.loginIncentives = 21;
-      cron({user, tasksByType, daysMissed, analytics});
+      cron({user, tasksByType, daysMissed});
       expect(user.loginIncentives).to.eql(22);
       expect(user.items.quests.moon2).to.eql(1);
       expect(user.notifications[0].type).to.eql('LOGIN_INCENTIVE');
@@ -1721,7 +1706,7 @@ describe('cron', () => {
 
     it('awards user a RoyalPurple hatching potion if login incentive is 26', () => {
       user.loginIncentives = 25;
-      cron({user, tasksByType, daysMissed, analytics});
+      cron({user, tasksByType, daysMissed});
       expect(user.loginIncentives).to.eql(26);
       expect(user.items.hatchingPotions.RoyalPurple).to.eql(1);
       expect(user.notifications[0].type).to.eql('LOGIN_INCENTIVE');
@@ -1729,7 +1714,7 @@ describe('cron', () => {
 
     it('awards user Fish, Milk, Rotten Meat and Honey if login incentive is 30', () => {
       user.loginIncentives = 29;
-      cron({user, tasksByType, daysMissed, analytics});
+      cron({user, tasksByType, daysMissed});
       expect(user.loginIncentives).to.eql(30);
 
       expect(user.items.food.Fish).to.eql(1);
@@ -1742,7 +1727,7 @@ describe('cron', () => {
 
     it('awards user a RoyalPurple hatching potion if login incentive is 35', () => {
       user.loginIncentives = 34;
-      cron({user, tasksByType, daysMissed, analytics});
+      cron({user, tasksByType, daysMissed});
       expect(user.loginIncentives).to.eql(35);
       expect(user.items.hatchingPotions.RoyalPurple).to.eql(1);
       expect(user.notifications[0].type).to.eql('LOGIN_INCENTIVE');
@@ -1750,7 +1735,7 @@ describe('cron', () => {
 
     it('awards user the third moon quest if login incentive is 40', () => {
       user.loginIncentives = 39;
-      cron({user, tasksByType, daysMissed, analytics});
+      cron({user, tasksByType, daysMissed});
       expect(user.loginIncentives).to.eql(40);
       expect(user.items.quests.moon3).to.eql(1);
       expect(user.notifications[0].type).to.eql('LOGIN_INCENTIVE');
@@ -1758,7 +1743,7 @@ describe('cron', () => {
 
     it('awards user a RoyalPurple hatching potion if login incentive is 45', () => {
       user.loginIncentives = 44;
-      cron({user, tasksByType, daysMissed, analytics});
+      cron({user, tasksByType, daysMissed});
       expect(user.loginIncentives).to.eql(45);
       expect(user.items.hatchingPotions.RoyalPurple).to.eql(1);
       expect(user.notifications[0].type).to.eql('LOGIN_INCENTIVE');
@@ -1766,7 +1751,7 @@ describe('cron', () => {
 
     it('awards user a saddle if login incentive is 50', () => {
       user.loginIncentives = 49;
-      cron({user, tasksByType, daysMissed, analytics});
+      cron({user, tasksByType, daysMissed});
       expect(user.loginIncentives).to.eql(50);
       expect(user.items.food.Saddle).to.eql(1);
       expect(user.notifications[0].type).to.eql('LOGIN_INCENTIVE');
diff --git a/test/api/unit/libs/email.test.js b/test/api/unit/libs/email.test.js
index 6b4d368aa6..93cffd8693 100644
--- a/test/api/unit/libs/email.test.js
+++ b/test/api/unit/libs/email.test.js
@@ -51,22 +51,6 @@ describe('emails', () => {
       expect(data).to.have.property('_id', user._id);
       expect(data).to.have.property('canSend', true);
     });
-
-    it('returns correct user data [facebook users]', () => {
-      let attachEmail = requireAgain(pathToEmailLib);
-      let getUserInfo = attachEmail.getUserInfo;
-      let user = getUser();
-      delete user.profile.name;
-      delete user.auth.local.email;
-
-      let data = getUserInfo(user, ['name', 'email', '_id', 'canSend']);
-
-      expect(data).to.have.property('name', user.auth.local.username);
-      expect(data).to.have.property('email', user.auth.facebook.emails[0].value);
-      expect(data).to.have.property('_id', user._id);
-      expect(data).to.have.property('canSend', true);
-    });
-
     it('has fallbacks for missing data', () => {
       let attachEmail = requireAgain(pathToEmailLib);
       let getUserInfo = attachEmail.getUserInfo;
diff --git a/test/api/unit/libs/payments/payments.test.js b/test/api/unit/libs/payments/payments.test.js
index f37c5c511b..d33a0095cf 100644
--- a/test/api/unit/libs/payments/payments.test.js
+++ b/test/api/unit/libs/payments/payments.test.js
@@ -2,8 +2,6 @@ import moment from 'moment';
 
 import * as sender from '../../../../../website/server/libs/email';
 import * as api from '../../../../../website/server/libs/payments/payments';
-import analytics from '../../../../../website/server/libs/analyticsService';
-import notifications from '../../../../../website/server/libs/pushNotifications';
 import { model as User } from '../../../../../website/server/models/user';
 import { translate as t } from '../../../../helpers/api-integration/v3';
 import {
@@ -29,9 +27,6 @@ describe('payments/index', () => {
 
     sandbox.stub(sender, 'sendTxn');
     sandbox.stub(user, 'sendMessage');
-    sandbox.stub(analytics, 'trackPurchase');
-    sandbox.stub(analytics, 'track');
-    sandbox.stub(notifications, 'sendNotification');
 
     data = {
       user,
@@ -225,28 +220,6 @@ describe('payments/index', () => {
 
       it('sends a push notification about the gift', async () => {
         await api.createSubscription(data);
-        expect(notifications.sendNotification).to.be.calledOnce;
-      });
-
-      it('tracks subscription purchase as gift', async () => {
-        await api.createSubscription(data);
-
-        expect(analytics.trackPurchase).to.be.calledOnce;
-        expect(analytics.trackPurchase).to.be.calledWith({
-          uuid: user._id,
-          groupId: undefined,
-          itemPurchased: 'Subscription',
-          sku: 'payment method-subscription',
-          purchaseType: 'subscribe',
-          paymentMethod: data.paymentMethod,
-          quantity: 1,
-          gift: true,
-          purchaseValue: 15,
-          headers: {
-            'x-client': 'habitica-web',
-            'user-agent': '',
-          },
-        });
       });
     });
 
@@ -302,14 +275,6 @@ describe('payments/index', () => {
         expect(user.purchased.plan.gemsBought).to.eql(10);
       });
 
-      it('sets lastBillingDate if payment method is "Amazon Payments"', async () => {
-        data.paymentMethod = 'Amazon Payments';
-
-        await api.createSubscription(data);
-
-        expect(user.purchased.plan.lastBillingDate).to.exist;
-      });
-
       it('increases the user\'s transaction count', async () => {
         expect(user.purchased.txnCount).to.eql(0);
 
@@ -324,27 +289,6 @@ describe('payments/index', () => {
         expect(sender.sendTxn).to.be.calledOnce;
         expect(sender.sendTxn).to.be.calledWith(data.user, 'subscription-begins');
       });
-
-      it('tracks subscription purchase', async () => {
-        await api.createSubscription(data);
-
-        expect(analytics.trackPurchase).to.be.calledOnce;
-        expect(analytics.trackPurchase).to.be.calledWith({
-          uuid: user._id,
-          groupId: undefined,
-          itemPurchased: 'Subscription',
-          sku: 'payment method-subscription',
-          purchaseType: 'subscribe',
-          paymentMethod: data.paymentMethod,
-          quantity: 1,
-          gift: false,
-          purchaseValue: 15,
-          headers: {
-            'x-client': 'habitica-web',
-            'user-agent': '',
-          },
-        });
-      });
     });
 
     context('Block subscription perks', () => {
@@ -655,11 +599,6 @@ describe('payments/index', () => {
         expect(user.sendMessage).to.be.calledWith(recipient, { receiverMsg: msg, senderMsg: msg, save: false });
       });
 
-      it('sends a push notification if user did not gift to self', async () => {
-        await api.buyGems(data);
-        expect(notifications.sendNotification).to.be.calledOnce;
-      });
-
       it('sends gem donation message in each participant\'s language', async () => {
         // TODO using english for both users because other languages are not loaded
         // for api.buyGems
diff --git a/test/api/unit/middlewares/cronMiddleware.js b/test/api/unit/middlewares/cronMiddleware.js
index 28d4135e25..2deb852285 100644
--- a/test/api/unit/middlewares/cronMiddleware.js
+++ b/test/api/unit/middlewares/cronMiddleware.js
@@ -9,7 +9,6 @@ import moment from 'moment';
 import { model as User } from '../../../../website/server/models/user';
 import { model as Group } from '../../../../website/server/models/group';
 import * as Tasks from '../../../../website/server/models/task';
-import analyticsService from '../../../../website/server/libs/analyticsService';
 import * as cronLib from '../../../../website/server/libs/cron';
 import { v4 as generateUUID } from 'uuid';
 
@@ -38,7 +37,6 @@ describe('cron middleware', () => {
     user.save()
       .then(savedUser => {
         res.locals.user = savedUser;
-        res.analytics = analyticsService;
         done();
       })
       .catch(done);
diff --git a/test/api/v3/integration/chat/POST-chat.flag.test.js b/test/api/v3/integration/chat/POST-chat.flag.test.js
index 723715c80b..322e5853a0 100644
--- a/test/api/v3/integration/chat/POST-chat.flag.test.js
+++ b/test/api/v3/integration/chat/POST-chat.flag.test.js
@@ -4,10 +4,6 @@ import {
 } from '../../../../helpers/api-integration/v3';
 import { find } from 'lodash';
 import moment from 'moment';
-import nconf from 'nconf';
-import { IncomingWebhook } from '@slack/client';
-
-const BASE_URL = nconf.get('BASE_URL');
 
 describe('POST /chat/:chatId/flag', () => {
   let user, admin, anotherUser, newUser, group;
@@ -19,7 +15,6 @@ describe('POST /chat/:chatId/flag', () => {
     admin = await generateUser({balance: 1, 'contributor.admin': true});
     anotherUser = await generateUser({'auth.timestamps.created': moment().subtract(USER_AGE_FOR_FLAGGING + 1, 'days').toDate()});
     newUser = await generateUser({'auth.timestamps.created': moment().subtract(1, 'days').toDate()});
-    sandbox.stub(IncomingWebhook.prototype, 'send');
 
     group = await user.post('/groups', {
       name: 'Test Guild',
@@ -57,31 +52,9 @@ describe('POST /chat/:chatId/flag', () => {
 
     let messageToCheck = find(groupWithFlags.chat, {id: message.id});
     expect(messageToCheck.flags[user._id]).to.equal(true);
-
-    // Slack message to mods
-    const timestamp = `${moment(message.timestamp).utc().format('YYYY-MM-DD HH:mm')} UTC`;
-
-    /* eslint-disable camelcase */
-    expect(IncomingWebhook.prototype.send).to.be.calledWith({
-      text: `${user.profile.name} (${user.id}; language: en) flagged a group message`,
-      attachments: [{
-        fallback: 'Flag Message',
-        color: 'danger',
-        author_name: `@${anotherUser.auth.local.username} ${anotherUser.profile.name} (${anotherUser.auth.local.email}; ${anotherUser._id})\n${timestamp}`,
-        title: 'Flag in Test Guild',
-        title_link: `${BASE_URL}/groups/guild/${group._id}`,
-        text: TEST_MESSAGE,
-        footer: `<https://habitrpg.github.io/flag-o-rama/?groupId=${group._id}&chatId=${message.id}|Flag this message.>`,
-        mrkdwn_in: [
-          'text',
-        ],
-      }],
-    });
-    /* eslint-ensable camelcase */
   });
 
   it('Does not increment message flag count and sends different message to moderator Slack when user is new', async () => {
-    let automatedComment = `The post's flag count has not been increased because the flagger's account is less than ${USER_AGE_FOR_FLAGGING} days old.`;
     let { message } = await newUser.post(`/groups/${group._id}/chat`, {message: TEST_MESSAGE});
 
     let flagResult = await newUser.post(`/groups/${group._id}/chat/${message.id}/flag`);
@@ -92,27 +65,6 @@ describe('POST /chat/:chatId/flag', () => {
 
     let messageToCheck = find(groupWithFlags.chat, {id: message.id});
     expect(messageToCheck.flags[newUser._id]).to.equal(true);
-
-    // Slack message to mods
-    const timestamp = `${moment(message.timestamp).utc().format('YYYY-MM-DD HH:mm')} UTC`;
-
-    /* eslint-disable camelcase */
-    expect(IncomingWebhook.prototype.send).to.be.calledWith({
-      text: `${newUser.profile.name} (${newUser.id}; language: en) flagged a group message`,
-      attachments: [{
-        fallback: 'Flag Message',
-        color: 'danger',
-        author_name: `@${newUser.auth.local.username} ${newUser.profile.name} (${newUser.auth.local.email}; ${newUser._id})\n${timestamp}`,
-        title: 'Flag in Test Guild',
-        title_link: `${BASE_URL}/groups/guild/${group._id}`,
-        text: TEST_MESSAGE,
-        footer: `<https://habitrpg.github.io/flag-o-rama/?groupId=${group._id}&chatId=${message.id}|Flag this message.> ${automatedComment}`,
-        mrkdwn_in: [
-          'text',
-        ],
-      }],
-    });
-    /* eslint-ensable camelcase */
   });
 
   it('Flags a chat when the author\'s account was deleted', async () => {
diff --git a/test/api/v3/integration/chat/POST-chat.test.js b/test/api/v3/integration/chat/POST-chat.test.js
index 73ac2d3bf9..50cb211863 100644
--- a/test/api/v3/integration/chat/POST-chat.test.js
+++ b/test/api/v3/integration/chat/POST-chat.test.js
@@ -1,5 +1,3 @@
-import { IncomingWebhook } from '@slack/client';
-import nconf from 'nconf';
 import {
   createAndPopulateGroup,
   generateUser,
@@ -19,8 +17,6 @@ import bannedWords from '../../../../../website/server/libs/bannedWords';
 import guildsAllowingBannedWords from '../../../../../website/server/libs/guildsAllowingBannedWords';
 import * as email from '../../../../../website/server/libs/email';
 
-const BASE_URL = nconf.get('BASE_URL');
-
 describe('POST /chat', () => {
   let user, groupWithChat, member, additionalMember;
   let testMessage = 'Test Message';
@@ -358,7 +354,6 @@ describe('POST /chat', () => {
   context('banned slur', () => {
     beforeEach(() => {
       sandbox.spy(email, 'sendTxn');
-      sandbox.stub(IncomingWebhook.prototype, 'send');
     });
 
     afterEach(() => {
@@ -378,25 +373,6 @@ describe('POST /chat', () => {
       expect(email.sendTxn).to.be.calledOnce;
       expect(email.sendTxn.args[0][1]).to.eql('slur-report-to-mods');
 
-      // Slack message to mods
-      expect(IncomingWebhook.prototype.send).to.be.calledOnce;
-      /* eslint-disable camelcase */
-      expect(IncomingWebhook.prototype.send).to.be.calledWith({
-        text: `${user.profile.name} (${user.id}) tried to post a slur`,
-        attachments: [{
-          fallback: 'Slur Message',
-          color: 'danger',
-          author_name: `@${user.auth.local.username} ${user.profile.name} (${user.auth.local.email}; ${user._id})`,
-          title: 'Slur in Test Guild',
-          title_link: `${BASE_URL}/groups/guild/${groupWithChat.id}`,
-          text: testSlurMessage,
-          mrkdwn_in: [
-            'text',
-          ],
-        }],
-      });
-      /* eslint-enable camelcase */
-
       // Chat privileges are revoked
       await expect(user.post(`/groups/${groupWithChat._id}/chat`, { message: testMessage})).to.eventually.be.rejected.and.eql({
         code: 401,
@@ -426,25 +402,6 @@ describe('POST /chat', () => {
       expect(email.sendTxn).to.be.calledThrice;
       expect(email.sendTxn.args[2][1]).to.eql('slur-report-to-mods');
 
-      // Slack message to mods
-      expect(IncomingWebhook.prototype.send).to.be.calledOnce;
-      /* eslint-disable camelcase */
-      expect(IncomingWebhook.prototype.send).to.be.calledWith({
-        text: `${members[0].profile.name} (${members[0].id}) tried to post a slur`,
-        attachments: [{
-          fallback: 'Slur Message',
-          color: 'danger',
-          author_name: `@${members[0].auth.local.username} ${members[0].profile.name} (${members[0].auth.local.email}; ${members[0]._id})`,
-          title: 'Slur in Party - (private party)',
-          title_link: undefined,
-          text: testSlurMessage,
-          mrkdwn_in: [
-            'text',
-          ],
-        }],
-      });
-      /* eslint-enable camelcase */
-
       // Chat privileges are revoked
       await expect(members[0].post(`/groups/${groupWithChat._id}/chat`, { message: testMessage})).to.eventually.be.rejected.and.eql({
         code: 401,
diff --git a/test/api/v3/integration/user/DELETE-user.test.js b/test/api/v3/integration/user/DELETE-user.test.js
index 2fbe493d43..1e70c3486e 100644
--- a/test/api/v3/integration/user/DELETE-user.test.js
+++ b/test/api/v3/integration/user/DELETE-user.test.js
@@ -17,8 +17,6 @@ import {
 } from '../../../../../website/server/libs/password';
 import * as email from '../../../../../website/server/libs/email';
 
-const DELETE_CONFIRMATION = 'DELETE';
-
 describe('DELETE /user', () => {
   let user;
   let password = 'password'; // from habitrpg/test/helpers/api-integration/v3/object-generators.js
@@ -290,62 +288,4 @@ describe('DELETE /user', () => {
       });
     });
   });
-
-  context('user with Facebook auth', async () => {
-    beforeEach(async () => {
-      user = await generateUser({
-        auth: {
-          facebook: {
-            id: 'facebook-id',
-          },
-        },
-      });
-    });
-
-    it('returns an error if confirmation phrase is wrong', async () => {
-      await expect(user.del('/user', {
-        password: 'just-do-it',
-      })).to.eventually.be.rejected.and.eql({
-        code: 401,
-        error: 'NotAuthorized',
-        message: t('incorrectDeletePhrase', {magicWord: 'DELETE'}),
-      });
-    });
-
-    it('returns an error if confirmation phrase is not supplied', async () => {
-      await expect(user.del('/user', {
-        password: '',
-      })).to.eventually.be.rejected.and.eql({
-        code: 400,
-        error: 'BadRequest',
-        message: t('missingPassword'),
-      });
-    });
-
-    it('deletes a Facebook user', async () => {
-      await user.del('/user', {
-        password: DELETE_CONFIRMATION,
-      });
-      await expect(checkExistence('users', user._id)).to.eventually.eql(false);
-    });
-  });
-
-  context('user with Google auth', async () => {
-    beforeEach(async () => {
-      user = await generateUser({
-        auth: {
-          google: {
-            id: 'google-id',
-          },
-        },
-      });
-    });
-
-    it('deletes a Google user', async () => {
-      await user.del('/user', {
-        password: DELETE_CONFIRMATION,
-      });
-      await expect(checkExistence('users', user._id)).to.eventually.eql(false);
-    });
-  });
 });
diff --git a/test/api/v3/integration/user/POST-user_sleep.test.js b/test/api/v3/integration/user/POST-user_sleep.test.js
index 292b77e9db..0e9773150e 100644
--- a/test/api/v3/integration/user/POST-user_sleep.test.js
+++ b/test/api/v3/integration/user/POST-user_sleep.test.js
@@ -1,7 +1,6 @@
 import {
   generateUser,
 } from '../../../../helpers/api-integration/v3';
-import { mockAnalyticsService as analytics } from '../../../../../website/server/libs/analyticsService';
 
 describe('POST /user/sleep', () => {
   let user;
@@ -23,15 +22,4 @@ describe('POST /user/sleep', () => {
     await user.sync();
     expect(user.preferences.sleep).to.be.false;
   });
-
-  it('sends sleep status to analytics service', async () => {
-    sandbox.spy(analytics, 'track');
-
-    await user.post('/user/sleep');
-    await user.sync();
-    expect(analytics.track).to.be.calledOnce;
-    expect(analytics.track).to.be.calledWith('sleep', sandbox.match.has('status', user.preferences.sleep));
-
-    sandbox.restore();
-  });
 });
diff --git a/test/api/v3/integration/user/auth/POST-register_local.test.js b/test/api/v3/integration/user/auth/POST-register_local.test.js
index c6b3248258..5b559aae5b 100644
--- a/test/api/v3/integration/user/auth/POST-register_local.test.js
+++ b/test/api/v3/integration/user/auth/POST-register_local.test.js
@@ -440,40 +440,6 @@ describe('POST /user/auth/local/register', () => {
     });
   });
 
-  context('attach to facebook user', () => {
-    let user;
-    let email = 'some@email.net';
-    let username = 'some-username';
-    let password = 'some-password';
-    beforeEach(async () => {
-      user = await generateUser();
-    });
-    it('checks onlySocialAttachLocal', async () => {
-      await expect(user.post('/user/auth/local/register', {
-        email,
-        username,
-        password,
-        confirmPassword: password,
-      })).to.eventually.be.rejected.and.eql({
-        code: 401,
-        error: 'NotAuthorized',
-        message: t('onlySocialAttachLocal'),
-      });
-    });
-    it('succeeds', async () => {
-      await user.update({ 'auth.facebook.id': 'some-fb-id', 'auth.local': { ok: true } });
-      await user.post('/user/auth/local/register', {
-        username,
-        email,
-        password,
-        confirmPassword: password,
-      });
-      await user.sync();
-      expect(user.auth.local.username).to.eql(username);
-      expect(user.auth.local.email).to.eql(email);
-    });
-  });
-
   context('login is already taken', () => {
     let username, email, api;
 
diff --git a/test/api/v4/user/auth/POST-register_local.test.js b/test/api/v4/user/auth/POST-register_local.test.js
index 62df06f307..b75c9b4c55 100644
--- a/test/api/v4/user/auth/POST-register_local.test.js
+++ b/test/api/v4/user/auth/POST-register_local.test.js
@@ -423,40 +423,6 @@ describe('POST /user/auth/local/register', () => {
     });
   });
 
-  context('attach to facebook user', () => {
-    let user;
-    let email = 'some@email.net';
-    let username = 'some-username';
-    let password = 'some-password';
-    beforeEach(async () => {
-      user = await generateUser();
-    });
-    it('checks onlySocialAttachLocal', async () => {
-      await expect(user.post('/user/auth/local/register', {
-        email,
-        username,
-        password,
-        confirmPassword: password,
-      })).to.eventually.be.rejected.and.eql({
-        code: 401,
-        error: 'NotAuthorized',
-        message: t('onlySocialAttachLocal'),
-      });
-    });
-    it('succeeds', async () => {
-      await user.update({ 'auth.facebook.id': 'some-fb-id', 'auth.local': { ok: true } });
-      await user.post('/user/auth/local/register', {
-        username,
-        email,
-        password,
-        confirmPassword: password,
-      });
-      await user.sync();
-      expect(user.auth.local.username).to.eql(username);
-      expect(user.auth.local.email).to.eql(email);
-    });
-  });
-
   context('login is already taken', () => {
     let username, email, api;
 
diff --git a/test/common/ops/buy/buy.js b/test/common/ops/buy/buy.js
index 582166e9a9..8bbf38b496 100644
--- a/test/common/ops/buy/buy.js
+++ b/test/common/ops/buy/buy.js
@@ -13,7 +13,6 @@ import { defaultsDeep } from 'lodash';
 
 describe('shared.ops.buy', () => {
   let user;
-  let analytics = {track () {}};
 
   beforeEach(() => {
     user = generateUser({
@@ -32,12 +31,6 @@ describe('shared.ops.buy', () => {
         },
       },
     });
-
-    sinon.stub(analytics, 'track');
-  });
-
-  afterEach(() => {
-    analytics.track.restore();
   });
 
   it('returns error when key is not provided', (done) => {
@@ -52,10 +45,8 @@ describe('shared.ops.buy', () => {
 
   it('recovers 15 hp', () => {
     user.stats.hp = 30;
-    buy(user, {params: {key: 'potion'}}, analytics);
+    buy(user, {params: {key: 'potion'}});
     expect(user.stats.hp).to.eql(45);
-
-    expect(analytics.track).to.be.calledOnce;
   });
 
   it('adds equipment to inventory', () => {
diff --git a/test/common/ops/buy/buyArmoire.js b/test/common/ops/buy/buyArmoire.js
index 3c58585022..aa4ddd17d5 100644
--- a/test/common/ops/buy/buyArmoire.js
+++ b/test/common/ops/buy/buyArmoire.js
@@ -31,10 +31,9 @@ describe('shared.ops.buyArmoire', () => {
   let YIELD_EQUIPMENT = 0.5;
   let YIELD_FOOD = 0.7;
   let YIELD_EXP = 0.9;
-  let analytics = {track () {}};
 
-  function buyArmoire (_user, _req, _analytics) {
-    const buyOp = new BuyArmoireOperation(_user, _req, _analytics);
+  function buyArmoire (_user, _req) {
+    const buyOp = new BuyArmoireOperation(_user, _req);
 
     return buyOp.purchase();
   }
@@ -52,12 +51,10 @@ describe('shared.ops.buyArmoire', () => {
     user.items.food = {};
 
     sandbox.stub(randomVal, 'trueRandom');
-    sinon.stub(analytics, 'track');
   });
 
   afterEach(() => {
     randomVal.trueRandom.restore();
-    analytics.track.restore();
   });
 
   context('failure conditions', () => {
@@ -150,7 +147,7 @@ describe('shared.ops.buyArmoire', () => {
 
       expect(_.size(user.items.gear.owned)).to.equal(2);
 
-      buyArmoire(user, {}, analytics);
+      buyArmoire(user, {});
 
       expect(_.size(user.items.gear.owned)).to.equal(3);
 
@@ -158,7 +155,6 @@ describe('shared.ops.buyArmoire', () => {
 
       expect(armoireCount).to.eql(_.size(getFullArmoire()) - 2);
       expect(user.stats.gp).to.eql(100);
-      expect(analytics.track).to.be.calledTwice;
     });
   });
 });
diff --git a/test/common/ops/buy/buyGem.js b/test/common/ops/buy/buyGem.js
index fc3d00f708..4ae96a55b7 100644
--- a/test/common/ops/buy/buyGem.js
+++ b/test/common/ops/buy/buyGem.js
@@ -1,6 +1,5 @@
 /* eslint-disable camelcase */
 
-import sinon from 'sinon'; // eslint-disable-line no-shadow
 import {
   generateUser,
 } from '../../../helpers/common.helper';
@@ -11,15 +10,14 @@ import i18n from '../../../../website/common/script/i18n';
 import {BuyGemOperation} from '../../../../website/common/script/ops/buy/buyGem';
 import planGemLimits from '../../../../website/common/script/libs/planGemLimits';
 
-function buyGem (user, req, analytics) {
-  let buyOp = new BuyGemOperation(user, req, analytics);
+function buyGem (user, req) {
+  let buyOp = new BuyGemOperation(user, req);
 
   return buyOp.purchase();
 }
 
 describe('shared.ops.buyGem', () => {
   let user;
-  let analytics = {track () {}};
   let goldPoints = 40;
   let gemsBought = 40;
   let userGemAmount = 10;
@@ -35,23 +33,16 @@ describe('shared.ops.buyGem', () => {
         },
       },
     });
-
-    sinon.stub(analytics, 'track');
-  });
-
-  afterEach(() => {
-    analytics.track.restore();
   });
 
   context('Gems', () => {
     it('purchases gems', () => {
-      let [, message] = buyGem(user, {params: {type: 'gems', key: 'gem'}}, analytics);
+      let [, message] = buyGem(user, {params: {type: 'gems', key: 'gem'}});
 
       expect(message).to.equal(i18n.t('plusGem', {count: 1}));
       expect(user.balance).to.equal(userGemAmount + 0.25);
       expect(user.purchased.plan.gemsBought).to.equal(1);
       expect(user.stats.gp).to.equal(goldPoints - planGemLimits.convRate);
-      expect(analytics.track).to.be.calledOnce;
     });
 
     it('purchases gems with a different language than the default', () => {
diff --git a/test/common/ops/buy/buyHealthPotion.js b/test/common/ops/buy/buyHealthPotion.js
index 9f04c4d6bb..01fcc829d2 100644
--- a/test/common/ops/buy/buyHealthPotion.js
+++ b/test/common/ops/buy/buyHealthPotion.js
@@ -10,10 +10,9 @@ import i18n from '../../../../website/common/script/i18n';
 
 describe('shared.ops.buyHealthPotion', () => {
   let user;
-  let analytics = {track () {}};
 
-  function buyHealthPotion (_user, _req, _analytics) {
-    const buyOp = new BuyHealthPotionOperation(_user, _req, _analytics);
+  function buyHealthPotion (_user, _req) {
+    const buyOp = new BuyHealthPotionOperation(_user, _req);
 
     return buyOp.purchase();
   }
@@ -32,19 +31,13 @@ describe('shared.ops.buyHealthPotion', () => {
       },
       stats: { gp: 200 },
     });
-    sinon.stub(analytics, 'track');
-  });
-
-  afterEach(() => {
-    analytics.track.restore();
   });
 
   context('Potion', () => {
     it('recovers 15 hp', () => {
       user.stats.hp = 30;
-      buyHealthPotion(user, {}, analytics);
+      buyHealthPotion(user, {});
       expect(user.stats.hp).to.eql(45);
-      expect(analytics.track).to.be.calledOnce;
     });
 
     it('does not increase hp above 50', () => {
diff --git a/test/common/ops/buy/buyMarketGear.js b/test/common/ops/buy/buyMarketGear.js
index a732afa4e0..d91b70e921 100644
--- a/test/common/ops/buy/buyMarketGear.js
+++ b/test/common/ops/buy/buyMarketGear.js
@@ -13,15 +13,14 @@ import i18n from '../../../../website/common/script/i18n';
 import errorMessage from '../../../../website/common/script/libs/errorMessage';
 import { defaultsDeep } from 'lodash';
 
-function buyGear (user, req, analytics) {
-  let buyOp = new BuyMarketGearOperation(user, req, analytics);
+function buyGear (user, req) {
+  let buyOp = new BuyMarketGearOperation(user, req);
 
   return buyOp.purchase();
 }
 
 describe('shared.ops.buyMarketGear', () => {
   let user;
-  let analytics = {track () {}};
 
   beforeEach(() => {
     user = generateUser({
@@ -43,20 +42,18 @@ describe('shared.ops.buyMarketGear', () => {
 
     sinon.stub(shared, 'randomVal');
     sinon.stub(shared.fns, 'predictableRandom');
-    sinon.stub(analytics, 'track');
   });
 
   afterEach(() => {
     shared.randomVal.restore();
     shared.fns.predictableRandom.restore();
-    analytics.track.restore();
   });
 
   context('Gear', () => {
     it('adds equipment to inventory', () => {
       user.stats.gp = 31;
 
-      buyGear(user, {params: {key: 'armor_warrior_1'}}, analytics);
+      buyGear(user, {params: {key: 'armor_warrior_1'}});
 
       expect(user.items.gear.owned).to.eql({
         weapon_warrior_0: true,
@@ -83,7 +80,6 @@ describe('shared.ops.buyMarketGear', () => {
         eyewear_special_whiteHalfMoon: true,
         eyewear_special_yellowHalfMoon: true,
       });
-      expect(analytics.track).to.be.calledOnce;
     });
 
     it('deducts gold from user', () => {
diff --git a/test/common/ops/buy/buyMysterySet.js b/test/common/ops/buy/buyMysterySet.js
index dca60d7489..9ef720f70c 100644
--- a/test/common/ops/buy/buyMysterySet.js
+++ b/test/common/ops/buy/buyMysterySet.js
@@ -14,7 +14,6 @@ import errorMessage from '../../../../website/common/script/libs/errorMessage';
 
 describe('shared.ops.buyMysterySet', () => {
   let user;
-  let analytics = {track () {}};
 
   beforeEach(() => {
     user = generateUser({
@@ -26,11 +25,6 @@ describe('shared.ops.buyMysterySet', () => {
         },
       },
     });
-    sinon.stub(analytics, 'track');
-  });
-
-  afterEach(() => {
-    analytics.track.restore();
   });
 
   context('Mystery Sets', () => {
@@ -80,7 +74,7 @@ describe('shared.ops.buyMysterySet', () => {
     context('successful purchases', () => {
       it('buys Steampunk Accessories Set', () => {
         user.purchased.plan.consecutive.trinkets = 1;
-        buyMysterySet(user, {params: {key: '301404'}}, analytics);
+        buyMysterySet(user, {params: {key: '301404'}});
 
         expect(user.purchased.plan.consecutive.trinkets).to.eql(0);
         expect(user.items.gear.owned).to.have.property('weapon_warrior_0', true);
@@ -88,7 +82,6 @@ describe('shared.ops.buyMysterySet', () => {
         expect(user.items.gear.owned).to.have.property('armor_mystery_301404', true);
         expect(user.items.gear.owned).to.have.property('head_mystery_301404', true);
         expect(user.items.gear.owned).to.have.property('eyewear_mystery_301404', true);
-        expect(analytics.track).to.be.called;
       });
     });
   });
diff --git a/test/common/ops/buy/buyQuestGems.js b/test/common/ops/buy/buyQuestGems.js
index 8e98e1b94d..050f74f152 100644
--- a/test/common/ops/buy/buyQuestGems.js
+++ b/test/common/ops/buy/buyQuestGems.js
@@ -11,10 +11,9 @@ import {BuyQuestWithGemOperation} from '../../../../website/common/script/ops/bu
 describe('shared.ops.buyQuestGems', () => {
   let user;
   let goldPoints = 40;
-  let analytics = {track () {}};
 
-  function buyQuest (_user, _req, _analytics) {
-    const buyOp = new BuyQuestWithGemOperation(_user, _req, _analytics);
+  function buyQuest (_user, _req) {
+    const buyOp = new BuyQuestWithGemOperation(_user, _req);
 
     return buyOp.purchase();
   }
@@ -24,12 +23,10 @@ describe('shared.ops.buyQuestGems', () => {
   });
 
   beforeEach(() => {
-    sinon.stub(analytics, 'track');
     sinon.spy(pinnedGearUtils, 'removeItemByPath');
   });
 
   afterEach(() => {
-    analytics.track.restore();
     pinnedGearUtils.removeItemByPath.restore();
   });
 
diff --git a/test/common/ops/buy/buyQuestGold.js b/test/common/ops/buy/buyQuestGold.js
index dec213aa54..a992b496e5 100644
--- a/test/common/ops/buy/buyQuestGold.js
+++ b/test/common/ops/buy/buyQuestGold.js
@@ -12,21 +12,15 @@ import errorMessage from '../../../../website/common/script/libs/errorMessage';
 
 describe('shared.ops.buyQuest', () => {
   let user;
-  let analytics = {track () {}};
 
-  function buyQuest (_user, _req, _analytics) {
-    const buyOp = new BuyQuestWithGoldOperation(_user, _req, _analytics);
+  function buyQuest (_user, _req) {
+    const buyOp = new BuyQuestWithGoldOperation(_user, _req);
 
     return buyOp.purchase();
   }
 
   beforeEach(() => {
     user = generateUser();
-    sinon.stub(analytics, 'track');
-  });
-
-  afterEach(() => {
-    analytics.track.restore();
   });
 
   it('buys a Quest scroll', () => {
@@ -35,12 +29,11 @@ describe('shared.ops.buyQuest', () => {
       params: {
         key: 'dilatoryDistress1',
       },
-    }, analytics);
+    });
     expect(user.items.quests).to.eql({
       dilatoryDistress1: 1,
     });
     expect(user.stats.gp).to.equal(5);
-    expect(analytics.track).to.be.calledOnce;
   });
 
   it('if a user\'s count of a quest scroll is negative, it will be reset to 0 before incrementing when they buy a new one.', () => {
@@ -49,10 +42,9 @@ describe('shared.ops.buyQuest', () => {
     user.items.quests[key] = -1;
     buyQuest(user, {
       params: {key},
-    }, analytics);
+    });
     expect(user.items.quests[key]).to.equal(1);
     expect(user.stats.gp).to.equal(5);
-    expect(analytics.track).to.be.calledOnce;
   });
 
   it('buys a Quest scroll with the right quantity if a string is passed for quantity', () => {
@@ -61,13 +53,13 @@ describe('shared.ops.buyQuest', () => {
       params: {
         key: 'dilatoryDistress1',
       },
-    }, analytics);
+    });
     buyQuest(user, {
       params: {
         key: 'dilatoryDistress1',
       },
       quantity: '3',
-    }, analytics);
+    });
 
     expect(user.items.quests).to.eql({
       dilatoryDistress1: 4,
@@ -82,7 +74,7 @@ describe('shared.ops.buyQuest', () => {
           key: 'dilatoryDistress1',
         },
         quantity: 'a',
-      }, analytics);
+      });
     } catch (err) {
       expect(err).to.be.an.instanceof(BadRequest);
       expect(err.message).to.equal(i18n.t('invalidQuantity'));
diff --git a/test/common/ops/buy/buySpell.js b/test/common/ops/buy/buySpell.js
index 02d0bda6a4..6db2b7b509 100644
--- a/test/common/ops/buy/buySpell.js
+++ b/test/common/ops/buy/buySpell.js
@@ -13,20 +13,14 @@ import errorMessage from '../../../../website/common/script/libs/errorMessage';
 
 describe('shared.ops.buySpecialSpell', () => {
   let user;
-  let analytics = {track () {}};
 
-  function buySpecialSpell (_user, _req, _analytics) {
-    const buyOp = new BuySpellOperation(_user, _req, _analytics);
+  function buySpecialSpell (_user, _req) {
+    const buyOp = new BuySpellOperation(_user, _req);
 
     return buyOp.purchase();
   }
   beforeEach(() => {
     user = generateUser();
-    sinon.stub(analytics, 'track');
-  });
-
-  afterEach(() => {
-    analytics.track.restore();
   });
 
   it('throws an error if params.key is missing', (done) => {
@@ -76,7 +70,7 @@ describe('shared.ops.buySpecialSpell', () => {
       params: {
         key: 'thankyou',
       },
-    }, analytics);
+    });
 
     expect(user.stats.gp).to.equal(1);
     expect(user.items.special.thankyou).to.equal(1);
@@ -87,6 +81,5 @@ describe('shared.ops.buySpecialSpell', () => {
     expect(message).to.equal(i18n.t('messageBought', {
       itemText: item.text(),
     }));
-    expect(analytics.track).to.be.calledOnce;
   });
 });
diff --git a/test/common/ops/buy/hourglassPurchase.js b/test/common/ops/buy/hourglassPurchase.js
index 6f9bf50808..d1c660aeb1 100644
--- a/test/common/ops/buy/hourglassPurchase.js
+++ b/test/common/ops/buy/hourglassPurchase.js
@@ -13,7 +13,6 @@ import {BuyHourglassMountOperation} from '../../../../website/common/script/ops/
 
 describe('common.ops.hourglassPurchase', () => {
   let user;
-  let analytics = {track () {}};
 
   function buyMount (_user, _req, _analytics) {
     const buyOp = new BuyHourglassMountOperation(_user, _req, _analytics);
@@ -23,11 +22,6 @@ describe('common.ops.hourglassPurchase', () => {
 
   beforeEach(() => {
     user = generateUser();
-    sinon.stub(analytics, 'track');
-  });
-
-  afterEach(() => {
-    analytics.track.restore();
   });
 
   context('failure conditions', () => {
@@ -140,12 +134,11 @@ describe('common.ops.hourglassPurchase', () => {
     it('buys a pet', () => {
       user.purchased.plan.consecutive.trinkets = 2;
 
-      let [, message] = hourglassPurchase(user, {params: {type: 'pets', key: 'MantisShrimp-Base'}}, analytics);
+      let [, message] = hourglassPurchase(user, {params: {type: 'pets', key: 'MantisShrimp-Base'}});
 
       expect(message).to.eql(i18n.t('hourglassPurchase'));
       expect(user.purchased.plan.consecutive.trinkets).to.eql(1);
       expect(user.items.pets).to.eql({'MantisShrimp-Base': 5});
-      expect(analytics.track).to.be.calledOnce;
     });
 
     it('buys a mount', () => {
diff --git a/test/common/ops/buy/purchase.js b/test/common/ops/buy/purchase.js
index 5266f46c7b..8de2431340 100644
--- a/test/common/ops/buy/purchase.js
+++ b/test/common/ops/buy/purchase.js
@@ -16,19 +16,16 @@ describe('shared.ops.purchase', () => {
   const SEASONAL_FOOD = 'Meat';
   let user;
   let goldPoints = 40;
-  let analytics = {track () {}};
 
   before(() => {
     user = generateUser({'stats.class': 'rogue'});
   });
 
   beforeEach(() => {
-    sinon.stub(analytics, 'track');
     sinon.spy(pinnedGearUtils, 'removeItemByPath');
   });
 
   afterEach(() => {
-    analytics.track.restore();
     pinnedGearUtils.removeItemByPath.restore();
   });
 
@@ -114,7 +111,7 @@ describe('shared.ops.purchase', () => {
       let key = 'Wolf';
 
       try {
-        purchase(user, {params: {type, key}, quantity: 'jamboree'}, analytics);
+        purchase(user, {params: {type, key}, quantity: 'jamboree'});
       } catch (err) {
         expect(err).to.be.an.instanceof(BadRequest);
         expect(err.message).to.equal(i18n.t('invalidQuantity'));
@@ -128,7 +125,7 @@ describe('shared.ops.purchase', () => {
       user.balance = 10;
 
       try {
-        purchase(user, {params: {type, key}, quantity: -2}, analytics);
+        purchase(user, {params: {type, key}, quantity: -2});
       } catch (err) {
         expect(err).to.be.an.instanceof(BadRequest);
         expect(err.message).to.equal(i18n.t('invalidQuantity'));
@@ -142,7 +139,7 @@ describe('shared.ops.purchase', () => {
       user.balance = 10;
 
       try {
-        purchase(user, {params: {type, key}, quantity: 2.9}, analytics);
+        purchase(user, {params: {type, key}, quantity: 2.9});
       } catch (err) {
         expect(err).to.be.an.instanceof(BadRequest);
         expect(err.message).to.equal(i18n.t('invalidQuantity'));
@@ -170,11 +167,10 @@ describe('shared.ops.purchase', () => {
       let type = 'eggs';
       let key = 'Wolf';
 
-      purchase(user, {params: {type, key}}, analytics);
+      purchase(user, {params: {type, key}});
 
       expect(user.items[type][key]).to.equal(1);
       expect(pinnedGearUtils.removeItemByPath.notCalled).to.equal(true);
-      expect(analytics.track).to.be.calledOnce;
     });
 
     it('purchases hatchingPotions', () => {
diff --git a/webpack/config/index.js b/webpack/config/index.js
index ca098d0a95..4f9bee934f 100644
--- a/webpack/config/index.js
+++ b/webpack/config/index.js
@@ -50,18 +50,6 @@ module.exports = {
         target: DEV_BASE_URL,
         changeOrigin: true,
       },
-      '/stripe': {
-        target: DEV_BASE_URL,
-        changeOrigin: true,
-      },
-      '/amazon': {
-        target: DEV_BASE_URL,
-        changeOrigin: true,
-      },
-      '/paypal': {
-        target: DEV_BASE_URL,
-        changeOrigin: true,
-      },
       '/logout-server': {
         target: DEV_BASE_URL,
         changeOrigin: true,
diff --git a/webpack/config/prod.env.js b/webpack/config/prod.env.js
index 7b89084678..1609e92969 100644
--- a/webpack/config/prod.env.js
+++ b/webpack/config/prod.env.js
@@ -12,23 +12,10 @@ setupNconf(configFile);
 
 // To avoid stringifying more data then we need,
 // items from `env` used on the client will have to be specified in this array
-// @TODO: Do we need? const CLIENT_VARS = ['language', 'isStaticPage', 'availableLanguages', 'translations',
-//                      'FACEBOOK_KEY', 'GOOGLE_CLIENT_ID', 'NODE_ENV', 'BASE_URL', 'GA_ID',
-//                      'AMAZON_PAYMENTS', 'STRIPE_PUB_KEY', 'AMPLITUDE_KEY',
-//                      'worldDmg', 'mods', 'IS_MOBILE'];
-
-const AMAZON_SELLER_ID = nconf.get('AMAZON_PAYMENTS_SELLER_ID');
-const AMAZON_CLIENT_ID = nconf.get('AMAZON_PAYMENTS_CLIENT_ID');
-const AMAZON_MODE = nconf.get('AMAZON_PAYMENTS_MODE');
 
 let env = {
   NODE_ENV: '"production"',
   // clientVars: CLIENT_VARS,
-  AMAZON_PAYMENTS: {
-    SELLER_ID: `"${AMAZON_SELLER_ID}"`,
-    CLIENT_ID: `"${AMAZON_CLIENT_ID}"`,
-    MODE: `"${AMAZON_MODE}"`,
-  },
   EMAILS: {
     COMMUNITY_MANAGER_EMAIL: `"${nconf.get('EMAILS_COMMUNITY_MANAGER_EMAIL')}"`,
     TECH_ASSISTANCE_EMAIL: `"${nconf.get('EMAILS_TECH_ASSISTANCE_EMAIL')}"`,
@@ -36,7 +23,7 @@ let env = {
   },
 };
 
-'NODE_ENV BASE_URL GA_ID STRIPE_PUB_KEY FACEBOOK_KEY GOOGLE_CLIENT_ID AMPLITUDE_KEY LOGGLY_CLIENT_TOKEN'
+'NODE_ENV BASE_URL'
   .split(' ')
   .forEach(key => {
     env[key] = `"${nconf.get(key)}"`;
diff --git a/website/client/app.vue b/website/client/app.vue
index 7a2e7c7397..f48245c494 100644
--- a/website/client/app.vue
+++ b/website/client/app.vue
@@ -10,8 +10,6 @@ div
         p {{currentTip}}
   #app(:class='{"casting-spell": castingSpell}')
     banned-account-modal
-    amazon-payments-modal(v-if='!isStaticPage')
-    payments-success-modal
     sub-cancel-modal-confirm(v-if='isUserLoaded')
     sub-canceled-modal(v-if='isUserLoaded')
     snackbars
@@ -182,15 +180,9 @@ import AppFooter from './components/appFooter';
 import notificationsDisplay from './components/notifications';
 import snackbars from './components/snackbars/notifications';
 import { mapState } from 'client/libs/store';
-import * as Analytics from 'client/libs/analytics';
 import BuyModal from './components/shops/buyModal.vue';
 import SelectMembersModal from 'client/components/selectMembersModal.vue';
 import notifications from 'client/mixins/notifications';
-import { setup as setupPayments } from 'client/libs/payments';
-import amazonPaymentsModal from 'client/components/payments/amazonModal';
-import paymentsSuccessModal from 'client/components/payments/successModal';
-import subCancelModalConfirm from 'client/components/payments/cancelModalConfirm';
-import subCanceledModal from 'client/components/payments/canceledModal';
 
 import spellsMixin from 'client/mixins/spells';
 import { CONSTANTS, getLocalSetting, removeLocalSetting } from 'client/libs/userlocalManager';
@@ -211,11 +203,7 @@ export default {
     snackbars,
     BuyModal,
     SelectMembersModal,
-    amazonPaymentsModal,
     bannedAccountModal,
-    paymentsSuccessModal,
-    subCancelModalConfirm,
-    subCanceledModal,
   },
   data () {
     return {
@@ -410,10 +398,6 @@ export default {
     this.$store.watch(state => state.title, (title) => {
       document.title = title;
     });
-    this.$nextTick(() => {
-      // Load external scripts after the app has been rendered
-      Analytics.load();
-    });
 
     if (this.isUserLoggedIn && !this.isStaticPage) {
       // Load the user and the user tasks
@@ -422,8 +406,6 @@ export default {
         this.$store.dispatch('tasks:fetchUserTasks'),
       ]).then(() => {
         this.$store.state.isUserLoaded = true;
-        Analytics.setUser();
-        Analytics.updateUser();
 
         this.hideLoadingScreen();
 
@@ -439,12 +421,9 @@ export default {
           appState = JSON.parse(appState);
           if (appState.paymentCompleted) {
             removeLocalSetting(CONSTANTS.savedAppStateValues.SAVED_APP_STATE);
-            this.$root.$emit('habitica:payment-success', appState);
           }
         }
         this.$nextTick(() => {
-          // Load external scripts after the app has been rendered
-          setupPayments();
         });
       }).catch((err) => {
         console.error('Impossible to fetch user. Clean up localStorage and refresh.', err); // eslint-disable-line no-console
@@ -493,8 +472,6 @@ export default {
         if (data.fromRoot) return;
         const modalStack = this.$store.state.modalStack;
 
-        this.trackGemPurchase(modalId, data);
-
         // Add new modal to the stack
         const prev = modalStack[modalStack.length - 1];
         const prevId = prev ? prev.modalId : undefined;
@@ -558,18 +535,6 @@ export default {
 
       return true;
     },
-    trackGemPurchase (modalId, data) {
-      // Track opening of gems modal unless it's been already tracked
-      // For example the gems button in the menu already tracks the event by itself
-      if (modalId === 'buy-gems' && data.alreadyTracked !== true) {
-        Analytics.track({
-          hitType: 'event',
-          eventCategory: 'button',
-          eventAction: 'click',
-          eventLabel: 'Gems > Wallet',
-        });
-      }
-    },
     itemSelected (item) {
       this.selectedItemToBuy = item;
     },
@@ -659,4 +624,3 @@ export default {
 <style src="assets/css/sprites/spritesmith-main-25.css"></style>
 <style src="assets/css/sprites/spritesmith-main-26.css"></style>
 <style src="assets/css/sprites.css"></style>
-<style src="smartbanner.js/dist/smartbanner.min.css"></style>
diff --git a/website/client/assets/scss/index.scss b/website/client/assets/scss/index.scss
index 3919ff6efd..185eb917c3 100644
--- a/website/client/assets/scss/index.scss
+++ b/website/client/assets/scss/index.scss
@@ -36,5 +36,4 @@
 @import './animals';
 @import './iconalert';
 @import './tiers';
-@import './payments';
-@import './datepicker.scss';
\ No newline at end of file
+@import './datepicker.scss';
diff --git a/website/client/components/achievements/achievementFooter.vue b/website/client/components/achievements/achievementFooter.vue
index dd899a34b6..9b5328c7cb 100644
--- a/website/client/components/achievements/achievementFooter.vue
+++ b/website/client/components/achievements/achievementFooter.vue
@@ -1,16 +1,5 @@
 <template lang="pug">
 .modal-footer(style='margin-top:0', ng-init='loadWidgets()')
-  .container-fluid.share-buttons
-    .row
-      .col-12.text-center
-        a.twitter-share-button.share-button(:href='twitterLink', target='_blank')
-          .social-icon.twitter.svg-icon(v-html='icons.twitter')
-          | {{ $t('tweet') }}
-        a.fb-share-button.share-button(:href='facebookLink', target='_blank')
-          .social-icon.facebook.svg-icon(v-html='icons.facebook')
-          | {{ $t('share') }}
-        // @TODO: Still want this? .col-4
-          a.tumblr-share-button(:data-href='socialLevelLink', data-notes='none')
 </template>
 
 <style scoped>
@@ -27,53 +16,4 @@
     text-align: center;
     color: #fff;
   }
-
-  .fb-share-button {
-    background-color: #2995cd;
-  }
-
-  .twitter-share-button {
-    margin-right: .5em;
-    background-color: #3bcad7;
-  }
-
-  .social-icon {
-    width: 16px;
-    display: inline-block;
-    vertical-align: bottom;
-    margin-right: .5em;
-  }
-
-  .social-icon.facebook svg {
-    width: 7.5px;
-    margin-bottom: .2em;
-  }
-
-  .social-icon.twitter {
-    margin-bottom: .2em;
-  }
 </style>
-
-<script>
-// @TODO:
-let BASE_URL = 'https://habitica.com';
-import twitter from 'assets/svg/twitter.svg';
-import facebook from 'assets/svg/facebook.svg';
-
-export default {
-  data () {
-    let tweet = this.$t('achievementShare');
-
-    return {
-      icons: Object.freeze({
-        twitter,
-        facebook,
-      }),
-      tweet,
-      achievementLink: `${BASE_URL}`,
-      twitterLink: `https://twitter.com/intent/tweet?text=${tweet}&via=habitica&url=${BASE_URL}&count=none`,
-      facebookLink: `https://www.facebook.com/sharer/sharer.php?text=${tweet}&u=${BASE_URL}`,
-    };
-  },
-};
-</script>
diff --git a/website/client/components/achievements/levelUp.vue b/website/client/components/achievements/levelUp.vue
index 0f815deecf..cd47be7a04 100644
--- a/website/client/components/achievements/levelUp.vue
+++ b/website/client/components/achievements/levelUp.vue
@@ -12,18 +12,6 @@
       // @TODO: Keep this? .checkbox
         input(type='checkbox', v-model='user.preferences.suppressModals.levelUp', @change='changeLevelupSuppress()')
         label(style='display:inline-block') {{ $t('dontShowAgain') }}
-
-    .container-fluid.share-buttons
-      .row
-        .col-12.text-center
-          a.twitter-share-button.share-button(:href='twitterLink', target='_blank')
-            .social-icon.twitter.svg-icon(v-html='icons.twitter')
-            | {{ $t('tweet') }}
-          a.fb-share-button.share-button(:href='facebookLink', target='_blank')
-            .social-icon.facebook.svg-icon(v-html='icons.facebook')
-            | {{ $t('share') }}
-        // @TODO: Still want this? .col-4
-          a.tumblr-share-button(:data-href='socialLevelLink', data-notes='none')
 </template>
 
 <style lang="scss">
@@ -79,31 +67,6 @@
       text-align: center;
       color: #fff;
     }
-
-    .fb-share-button {
-      background-color: #2995cd;
-    }
-
-    .twitter-share-button {
-      margin-right: .5em;
-      background-color: #3bcad7;
-    }
-
-    .social-icon {
-      width: 16px;
-      display: inline-block;
-      vertical-align: bottom;
-      margin-right: .5em;
-    }
-
-    .social-icon.facebook svg {
-      width: 7.5px;
-      margin-bottom: .2em;
-    }
-
-    .social-icon.twitter {
-      margin-bottom: .2em;
-    }
   }
 </style>
 
@@ -118,10 +81,6 @@ import Avatar from '../avatar';
 import { mapState } from 'client/libs/store';
 import {maxHealth} from '../../../common/script/index';
 import styleHelper from 'client/mixins/styleHelper';
-import twitter from 'assets/svg/twitter.svg';
-import facebook from 'assets/svg/facebook.svg';
-
-let BASE_URL = 'https://habitica.com';
 
 export default {
   mixins: [styleHelper],
@@ -129,18 +88,9 @@ export default {
     Avatar,
   },
   data () {
-    let tweet = this.$t('levelUpShare');
     return {
-      icons: Object.freeze({
-        twitter,
-        facebook,
-      }),
       statsAllocationBoxIsOpen: true,
       maxHealth,
-      tweet,
-      socialLevelLink: `${BASE_URL}/social/level-up`,
-      twitterLink: `https://twitter.com/intent/tweet?text=${tweet}&via=habitica&url=${BASE_URL}/social/level-up&count=none`,
-      facebookLink: `https://www.facebook.com/sharer/sharer.php?text=${tweet}&u=${BASE_URL}/social/level-up`,
     };
   },
   mounted () {
diff --git a/website/client/components/achievements/wonChallenge.vue b/website/client/components/achievements/wonChallenge.vue
index de65914ea7..ab38d55467 100644
--- a/website/client/components/achievements/wonChallenge.vue
+++ b/website/client/components/achievements/wonChallenge.vue
@@ -13,13 +13,6 @@
       p {{ $t('congratulations') }}
       br
       button.btn.btn-primary(@click='close()') {{ $t('hurray') }}
-    .modal-footer
-      .col-3
-        a.twitter-share-button(href='https://twitter.com/intent/tweet?text=#{tweet}&via=habitica&url=#{env.BASE_URL}/social/won-challenge&count=none') {{ $t('tweet') }}
-      .col-4(style='margin-left:.8em')
-        .fb-share-button(data-href='#{env.BASE_URL}/social/won-challenge', data-layout='button')
-      .col-4(style='margin-left:.8em')
-        a.tumblr-share-button(data-href='#{env.BASE_URL}/social/won-challenge', data-notes='none')
 </template>
 
 <style scoped>
@@ -51,12 +44,6 @@ export default {
   computed: {
     ...mapState({user: 'user.data'}),
   },
-  data () {
-    let tweet = this.$t('wonChallengeShare');
-    return {
-      tweet,
-    };
-  },
   methods: {
     close () {
       this.$root.$emit('bv::hide::modal', 'won-challenge');
diff --git a/website/client/components/appFooter.vue b/website/client/components/appFooter.vue
index 97bcf9b3da..8478089836 100644
--- a/website/client/components/appFooter.vue
+++ b/website/client/components/appFooter.vue
@@ -4,11 +4,6 @@
   //modify-inventory(v-if="isUserLoaded")
   footer.col-12.expanded
     .row
-      .col-12.col-md-2
-        h3
-          a(href='https://itunes.apple.com/us/app/habitica/id994882113?ls=1&mt=8', target='_blank') {{ $t('mobileIOS') }}
-        h3
-          a(href='https://play.google.com/store/apps/details?id=com.habitrpg.android.habitica', target='_blank') {{ $t('mobileAndroid') }}
       .col-12.col-md-2
         h3 {{ $t('footerCompany') }}
         ul
@@ -41,10 +36,6 @@
             a(href='https://trello.com/c/odmhIqyW/440-read-first-table-of-contents', target='_blank') {{ $t('requestFeature') }}
           li(v-html='$t("communityExtensions")')
           li(v-html='$t("communityForum")')
-          li
-            a(href='https://www.facebook.com/Habitica', target='_blank') {{ $t('communityFacebook') }}
-          li
-            a(href='https://www.instagram.com/habitica', target='_blank') {{ $t('communityInstagram') }}
       .col-12.col-md-6
         .row
           .col-6
@@ -56,15 +47,6 @@
                 a(:href="getDataDisplayToolUrl", target='_blank') {{ $t('dataDisplayTool') }}
               li
                 a(href='http://habitica.fandom.com/wiki/Guidance_for_Blacksmiths', target='_blank') {{ $t('guidanceForBlacksmiths') }}
-          .col-6.social
-            h3 {{ $t('footerSocial') }}
-            .icons
-              a.social-circle(href='https://twitter.com/habitica', target='_blank')
-                .social-icon.svg-icon(v-html='icons.twitter')
-              a.social-circle(href='https://www.instagram.com/habitica/', target='_blank')
-                .social-icon.svg-icon.instagram(v-html='icons.instagram')
-              a.social-circle(href='https://www.facebook.com/Habitica', target='_blank')
-                .social-icon.facebook.svg-icon(v-html='icons.facebook')
         .row
           .col-12.col-md-8 {{ $t('donateText3') }}
           .col-12.col-md-4
@@ -138,51 +120,12 @@
     margin-bottom: .5em;
   }
 
-  .social {
-    h3 {
-      text-align: right;
-    }
-  }
-
   .icons {
     display: flex;
     justify-content: flex-end;
     flex-shrink: 1;
   }
 
-  // smaller than desktop
-  @media only screen and (max-width: 992px) {
-    .social-circle {
-      height: 32px !important;
-      width: 32px !important;
-
-      margin-left: 0.75em !important;
-    }
-  }
-
-  .social-circle {
-    width: 40px;
-    height: 40px;
-    border-radius: 50%;
-    background-color: #c3c0c7;
-    display: flex;
-    margin-left: 1em;
-
-    &:first-child {
-      margin-left: 0;
-    }
-
-    &:hover {
-      background-color: #a5a1ac;
-    }
-
-    .social-icon {
-      color: #e1e0e3;
-      width: 16px;
-      margin: auto;
-    }
-  }
-
   .logo {
     width: 24px;
     height: 24px;
@@ -234,11 +177,6 @@
     margin-top: .1em;
   }
 
-  .facebook svg {
-    width: 10px;
-    margin: 0 auto;
-  }
-
   footer {
     &.expanded {
       padding-left: 6em;
@@ -263,31 +201,22 @@
 import axios from 'axios';
 import moment from 'moment';
 import { mapState } from 'client/libs/store';
-import * as Analytics from 'client/libs/analytics';
 
 import gryphon from 'assets/svg/gryphon.svg';
-import twitter from 'assets/svg/twitter.svg';
-import facebook from 'assets/svg/facebook.svg';
-import instagram from 'assets/svg/instagram.svg';
 import heart from 'assets/svg/heart.svg';
 
 import modifyInventory from './modifyInventory';
-import buyGemsModal from './payments/buyGemsModal';
 
 const IS_PRODUCTION = process.env.NODE_ENV === 'production'; // eslint-disable-line no-process-env
 
 export default {
   components: {
     modifyInventory,
-    buyGemsModal,
   },
   data () {
     return {
       icons: Object.freeze({
         gryphon,
-        twitter,
-        facebook,
-        instagram,
         heart,
       }),
       debugMenuShown: false,
@@ -388,12 +317,6 @@ export default {
       this.$root.$emit('bv::show::modal', 'modify-inventory');
     },
     donate () {
-      Analytics.track({
-        hitType: 'event',
-        eventCategory: 'button',
-        eventAction: 'click',
-        eventLabel: 'Gems > Donate',
-      });
       this.$root.$emit('bv::show::modal', 'buy-gems', {alreadyTracked: true});
     },
   },
diff --git a/website/client/components/auth/registerLoginReset.vue b/website/client/components/auth/registerLoginReset.vue
index 7aa7f795c8..390ff25c3a 100644
--- a/website/client/components/auth/registerLoginReset.vue
+++ b/website/client/components/auth/registerLoginReset.vue
@@ -13,15 +13,6 @@
         .svg-icon.gryphon
       div
         .svg-icon.habitica-logo(v-html="icons.habiticaIcon")
-    .form-group.row.text-center
-      .col-12.col-md-6
-        .btn.btn-secondary.social-button(@click='socialAuth("facebook")')
-          .svg-icon.social-icon(v-html="icons.facebookIcon")
-          .text {{registering ? $t('signUpWithSocial', {social: 'Facebook'}) : $t('loginWithSocial', {social: 'Facebook'})}}
-      .col-12.col-md-6
-        .btn.btn-secondary.social-button(@click='socialAuth("google")')
-          .svg-icon.social-icon(v-html="icons.googleIcon")
-          .text {{registering ? $t('signUpWithSocial', {social: 'Google'}) : $t('loginWithSocial', {social: 'Google'})}}
     .form-group(v-if='registering')
       label(for='usernameInput', v-once) {{$t('username')}}
       input#usernameInput.form-control(type='text', :placeholder='$t("usernamePlaceholder")', v-model='username', :class='{"input-valid": usernameValid, "input-invalid": usernameInvalid}')
@@ -209,26 +200,6 @@
       font-size: 14px;
       color: $white;
     }
-
-    .social-button {
-      width: 100%;
-      height: 100%;
-      white-space: inherit;
-      text-align: center;
-
-      .text {
-        display: inline-block;
-      }
-    }
-
-    .social-icon {
-      margin-right: 1em;
-      width: 18px;
-      height: 18px;
-      display: inline-block;
-      vertical-align: top;
-      margin-top: .2em;
-    }
   }
 
   #top-background {
@@ -293,14 +264,11 @@
 
 <script>
 import axios from 'axios';
-import hello from 'hellojs';
 import debounce from 'lodash/debounce';
 import isEmail from 'validator/lib/isEmail';
 
 import gryphon from 'assets/svg/gryphon.svg';
 import habiticaIcon from 'assets/svg/habitica-logo.svg';
-import facebookSquareIcon from 'assets/svg/facebook-square.svg';
-import googleIcon from 'assets/svg/google.svg';
 
 export default {
   data () {
@@ -320,8 +288,6 @@ export default {
     data.icons = Object.freeze({
       gryphon,
       habiticaIcon,
-      facebookIcon: facebookSquareIcon,
-      googleIcon,
     });
 
     return data;
@@ -364,13 +330,6 @@ export default {
       return !this.passwordConfirmValid;
     },
   },
-  mounted () {
-    hello.init({
-      facebook: process.env.FACEBOOK_KEY, // eslint-disable-line
-      // windows: WINDOWS_CLIENT_ID,
-      google: process.env.GOOGLE_CLIENT_ID, // eslint-disable-line
-    });
-  },
   watch: {
     $route: {
       handler () {
@@ -481,37 +440,6 @@ export default {
       // ALSO it's the only way to make sure language data is reloaded and correct for the logged in user
       window.location.href = redirectTo;
     },
-    // @TODO: Abstract hello in to action or lib
-    async socialAuth (network) {
-      try {
-        await hello(network).logout();
-      } catch (e) {} // eslint-disable-line
-
-      const redirectUrl = `${window.location.protocol}//${window.location.host}`;
-      let auth = await hello(network).login({
-        scope: 'email',
-        // explicitly pass the redirect url or it might redirect to /home
-        redirect_uri: redirectUrl, // eslint-disable-line camelcase
-      });
-
-      await this.$store.dispatch('auth:socialAuth', {
-        auth,
-      });
-
-      let redirectTo;
-
-      if (this.$route.query.redirectTo) {
-        redirectTo = this.$route.query.redirectTo;
-      } else {
-        redirectTo = '/';
-      }
-
-      // @TODO do not reload entire page
-      // problem is that app.vue created hook should be called again
-      // after user is logged in / just signed up
-      // ALSO it's the only way to make sure language data is reloaded and correct for the logged in user
-      window.location.href = redirectTo;
-    },
     handleSubmit () {
       if (this.registering) {
         this.register();
diff --git a/website/client/components/challenges/challengeModal.vue b/website/client/components/challenges/challengeModal.vue
index 103d9e4ca8..fdf5e83da0 100644
--- a/website/client/components/challenges/challengeModal.vue
+++ b/website/client/components/challenges/challengeModal.vue
@@ -54,8 +54,6 @@
       .row.footer-wrap
         .col-12.text-center.submit-button-wrapper
           .alert.alert-warning(v-if='insufficientGemsForTavernChallenge') You do not have enough gems to create a Tavern challenge
-          // @TODO if buy gems button is added, add analytics tracking to it
-          // see https://github.com/HabitRPG/habitica/blob/develop/website/views/options/social/challenges.jade#L134
           button.btn.btn-primary(v-if='creating && !cloning', @click='createChallenge()', :disabled='loading') {{$t('createChallengeAddTasks')}}
           button.btn.btn-primary(v-once, v-if='cloning', @click='createChallenge()', :disabled='loading') {{$t('createChallengeCloneTasks')}}
           button.btn.btn-primary(v-once, v-if='!creating && !cloning', @click='updateChallenge()') {{$t('updateChallenge')}}
diff --git a/website/client/components/groups/createPartyModal.vue b/website/client/components/groups/createPartyModal.vue
index 6e0ea2956a..21a5a75ef4 100644
--- a/website/client/components/groups/createPartyModal.vue
+++ b/website/client/components/groups/createPartyModal.vue
@@ -141,7 +141,6 @@ b-modal#create-party-modal(size='lg', hide-footer=true)
 
 <script>
   import { mapState } from 'client/libs/store';
-  import * as Analytics from 'client/libs/analytics';
   import notifications from 'client/mixins/notifications';
 
   import copyIcon from 'assets/svg/copy.svg';
@@ -167,11 +166,6 @@ b-modal#create-party-modal(size='lg', hide-footer=true)
         this.$store.state.party.data = party;
         this.user.party._id = party._id;
 
-        Analytics.updateUser({
-          partyID: party._id,
-          partySize: 1,
-        });
-
         this.$root.$emit('bv::hide::modal', 'create-party-modal');
         this.$router.push('/party');
       },
diff --git a/website/client/components/groups/group.vue b/website/client/components/groups/group.vue
index 9416b5f3cd..2695b6fac5 100644
--- a/website/client/components/groups/group.vue
+++ b/website/client/components/groups/group.vue
@@ -262,7 +262,6 @@ import extend from 'lodash/extend';
 import groupUtilities from 'client/mixins/groupsUtilities';
 import styleHelper from 'client/mixins/styleHelper';
 import { mapState } from 'client/libs/store';
-import * as Analytics from 'client/libs/analytics';
 import membersModal from './membersModal';
 import startQuestModal from './startQuestModal';
 import questDetailsModal from './questDetailsModal';
@@ -484,13 +483,6 @@ export default {
       await this.$store.dispatch('guilds:join', {groupId: this.group._id, type: 'guild'});
     },
     clickLeave () {
-      Analytics.track({
-        hitType: 'event',
-        eventCategory: 'button',
-        eventAction: 'click',
-        eventLabel: 'Leave Party',
-      });
-
       // @TODO: Get challenges and ask to keep or remove
       if (!confirm('Are you sure you want to leave?')) return;
       let keep = true;
@@ -507,7 +499,6 @@ export default {
 
       if (this.isParty) {
         data.type = 'party';
-        Analytics.updateUser({partySize: null, partyID: null});
         this.$store.state.partyMembers = [];
       }
 
diff --git a/website/client/components/groups/groupPlan.vue b/website/client/components/groups/groupPlan.vue
index 8d30345589..2561b2946b 100644
--- a/website/client/components/groups/groupPlan.vue
+++ b/website/client/components/groups/groupPlan.vue
@@ -46,13 +46,6 @@ div
               .number 3
               .name Each Individual Group Member
 
-          .box.payment-providers
-            h3 Choose your payment method
-            .payments-column
-              button.purchase.btn.btn-primary.payment-button.payment-item(@click='pay(PAYMENTS.STRIPE)') 
-                .svg-icon.credit-card-icon(v-html="icons.creditCardIcon")
-                | {{ $t('card') }}
-              amazon-button.payment-item(:amazon-data="pay(PAYMENTS.AMAZON)")
     .container.col-6.offset-3.create-option(v-if='!upgradingGroup._id')
       .row
         h1.col-12.text-center.purple-header Create your Group today!
@@ -95,14 +88,6 @@ div
         button.btn.btn-secondary.form-control(@click='createGroup()', :value="$t('createGroupPlan')")
       .form-group
         button.btn.btn-primary.btn-lg.btn-block(@click="createGroup()", :disabled="!newGroupIsReady") {{ $t('createGroupPlan') }}
-    .col-12(v-if='activePage === PAGES.PAY')
-      .text-center
-        h3 Choose your payment method
-        .payments-column.mx-auto
-          button.purchase.btn.btn-primary.payment-button.payment-item(@click='pay(PAYMENTS.STRIPE)') 
-            .svg-icon.credit-card-icon(v-html="icons.creditCardIcon")
-            | {{ $t('card') }}
-          amazon-button.payment-item(:amazon-data="pay(PAYMENTS.AMAZON)")
 </template>
 
 <style lang="scss" scoped>
@@ -290,22 +275,13 @@ div
 </style>
 
 <script>
-import paymentsMixin from '../../mixins/payments';
 import { mapState } from 'client/libs/store';
 import positiveIcon from 'assets/svg/positive.svg';
-import creditCardIcon from 'assets/svg/credit-card-icon.svg';
-import amazonButton from 'client/components/payments/amazonButton';
 
 export default {
-  mixins: [paymentsMixin],
-  components: {
-    amazonButton,
-  },
   data () {
     return {
-      amazonPayments: {},
       icons: Object.freeze({
-        creditCardIcon,
         positiveIcon,
       }),
       PAGES: {
@@ -313,10 +289,6 @@ export default {
         UPGRADE_GROUP: 'upgrade-group',
         PAY: 'pay',
       },
-      PAYMENTS: {
-        AMAZON: 'amazon',
-        STRIPE: 'stripe',
-      },
       paymentMethod: '',
       newGroup: {
         type: 'guild',
@@ -368,14 +340,6 @@ export default {
       } else {
         paymentData.groupToCreate = this.newGroup;
       }
-
-      this.paymentMethod = paymentMethod;
-      if (this.paymentMethod === this.PAYMENTS.STRIPE) {
-        this.showStripe(paymentData);
-      } else if (this.paymentMethod === this.PAYMENTS.AMAZON) {
-        paymentData.type = 'subscription';
-        return paymentData;
-      }
     },
   },
 };
diff --git a/website/client/components/groups/questDetailsModal.vue b/website/client/components/groups/questDetailsModal.vue
index e025221025..4173eeda74 100644
--- a/website/client/components/groups/questDetailsModal.vue
+++ b/website/client/components/groups/questDetailsModal.vue
@@ -140,8 +140,6 @@ import quests from 'common/script/content/quests';
 import copyIcon from 'assets/svg/copy.svg';
 import greyBadgeIcon from 'assets/svg/grey-badge.svg';
 import qrCodeIcon from 'assets/svg/qrCode.svg';
-import facebookIcon from 'assets/svg/facebook.svg';
-import twitterIcon from 'assets/svg/twitter.svg';
 import starIcon from 'assets/svg/star.svg';
 import goldIcon from 'assets/svg/gold.svg';
 import difficultyStarIcon from 'assets/svg/difficulty-star.svg';
@@ -162,8 +160,6 @@ export default {
         copy: copyIcon,
         greyBadge: greyBadgeIcon,
         qrCode: qrCodeIcon,
-        facebook: facebookIcon,
-        twitter: twitterIcon,
         starIcon,
         goldIcon,
         difficultyStarIcon,
diff --git a/website/client/components/groups/startQuestModal.vue b/website/client/components/groups/startQuestModal.vue
index 9d13f2d0b3..97d18ff8f6 100644
--- a/website/client/components/groups/startQuestModal.vue
+++ b/website/client/components/groups/startQuestModal.vue
@@ -106,15 +106,12 @@
 
 <script>
 import { mapState } from 'client/libs/store';
-import * as Analytics from 'client/libs/analytics';
 
 import quests from 'common/script/content/quests';
 
 import copyIcon from 'assets/svg/copy.svg';
 import greyBadgeIcon from 'assets/svg/grey-badge.svg';
 import qrCodeIcon from 'assets/svg/qrCode.svg';
-import facebookIcon from 'assets/svg/facebook.svg';
-import twitterIcon from 'assets/svg/twitter.svg';
 import starIcon from 'assets/svg/star.svg';
 import goldIcon from 'assets/svg/gold.svg';
 import difficultyStarIcon from 'assets/svg/difficulty-star.svg';
@@ -137,8 +134,6 @@ export default {
         copy: copyIcon,
         greyBadge: greyBadgeIcon,
         qrCode: qrCodeIcon,
-        facebook: facebookIcon,
-        twitter: twitterIcon,
         starIcon,
         goldIcon,
         difficultyStarIcon,
@@ -174,11 +169,6 @@ export default {
     async questInit () {
       this.loading = true;
 
-      Analytics.updateUser({
-        partyID: this.group._id,
-        partySize: this.group.memberCount,
-      });
-
       let groupId = this.group._id || this.user.party._id;
 
       const key = this.selectedQuest;
diff --git a/website/client/components/header/menu.vue b/website/client/components/header/menu.vue
index a6c2e33a72..fcb6aba088 100644
--- a/website/client/components/header/menu.vue
+++ b/website/client/components/header/menu.vue
@@ -4,7 +4,6 @@ div
   creator-intro
   profileModal
   report-flag-modal
-  send-gems-modal
   b-navbar.topbar.navbar-inverse.static-top(toggleable="lg", type="dark", :class="navbarZIndexClass")
     b-navbar-brand.brand(aria-label="Habitica")
       .logo.svg-icon.d-none.d-xl-block(v-html="icons.logo")
@@ -393,7 +392,6 @@ div
 
 <script>
 import { mapState, mapGetters } from 'client/libs/store';
-import * as Analytics from 'client/libs/analytics';
 import { goToModForm } from 'client/libs/modform';
 
 import gemIcon from 'assets/svg/gem.svg';
@@ -408,7 +406,6 @@ import InboxModal from '../userMenu/inbox.vue';
 import notificationMenu from './notificationsDropdown';
 import profileModal from '../userMenu/profileModal';
 import reportFlagModal from '../chat/reportFlagModal';
-import sendGemsModal from 'client/components/payments/sendGemsModal';
 import sync from 'client/mixins/sync';
 import userDropdown from './userDropdown';
 
@@ -420,7 +417,6 @@ export default {
     notificationMenu,
     profileModal,
     reportFlagModal,
-    sendGemsModal,
     userDropdown,
   },
   mixins: [sync],
@@ -480,14 +476,6 @@ export default {
     },
     showBuyGemsModal (startingPage) {
       this.$store.state.gemModalOptions.startingPage = startingPage;
-
-      Analytics.track({
-        hitType: 'event',
-        eventCategory: 'button',
-        eventAction: 'click',
-        eventLabel: 'Gems > Toolbar',
-      });
-
       this.$root.$emit('bv::show::modal', 'buy-gems', {alreadyTracked: true});
     },
     dropdownDesktop (hover) {
diff --git a/website/client/components/header/userDropdown.vue b/website/client/components/header/userDropdown.vue
index 6fe67f63f9..72019f8ddf 100644
--- a/website/client/components/header/userDropdown.vue
+++ b/website/client/components/header/userDropdown.vue
@@ -67,7 +67,6 @@ menu-dropdown.item-user(:right="true")
 
 <script>
 import { mapState } from 'client/libs/store';
-import * as Analytics from 'client/libs/analytics';
 import userIcon from 'assets/svg/user.svg';
 import MenuDropdown from '../ui/customMenuDropdown';
 import axios from 'axios';
@@ -106,14 +105,6 @@ export default {
     },
     showBuyGemsModal (startingPage) {
       this.$store.state.gemModalOptions.startingPage = startingPage;
-
-      Analytics.track({
-        hitType: 'event',
-        eventCategory: 'button',
-        eventAction: 'click',
-        eventLabel: 'Gems > User Dropdown',
-      });
-
       this.$root.$emit('bv::show::modal', 'buy-gems', {alreadyTracked: true});
     },
     logout () {
diff --git a/website/client/components/settings/deleteModal.vue b/website/client/components/settings/deleteModal.vue
index 34838b0504..a74c52e6ee 100644
--- a/website/client/components/settings/deleteModal.vue
+++ b/website/client/components/settings/deleteModal.vue
@@ -3,7 +3,6 @@
     .modal-body
       br
       strong(v-if='user.auth.local.email') {{ $t('deleteLocalAccountText') }}
-      strong(v-if='!user.auth.local.email') {{ $t('deleteSocialAccountText', {magicWord: 'DELETE'}) }}
       .row.mt-3
         .col-6
           input.form-control(type='password', v-model='password')
diff --git a/website/client/components/settings/notifications.vue b/website/client/components/settings/notifications.vue
index dfc6dfb964..bfb5996089 100644
--- a/website/client/components/settings/notifications.vue
+++ b/website/client/components/settings/notifications.vue
@@ -3,14 +3,6 @@
   .col-12
     h1 {{ $t('notifications') }}
   .col-12
-    .checkbox
-      label
-        input(type='checkbox', v-model='user.preferences.pushNotifications.unsubscribeFromAll',
-        @change='set("pushNotifications", "unsubscribeFromAll")')
-        span {{ $t('unsubscribeAllPush') }}
-
-    br
-
     .checkbox
       label
         input(type='checkbox', v-model='user.preferences.emailNotifications.unsubscribeFromAll',
@@ -24,17 +16,12 @@
       td
       th
         span {{ $t('email') }}
-      th
-        span {{ $t('push') }}
     tr(v-for='notification in notificationsIds')
       td
         span {{ $t(notification) }}
       td
         input(type='checkbox', v-model='user.preferences.emailNotifications[notification]',
           @change='set("emailNotifications", notification)')
-      td(v-if="onlyEmailsIds.indexOf(notification) === -1")
-        input(type='checkbox', v-model='user.preferences.pushNotifications[notification]',
-          @change='set("pushNotifications", notification)')
         hr
 </template>
 
diff --git a/website/client/components/settings/site.vue b/website/client/components/settings/site.vue
index 4f6d75d1f8..0fefae00d2 100644
--- a/website/client/components/settings/site.vue
+++ b/website/client/components/settings/site.vue
@@ -111,12 +111,6 @@
       h2 {{ $t('registration') }}
       .panel-body
         div
-          ul.list-inline
-            li(v-for='network in SOCIAL_AUTH_NETWORKS')
-              button.btn.btn-primary.mb-2(v-if='!user.auth[network.key].id', @click='socialAuth(network.key, user)') {{ $t('registerWithSocial', {network: network.name}) }}
-              button.btn.btn-primary.mb-2(disabled='disabled', v-if='!hasBackupAuthOption(network.key) && user.auth[network.key].id') {{ $t('registeredWithSocial', {network: network.name}) }}
-              button.btn.btn-danger(@click='deleteSocialAuth(network)', v-if='hasBackupAuthOption(network.key) && user.auth[network.key].id') {{ $t('detachSocial', {network: network.name}) }}
-          hr
           div(v-if='!user.auth.local.email')
             p {{ $t('addLocalAuth') }}
             .form(name='localAuth', novalidate)
@@ -206,7 +200,6 @@
 </style>
 
 <script>
-import hello from 'hellojs';
 import moment from 'moment';
 import axios from 'axios';
 import { mapState } from 'client/libs/store';
@@ -214,7 +207,6 @@ import debounce from 'lodash/debounce';
 import restoreModal from './restoreModal';
 import resetModal from './resetModal';
 import deleteModal from './deleteModal';
-import { SUPPORTED_SOCIAL_NETWORKS } from '../../../common/script/constants';
 import changeClass from  '../../../common/script/ops/changeClass';
 import notificationsMixin from '../../mixins/notifications';
 import sounds from '../../libs/sounds';
@@ -241,7 +233,6 @@ export default {
     }
 
     return {
-      SOCIAL_AUTH_NETWORKS: [],
       party: {},
       // Made available by the server as a script
       availableFormats: ['MM/dd/yyyy', 'dd/MM/yyyy', 'yyyy/MM/dd'],
@@ -262,7 +253,6 @@ export default {
     };
   },
   mounted () {
-    this.SOCIAL_AUTH_NETWORKS = SUPPORTED_SOCIAL_NETWORKS;
     // @TODO: We may need to request the party here
     this.party = this.$store.state.party;
     this.newDayStart = this.user.preferences.dayStart;
@@ -271,12 +261,6 @@ export default {
     this.emailUpdates.newEmail = this.user.auth.local.email || null;
     this.localAuth.username = this.user.auth.local.username || null;
     this.soundIndex = 0;
-    hello.init({
-      facebook: process.env.FACEBOOK_KEY, // eslint-disable-line no-process-env
-      google: process.env.GOOGLE_CLIENT_ID, // eslint-disable-line no-process-env
-    }, {
-      redirect_uri: '', // eslint-disable-line
-    });
 
     const focusID = this.$route.query.focus;
     if (focusID !== undefined && focusID !== null) {
@@ -415,19 +399,6 @@ export default {
     showBailey () {
       this.$root.$emit('bv::show::modal', 'new-stuff');
     },
-    hasBackupAuthOption (networkKeyToCheck) {
-      if (this.user.auth.local.username) {
-        return true;
-      }
-
-      return find(this.SOCIAL_AUTH_NETWORKS, (network) => {
-        if (network.key !== networkKeyToCheck) {
-          if (this.user.auth.hasOwnProperty(network.key)) {
-            return this.user.auth[network.key].id;
-          }
-        }
-      });
-    },
     calculateNextCron () {
       let nextCron = moment().hours(this.newDayStart).minutes(0).seconds(0).milliseconds(0);
 
@@ -484,19 +455,6 @@ export default {
     openDeleteModal () {
       this.$root.$emit('bv::show::modal', 'delete');
     },
-    async deleteSocialAuth (network) {
-      await axios.delete(`/api/v4/user/auth/social/${network.key}`);
-      this.text(this.$t('detachedSocial', {network: network.name}));
-    },
-    async socialAuth (network) {
-      let auth = await hello(network).login({scope: 'email'});
-
-      await this.$store.dispatch('auth:socialAuth', {
-        auth,
-      });
-
-      window.location.href = '/';
-    },
     async changeClassForUser (confirmationNeeded) {
       if (confirmationNeeded && !confirm(this.$t('changeClassConfirmCost'))) return;
       try {
diff --git a/website/client/components/settings/subscription.vue b/website/client/components/settings/subscription.vue
index 80023627c8..eea2bc36ad 100644
--- a/website/client/components/settings/subscription.vue
+++ b/website/client/components/settings/subscription.vue
@@ -36,9 +36,6 @@
             h4 {{ $t('subscribed') }}
             p(v-if='hasPlan && !hasGroupPlan') {{ $t('purchasedPlanId', purchasedPlanIdInfo) }}
             p(v-if='hasGroupPlan') {{ $t('youHaveGroupPlan') }}
-          tr(v-if='user.purchased.plan.extraMonths'): td
-            span.glyphicon.glyphicon-credit-card
-            | &nbsp; {{ $t('purchasedPlanExtraMonths', purchasedPlanExtraMonthsDetails) }}
           tr(v-if='hasConsecutiveSubscription'): td
             span.glyphicon.glyphicon-forward
             | &nbsp; {{ $t('consecutiveSubscription') }}
@@ -67,21 +64,9 @@
               button.btn.btn-primary(type='button', @click='applyCoupon(subscription.coupon)') {{ $t("apply") }}
 
         div(v-if='hasSubscription')
-          .btn.btn-primary(v-if='canEditCardDetails', @click='showStripeEdit()') {{ $t('subUpdateCard') }}
           .btn.btn-sm.btn-danger(v-if='canCancelSubscription && !loading', @click='cancelSubscriptionConfirm()') {{ $t('cancelSub') }}
           small(v-if='!canCancelSubscription && !hasCanceledSubscription', v-html='getCancelSubInfo()')
 
-        .subscribe-pay(v-if='!hasSubscription || hasCanceledSubscription')
-          h3 {{ $t('subscribeUsing') }}
-          .payments-column
-            button.purchase.btn.btn-primary.payment-button.payment-item(@click='showStripe({subscription:subscription.key, coupon:subscription.coupon})', :disabled='!subscription.key') 
-              .svg-icon.credit-card-icon(v-html="icons.creditCardIcon")
-              | {{ $t('card') }}
-            button.btn.payment-item.paypal-checkout.payment-button(@click="openPaypal(paypalPurchaseLink, 'subscription')", :disabled='!subscription.key')
-              | &nbsp;
-              img(src='~assets/images/paypal-checkout.png', :alt="$t('paypal')")
-              | &nbsp;
-            amazon-button.payment-item(:amazon-data="{type: 'subscription', subscription: this.subscription.key, coupon: this.subscription.coupon}")
     .row
       .col-6
         h2(v-once) {{ $t('giftSubscription') }}
@@ -111,17 +96,10 @@ import { mapState } from 'client/libs/store';
 
 import subscriptionBlocks from '../../../common/script/content/subscriptionBlocks';
 import planGemLimits from '../../../common/script/libs/planGemLimits';
-import paymentsMixin from '../../mixins/payments';
 import notificationsMixin from '../../mixins/notifications';
 
-import amazonButton from 'client/components/payments/amazonButton';
-import creditCardIcon from 'assets/svg/credit-card-icon.svg';
-
 export default {
-  mixins: [paymentsMixin, notificationsMixin],
-  components: {
-    amazonButton,
-  },
+  mixins: [notificationsMixin],
   data () {
     return {
       loading: false,
@@ -132,19 +110,9 @@ export default {
       subscription: {
         key: 'basic_earned',
       },
-      // @TODO: Remove the need for this or move it to mixin
-      amazonPayments: {},
       paymentMethods: {
-        AMAZON_PAYMENTS: 'Amazon Payments',
-        STRIPE: 'Stripe',
-        GOOGLE: 'Google',
-        APPLE: 'Apple',
-        PAYPAL: 'Paypal',
         GIFT: 'Gift',
       },
-      icons: Object.freeze({
-        creditCardIcon,
-      }),
     };
   },
   computed: {
@@ -179,10 +147,7 @@ export default {
       return subscriptionBlocks;
     },
     canEditCardDetails () {
-      return Boolean(
-        !this.hasCanceledSubscription &&
-        this.user.purchased.plan.paymentMethod === this.paymentMethods.STRIPE
-      );
+      return Boolean(!this.hasCanceledSubscription);
     },
     hasSubscription () {
       return Boolean(this.user.purchased.plan.customerId);
@@ -236,8 +201,6 @@ export default {
     },
     canCancelSubscription () {
       return (
-        this.user.purchased.plan.paymentMethod !== this.paymentMethods.GOOGLE &&
-        this.user.purchased.plan.paymentMethod !== this.paymentMethods.APPLE &&
         !this.hasCanceledSubscription &&
         !this.hasGroupPlan
       );
@@ -245,12 +208,7 @@ export default {
   },
   methods: {
     async applyCoupon (coupon) {
-      const response = await axios.post(`/api/v4/coupons/validate/${coupon}`);
-
-      if (!response.data.data.valid) return;
-
-      this.text('Coupon applied!');
-      this.subscription.key = 'google_6mo';
+      await axios.post(`/api/v4/coupons/validate/${coupon}`);
     },
     getCancelSubInfo () {
       let payMethod = this.user.purchased.plan.paymentMethod || '';
diff --git a/website/client/components/shops/buyModal.vue b/website/client/components/shops/buyModal.vue
index a54b33deab..2a230e04b3 100644
--- a/website/client/components/shops/buyModal.vue
+++ b/website/client/components/shops/buyModal.vue
@@ -274,7 +274,6 @@
 </style>
 
 <script>
-  import * as Analytics from 'client/libs/analytics';
   import spellsMixin from 'client/mixins/spells';
   import planGemLimits from 'common/script/libs/planGemLimits';
   import numberInvalid from 'client/mixins/numberInvalid';
@@ -444,14 +443,6 @@
         }
       },
       purchaseGems () {
-        if (this.item.key === 'rebirth_orb') {
-          Analytics.track({
-            hitType: 'event',
-            eventCategory: 'button',
-            eventAction: 'click',
-            eventLabel: 'Gems > Rebirth',
-          });
-        }
         this.$root.$emit('bv::show::modal', 'buy-gems');
       },
       togglePinned () {
diff --git a/website/client/components/static/app.vue b/website/client/components/static/app.vue
index cfcf1fa02a..4dd4105b54 100644
--- a/website/client/components/static/app.vue
+++ b/website/client/components/static/app.vue
@@ -1,11 +1,3 @@
 <template lang="pug">
   .container-fluid.text-center
-    .row
-      .col-md-6.offset-3
-        h1 {{ $t('checkOutMobileApps') }}
-        .promo_habitica(style='border-radius:25px;margin:auto;margin-bottom:30px')
-
-        a(href='https://play.google.com/store/apps/details?id=com.habitrpg.android.habitica&utm_source=global_co&utm_medium=prtnr&utm_content=Mar2515&utm_campaign=PartBadge&pcampaignid=MKT-AC-global-none-all-co-pr-py-PartBadges-Oct1515-1&utm_source=global_co&utm_medium=prtnr&utm_content=Mar2515&utm_campaign=PartBadge&pcampaignid=MKT-AC-global-none-all-co-pr-py-PartBadges-Oct1515-1')
-          img(alt='Get it on Google Play', src='https://play.google.com/intl/en_us/badges/images/apps/en-play-badge.png', style='width:139px;height:45px;image-rendering:auto;vertical-align:top')
-        a(href='https://geo.itunes.apple.com/us/app/habitica/id994882113?mt=8', style='display:inline-block;overflow:hidden;background:url(http://linkmaker.itunes.apple.com/images/badges/en-us/badge_appstore-lrg.svg#svgView) no-repeat;background-size:100%;width:152px;height:45px;margin-left:20px;image-rendering:auto')
 </template>
diff --git a/website/client/components/static/header.vue b/website/client/components/static/header.vue
index 9d17a17fb0..4f148b29c5 100644
--- a/website/client/components/static/header.vue
+++ b/website/client/components/static/header.vue
@@ -21,8 +21,6 @@
       ul.navbar-nav.mr-auto(v-else)
         router-link.nav-item(tag='li', to='/register')
           a.nav-link(v-once) {{ $t('getStarted') }}
-        li.nav-item
-          a.nav-link(@click='scrollToMobileApp') {{ $t('mobileApps') }}
         li.nav-item.dropdown
           a.nav-link.dropdown-toggle(v-once) {{ $t('learnMore') }}
           .dropdown-menu
@@ -158,7 +156,6 @@
 <script>
 import logo from 'assets/svg/logo.svg';
 import purpleLogo from 'assets/svg/purple-logo.svg';
-import * as Analytics from 'client/libs/analytics';
 
 export default {
   data () {
@@ -181,21 +178,8 @@ export default {
         return;
       }
 
-      // @TODO duplicate of code in home.vue
-      Analytics.track({
-        hitType: 'event',
-        eventCategory: 'button',
-        eventAction: 'click',
-        eventLabel: 'Play',
-      });
-
       this.$router.push('/register');
     },
-    scrollToMobileApp () {
-      document.querySelector('#level-up-anywhere').scrollIntoView({
-        behavior: 'smooth',
-      });
-    },
   },
 };
 </script>
diff --git a/website/client/components/static/home.vue b/website/client/components/static/home.vue
index a6acf92a55..0180180773 100644
--- a/website/client/components/static/home.vue
+++ b/website/client/components/static/home.vue
@@ -13,15 +13,6 @@
             p.section-main {{$t('timeToGetThingsDone', {userCountInMillions})}}
           .col-12.col-md-6.col-lg-6
             h3.text-center {{$t('singUpForFree')}}
-            div.text-center
-              button.social-button(@click='socialAuth("facebook")')
-                .svg-icon.social-icon(v-html="icons.facebookIcon")
-                span {{$t('signUpWithSocial', {social: 'Facebook'})}}
-              button.social-button(@click='socialAuth("google")')
-                .svg-icon.social-icon(v-html="icons.googleIcon")
-                span {{$t('signUpWithSocial', {social: 'Google'})}}
-            .strike
-              span {{$t('or')}}
             .form(@keyup.enter="register()")
               p.form-text {{$t('usernameLimitations')}}
               input#usernameInput.form-control(type='text', :placeholder='$t("username")', v-model='username', :class='{"input-valid": usernameValid, "input-invalid": usernameInvalid}')
@@ -81,19 +72,6 @@
       .container-fluid
         .pixel-horizontal-2.svg-icon(v-html='icons.pixelHorizontal2')
 
-    #level-up-anywhere.purple-3
-      .container
-        .row
-          .col-12.col-md-6.col-lg-6
-            .iphones
-          .col-12.col-md-6.col-lg-6.text-column
-            h2 {{ $t('levelUpAnywhere') }}
-            p {{ $t('levelUpAnywhereDesc') }}
-            a.app.svg-icon(v-html='icons.googlePlay', href='https://play.google.com/store/apps/details?id=com.habitrpg.android.habitica', target='_blank')
-            a.app.svg-icon(v-html='icons.iosAppStore', href='https://itunes.apple.com/us/app/habitica-gamified-task-manager/id994882113?mt=8', target='_blank')
-      .container-fluid
-        .pixel-horizontal-3.svg-icon(v-html='icons.pixelHorizontal3')
-
     #call-to-action.purple-4
       .container.featured
         .row.text-center
@@ -126,7 +104,7 @@
 <style lang="scss" scoped>
 @import '~client/assets/scss/colors.scss';
 
-@import url('https://fonts.googleapis.com/css?family=Varela+Round');
+@import url('/static/fonts/home-fonts.css');
 
   #front {
     .form-text a {
@@ -220,37 +198,6 @@
       font-size: 24px;
     }
 
-    .social-button {
-      border-radius: 2px;
-      border: solid 2px #bda8ff;
-      width: 48%;
-      min-height: 40px;
-      padding: .5em;
-      background: transparent;
-      margin-right: .5em;
-      color: #bda8ff;
-      transition: .5s;
-
-      span {
-        transition: none;
-      }
-    }
-
-    .social-button:hover {
-      cursor: pointer;
-      border-color: #fff;
-      color: #fff;
-    }
-
-    .social-icon {
-      margin-right: 1em;
-      width: 18px;
-      height: 18px;
-      display: inline-block;
-      vertical-align: top;
-      margin-top: .2em;
-    }
-
     .strike {
       display: block;
       text-align: center;
@@ -393,31 +340,6 @@
     }
   }
 
-  #level-up-anywhere {
-    .app {
-      display: inline-block;
-      width: 135px;
-      margin-right: .5em;
-    }
-
-    .app {
-      cursor: pointer;
-    }
-
-    .iphones {
-      width: 436px;
-      height: 520px;
-      max-width: 100%;
-      background-repeat: no-repeat;
-      background-size: 100%;
-      background-image: url('~assets/images/home/mobile-preview@3x.png');
-    }
-
-    .text-column {
-      padding-top: 9em;
-    }
-  }
-
   #call-to-action {
     .row {
       margin-top: 1em;
@@ -558,18 +480,11 @@
 </style>
 
 <script>
-  import hello from 'hellojs';
   import debounce from 'lodash/debounce';
   import isEmail from 'validator/lib/isEmail';
-  import googlePlay from 'assets/images/home/google-play-badge.svg';
-  import iosAppStore from 'assets/images/home/ios-app-store.svg';
-  import iphones from 'assets/images/home/iphones.svg';
   import spacer from 'assets/images/home/spacer.svg';
   import pixelHorizontal from 'assets/images/home/pixel-horizontal.svg';
   import pixelHorizontal2 from 'assets/images/home/pixel-horizontal-2.svg';
-  import pixelHorizontal3 from 'assets/images/home/pixel-horizontal-3.svg';
-  import facebookSquareIcon from 'assets/svg/facebook-square.svg';
-  import googleIcon from 'assets/svg/google.svg';
   import cnet from 'assets/svg/cnet.svg';
   import fastCompany from 'assets/svg/fast-company.svg';
   import discover from 'assets/images/home/discover.svg';
@@ -578,21 +493,14 @@
   import lifehacker from 'assets/images/home/lifehacker.svg';
   import makeuseof from 'assets/images/home/make-use-of.svg';
   import thenewyorktimes from 'assets/images/home/the-new-york-times.svg';
-  import * as Analytics from 'client/libs/analytics';
 
   export default {
     data () {
       return {
         icons: Object.freeze({
-          googlePlay,
-          iosAppStore,
-          iphones,
           spacer,
           pixelHorizontal,
           pixelHorizontal2,
-          pixelHorizontal3,
-          facebookIcon: facebookSquareIcon,
-          googleIcon,
           cnet,
           fastCompany,
           discover,
@@ -610,20 +518,6 @@
         usernameIssues: [],
       };
     },
-    mounted () {
-      Analytics.track({
-        hitType: 'pageview',
-        eventCategory: 'page',
-        eventAction: 'landing page',
-        page: '/static/home',
-      });
-
-      hello.init({
-        facebook: process.env.FACEBOOK_KEY, // eslint-disable-line
-        // windows: WINDOWS_CLIENT_ID,
-        google: process.env.GOOGLE_CLIENT_ID, // eslint-disable-line
-      });
-    },
     computed: {
       emailValid () {
         if (this.email.length <= 3) return false;
@@ -701,33 +595,8 @@
         window.location.href = redirectTo;
       },
       playButtonClick () {
-        Analytics.track({
-          hitType: 'event',
-          eventCategory: 'button',
-          eventAction: 'click',
-          eventLabel: 'Play',
-        });
         this.$router.push('/register');
       },
-      // @TODO: Abstract hello in to action or lib
-      async socialAuth (network) {
-        try {
-          await hello(network).logout();
-        } catch (e) {} // eslint-disable-line
-
-        const redirectUrl = `${window.location.protocol}//${window.location.host}`;
-        const auth = await hello(network).login({
-          scope: 'email',
-          // explicitly pass the redirect url or it might redirect to /home
-          redirect_uri: redirectUrl, // eslint-disable-line camelcase
-        });
-
-        await this.$store.dispatch('auth:socialAuth', {
-          auth,
-        });
-
-        window.location.href = '/';
-      },
     },
   };
 </script>
diff --git a/website/client/components/static/staticWrapper.vue b/website/client/components/static/staticWrapper.vue
index 94371181fe..eefe1fe6ea 100644
--- a/website/client/components/static/staticWrapper.vue
+++ b/website/client/components/static/staticWrapper.vue
@@ -90,7 +90,7 @@ div
       color: #bda8ff;
     }
 
-    .social-circle, .btn-contribute {
+    .btn-contribute {
       background: #36205d;
       color: #bda8ff;
 
diff --git a/website/client/components/tasks/task.vue b/website/client/components/tasks/task.vue
index 0a1b15ddf9..46cb1da302 100644
--- a/website/client/components/tasks/task.vue
+++ b/website/client/components/tasks/task.vue
@@ -552,7 +552,6 @@ import moment from 'moment';
 import axios from 'axios';
 import scoreTask from 'common/script/ops/scoreTask';
 import Vue from 'vue';
-import * as Analytics from 'client/libs/analytics';
 
 import positiveIcon from 'assets/svg/positive.svg';
 import negativeIcon from 'assets/svg/negative.svg';
@@ -783,8 +782,6 @@ export default {
           break;
       }
 
-
-      Analytics.updateUser();
       const response = await axios.post(`/api/v4/tasks/${task._id}/score/${direction}`);
       const tmp = response.data.data._tmp || {}; // used to notify drops, critical hits and other bonuses
       const crit = tmp.crit;
diff --git a/website/client/components/userMenu/profile.vue b/website/client/components/userMenu/profile.vue
index 02ecf467f6..dba76d8a65 100644
--- a/website/client/components/userMenu/profile.vue
+++ b/website/client/components/userMenu/profile.vue
@@ -79,14 +79,12 @@
             .progress
               .progress-bar(role='progressbar', :aria-valuenow='incentivesProgress', aria-valuemin='0', aria-valuemax='100', :style='{width: incentivesProgress + "%"}')
                 span.sr-only {{ incentivesProgress }}% {{$t('complete')}}
-        // @TODO: Implement in V2 .social
 
     .row(v-if='editing')
       h1 {{$t('editProfile')}}
       .col-12
         .alert.alert-info.alert-sm(v-html='$t("communityGuidelinesWarning", managerEmail)')
 
-        // TODO use photo-upload instead: https://groups.google.com/forum/?fromgroups=#!topic/derbyjs/xMmADvxBOak
         .form-group
           label {{ $t('displayName') }}
           input.form-control(type='text', :placeholder="$t('fullName')", v-model='editingProfile.name')
@@ -97,15 +95,6 @@
           label {{ $t('about') }}
           textarea.form-control(rows=5, :placeholder="$t('displayBlurbPlaceholder')", v-model='editingProfile.blurb')
           // include ../../shared/formatting-help
-        //- .form-group
-        //-   label Facebook
-        //-   input.form-control(type='text', placeholder="Paste your link here", v-model='editingProfile.facebook')
-        //- .form-group
-        //-   label Instagram
-        //-   input.form-control(type='text', placeholder="Paste your link here", v-model='editingProfile.instagram')
-        //- .form-group
-        //-   label Twitter
-        //-   input.form-control(type='text', placeholder="Paste your link here", v-model='editingProfile.twitter')
 
       .col-12.text-center
         button.btn.btn-primary(@click='save()') {{ $t("save") }}
diff --git a/website/client/index.html b/website/client/index.html
index 32ecee0b0e..096b62dc2c 100644
--- a/website/client/index.html
+++ b/website/client/index.html
@@ -6,18 +6,7 @@
     <title>Habitica - Gamify Your Life</title>
     <meta name="description" content="Habitica is a free habit and productivity app that treats your real life like a game. Habitica can help you achieve your goals to become healthy and happy.">
     <meta name="keywords" content="Habits,Goals,Todo,Gamification,Health,Fitness,School,Work">
-    <meta name="smartbanner:title" content="Habitica">
-    <meta name="smartbanner:author" content="HabitRPG, Inc.">
-    <meta name="smartbanner:price" content="FREE">
-    <meta name="smartbanner:price-suffix-apple" content=" - On the App Store">
-    <meta name="smartbanner:price-suffix-google" content=" - In Google Play">
-    <meta name="smartbanner:icon-apple" content="/static/presskit/Logo/iOS.png">
-    <meta name="smartbanner:icon-google" content="/static/presskit/Logo/Android.png">
-    <meta name="smartbanner:button" content="VIEW">
-    <meta name="smartbanner:button-url-apple" content="https://itunes.apple.com/us/app/habitica-gamified-taskmanager/id994882113">
-    <meta name="smartbanner:button-url-google" content="https://play.google.com/store/apps/details?id=com.habitrpg.android.habitica">
-    <meta name="smartbanner:enabled-platforms" content="android,ios">
-    <link href="https://fonts.googleapis.com/css?family=Roboto+Condensed:400,400i,700,700i|Roboto:400,400i,700,700i" rel="stylesheet">
+    <link href="/static/fonts/index-fonts.css" rel="stylesheet">
     <link rel="shortcut icon" sizes="48x48" href="/static/icons/favicon.ico">
     <link rel="shortcut icon" sizes="192x192" href="/static/icons/favicon_192x192.png">
     <link rel="mask-icon" href="/static/icons/favicon.ico">
@@ -33,7 +22,6 @@
     <div id="app"></div>
     <!-- built files will be auto injected -->
 
-    <script type="text/javascript" src="//cloudfront.loggly.com/js/loggly.tracker-latest.min.js" async></script>
     <!-- Translations -->
     <script type='text/javascript' src='/api/v4/i18n/browser-script'></script>
   </body>
diff --git a/website/client/main.js b/website/client/main.js
index f6b0701dd8..da68df567e 100644
--- a/website/client/main.js
+++ b/website/client/main.js
@@ -1,15 +1,10 @@
 import Vue from 'vue';
 import AppComponent from './app';
-import {
-  setup as setupAnalytics,
-} from 'client/libs/analytics';
-import { setUpLogging } from 'client/libs/logging';
 import router from './router/index';
 import getStore from './store';
 import StoreModule from './libs/store';
 import './filters/registerGlobals';
 import i18n from './libs/i18n';
-import 'smartbanner.js/dist/smartbanner.js';
 
 import BootstrapVue from 'bootstrap-vue';
 
@@ -30,8 +25,6 @@ Vue.use(i18n, {i18nData: window && window['habitica-i18n']});
 Vue.use(StoreModule);
 Vue.use(BootstrapVue);
 
-setUpLogging();
-setupAnalytics(); // just create queues for analytics, no scripts loaded at this time
 const store = getStore();
 
 export default new Vue({
diff --git a/website/client/mixins/guide.js b/website/client/mixins/guide.js
index 4dd3d9be88..d213fb5454 100644
--- a/website/client/mixins/guide.js
+++ b/website/client/mixins/guide.js
@@ -1,6 +1,5 @@
 import times from 'lodash/times';
 import introjs from 'intro.js';
-import * as Analytics from 'client/libs/analytics';
 
 let showingTour = false;
 
@@ -140,12 +139,6 @@ export default {
         case 'equipment':  return this.goto('equipment', 0);
       }
     },
-    hoyo (user) {
-      // @TODO: What is was the timeout for?
-      // @TODO move to analytics
-      window.amplitude.setUserId(user._id);
-      window.ga('set', {userId: user._id});
-    },
     goto (chapter, page, force) {
       if (chapter === 'intro' && this.user.flags.welcomed !== true)  {
         // @TODO: Add dispatch User.set({'flags.welcomed': true});
@@ -162,15 +155,6 @@ export default {
         opts.steps  = opts.steps.concat(this.chapters[chapter][p]);
       });
 
-      Analytics.track({
-        hitType: 'event',
-        eventCategory: 'behavior',
-        eventAction: 'tutorial',
-        eventLabel: `${chapter}-web`,
-        eventValue: page + 1,
-        complete: true,
-      });
-
       // @TODO: Do we always need to initialize here?
       const intro = introjs();
       intro.setOptions({
@@ -196,15 +180,6 @@ export default {
       // Mark tour complete
       ups[`flags.tour.${chapter}`] = -2; // @TODO: Move magic numbers to enum
 
-      Analytics.track({
-        hitType: 'event',
-        eventCategory: 'behavior',
-        eventAction: 'tutorial',
-        eventLabel: `${chapter}-web`,
-        eventValue: lastKnownStep,
-        complete: true,
-      });
-
       this.$store.dispatch('user:set', ups);
     },
   },
diff --git a/website/client/router/index.js b/website/client/router/index.js
index 167232732b..05663006bc 100644
--- a/website/client/router/index.js
+++ b/website/client/router/index.js
@@ -1,8 +1,6 @@
 import Vue from 'vue';
 import VueRouter from 'vue-router';
 import getStore from 'client/store';
-import * as Analytics from 'client/libs/analytics';
-import handleRedirect from './handleRedirect';
 
 import ParentPage from 'client/components/parentPage';
 
@@ -286,9 +284,6 @@ const router = new VueRouter({
         { name: 'contributors', path: 'contributors', component: HeroesPage },
       ],
     },
-    // Only used to handle some redirects
-    // See router.beforeEach
-    { path: '/redirect/:redirect', name: 'redirect' },
     { path: '*', redirect: { name: 'notFound' } },
   ],
 });
@@ -299,8 +294,6 @@ router.beforeEach(function routerGuard (to, from, next) {
   const isUserLoggedIn = store.state.isUserLoggedIn;
   const routeRequiresLogin = to.meta.requiresLogin !== false;
 
-  if (to.name === 'redirect') return handleRedirect(to, from, next);
-
   if (!isUserLoggedIn && routeRequiresLogin) {
     // Redirect to the login page unless the user is trying to reach the
     // root of the website, in which case show the home page.
@@ -356,13 +349,6 @@ router.beforeEach(function routerGuard (to, from, next) {
     });
   }
 
-  Analytics.track({
-    hitType: 'pageview',
-    eventCategory: 'navigation',
-    eventAction: 'navigate',
-    page: to.name || to.path,
-  });
-
   if ((to.name === 'userProfile' || to.name === 'userProfilePage') && from.name !== null) {
     let startingPage = 'profile';
     if (to.params.startingPage !== undefined) {
@@ -387,7 +373,6 @@ router.beforeEach(function routerGuard (to, from, next) {
   if (from.name === 'userProfile' || from.name === 'userProfilePage' || from.name === 'stats' || from.name === 'achievements' || from.name === 'profile') {
     router.app.$root.$emit('bv::hide::modal', 'profile');
   }
-
   next();
 });
 
diff --git a/website/client/store/actions/auth.js b/website/client/store/actions/auth.js
index 58af5e3be9..c84241a39e 100644
--- a/website/client/store/actions/auth.js
+++ b/website/client/store/actions/auth.js
@@ -63,25 +63,6 @@ export async function verifyDisplayName (store, params) {
   return result.data.data;
 }
 
-export async function socialAuth (store, params) {
-  let url = '/api/v4/user/auth/social';
-  let result = await axios.post(url, {
-    network: params.auth.network,
-    authResponse: params.auth.authResponse,
-  });
-
-  let user = result.data.data;
-
-  let userLocalData = JSON.stringify({
-    auth: {
-      apiId: user.id,
-      apiToken: user.apiToken,
-    },
-  });
-
-  localStorage.setItem(LOCALSTORAGE_AUTH_KEY, userLocalData);
-}
-
 export function logout () {
   localStorage.clear();
   window.location.href = '/logout-server';
diff --git a/website/client/store/actions/chat.js b/website/client/store/actions/chat.js
index 584db3bf75..98806066f3 100644
--- a/website/client/store/actions/chat.js
+++ b/website/client/store/actions/chat.js
@@ -1,5 +1,4 @@
 import axios from 'axios';
-import * as Analytics from 'client/libs/analytics';
 
 export async function getChat (store, payload) {
   let response = await axios.get(`/api/v4/groups/${payload.groupId}/chat`);
@@ -16,13 +15,6 @@ export async function postChat (store, payload) {
     url += `?previousMsg=${payload.previousMsg}`;
   }
 
-  if (group.type === 'party') {
-    Analytics.updateUser({
-      partyID: group.id,
-      partySize: group.memberCount,
-    });
-  }
-
   let response = await axios.post(url, {
     message: payload.message,
   });
diff --git a/website/client/store/actions/guilds.js b/website/client/store/actions/guilds.js
index ea4e680440..b4eda8714b 100644
--- a/website/client/store/actions/guilds.js
+++ b/website/client/store/actions/guilds.js
@@ -1,7 +1,6 @@
 import axios from 'axios';
 import omit from 'lodash/omit';
 import findIndex from 'lodash/findIndex';
-import * as Analytics from 'client/libs/analytics';
 
 export async function getPublicGuilds (store, payload) {
   let params = {
@@ -74,8 +73,6 @@ export async function join (store, payload) {
     if (invitationI !== -1) invitations.parties.splice(invitationI, 1);
 
     user.party._id = groupId;
-
-    Analytics.updateUser({partyID: groupId});
   }
 
   return response.data.data;
diff --git a/website/client/store/actions/quests.js b/website/client/store/actions/quests.js
index cff15fa53a..ef7fd0dd5b 100644
--- a/website/client/store/actions/quests.js
+++ b/website/client/store/actions/quests.js
@@ -1,26 +1,9 @@
 import axios from 'axios';
-import * as Analytics from 'client/libs/analytics';
 
 // export async function initQuest (store) {
 // }
 
 export async function sendAction (store, payload) {
-  // @TODO: Maybe move this to server
-  let partyData = {};
-  if (store.state.party && store.state.party.data) {
-    partyData = {
-      partyID: store.state.party.data._id,
-      partySize: store.state.party.data.memberCount,
-    };
-  } else {
-    partyData = {
-      partyID: store.state.user.data.party._id,
-      partySize: store.state.partyMembers.data.length,
-    };
-  }
-
-  Analytics.updateUser(partyData);
-
   let response = await axios.post(`/api/v4/groups/${payload.groupId}/${payload.action}`);
 
   // @TODO: Update user?
diff --git a/website/client/store/index.js b/website/client/store/index.js
index b47fce6de7..4f33daf2a2 100644
--- a/website/client/store/index.js
+++ b/website/client/store/index.js
@@ -51,7 +51,6 @@ export default function () {
       title: 'Habitica',
       isUserLoggedIn,
       isUserLoaded: false, // Means the user and the user's tasks are ready
-      isAmazonReady: false, // Whether the Amazon Payments lib can be used
       user: asyncResourceFactory(),
       credentials: isUserLoggedIn ? {
         API_ID: AUTH_SETTINGS.auth.apiId,
diff --git a/website/common/errors/apiErrorMessages.js b/website/common/errors/apiErrorMessages.js
index f10747b12c..90804492fc 100644
--- a/website/common/errors/apiErrorMessages.js
+++ b/website/common/errors/apiErrorMessages.js
@@ -23,6 +23,5 @@ module.exports = {
 
   missingPaymentId: 'Missing "req.query.paymentId"',
   missingCustomerId: 'Missing "req.query.customerId"',
-  missingPaypalBlock: 'Missing "req.session.paypalBlock"',
   missingSubKey: 'Missing "req.query.sub"',
 };
diff --git a/website/common/script/constants.js b/website/common/script/constants.js
index 8985bea89e..098e34095f 100644
--- a/website/common/script/constants.js
+++ b/website/common/script/constants.js
@@ -15,11 +15,6 @@ export const CHAT_FLAG_FROM_MOD = 5; // a flag from a moderator counts as this m
 export const CHAT_FLAG_FROM_SHADOW_MUTE = 10; // a shadow-muted user's post starts with this many flags
 // @TODO use those constants to replace hard-coded numbers
 
-export const SUPPORTED_SOCIAL_NETWORKS = [
-  {key: 'facebook', name: 'Facebook'},
-  {key: 'google', name: 'Google'},
-];
-
 export const GUILDS_PER_PAGE = 30; // number of guilds to return per page when using pagination
 
 export const PARTY_LIMIT_MEMBERS = 30;
diff --git a/website/common/script/content/spells.js b/website/common/script/content/spells.js
index 58d69d3755..e641f15466 100644
--- a/website/common/script/content/spells.js
+++ b/website/common/script/content/spells.js
@@ -44,13 +44,13 @@ spells.wizard = {
     lvl: 11,
     target: 'task',
     notes: t('spellWizardFireballNotes'),
-    cast (user, target, req) {
+    cast (user, target) {
       let bonus = statsComputed(user).int * crit.crit(user, 'per');
       bonus *= Math.ceil((target.value < 0 ? 1 : target.value + 1) * 0.075);
       user.stats.exp += diminishingReturns(bonus, 75);
       if (!user.party.quest.progress.up) user.party.quest.progress.up = 0;
       user.party.quest.progress.up += Math.ceil(statsComputed(user).int * 0.1);
-      updateStats(user, user.stats, req);
+      updateStats(user, user.stats);
     },
   },
   mpheal: { // Ethereal Surge
@@ -168,12 +168,12 @@ spells.rogue = {
     lvl: 12,
     target: 'task',
     notes: t('spellRogueBackStabNotes'),
-    cast (user, target, req) {
+    cast (user, target) {
       let _crit = crit.crit(user, 'str', 0.3);
       let bonus = calculateBonus(target.value, statsComputed(user).str, _crit);
       user.stats.exp += diminishingReturns(bonus, 75, 50);
       user.stats.gp += diminishingReturns(bonus, 18, 75);
-      updateStats(user, user.stats, req);
+      updateStats(user, user.stats);
     },
   },
   toolsOfTrade: { // Tools of the Trade
diff --git a/website/common/script/content/subscriptionBlocks.js b/website/common/script/content/subscriptionBlocks.js
index f3131cb5a5..719a693820 100644
--- a/website/common/script/content/subscriptionBlocks.js
+++ b/website/common/script/content/subscriptionBlocks.js
@@ -20,14 +20,6 @@ let subscriptionBlocks = {
     months: 6,
     price: 30,
   },
-  google_6mo: {
-    target: 'user',
-    canSubscribe: true,
-    months: 6,
-    price: 24,
-    discount: true,
-    original: 30,
-  },
   basic_12mo: {
     target: 'user',
     canSubscribe: true,
@@ -39,7 +31,7 @@ let subscriptionBlocks = {
     canSubscribe: true,
     months: 1,
     price: 9,
-    quantity: 3, // Default quantity for Stripe - The same as having 3 user subscriptions
+    quantity: 3,
   },
   group_plan_auto: {
     target: 'user',
diff --git a/website/common/script/fns/randomDrop.js b/website/common/script/fns/randomDrop.js
index 6061b3f83f..7c643d0ef0 100644
--- a/website/common/script/fns/randomDrop.js
+++ b/website/common/script/fns/randomDrop.js
@@ -25,7 +25,7 @@ function trueRandom () {
   return Math.random();
 }
 
-module.exports = function randomDrop (user, options, req = {}, analytics) {
+module.exports = function randomDrop (user, options, req = {}) {
   let acceptableDrops;
   let drop;
   let dropMultiplier;
@@ -119,16 +119,6 @@ module.exports = function randomDrop (user, options, req = {}, analytics) {
       }, req.language);
     }
 
-    if (analytics) {
-      analytics.track('dropped item', {
-        uuid: user._id,
-        itemKey: drop.key,
-        acquireMethod: 'Drop',
-        category: 'behavior',
-        headers: req.headers,
-      });
-    }
-
     user._tmp.drop = drop;
     user.items.lastDrop.date = Number(new Date());
     user.items.lastDrop.count++;
diff --git a/website/common/script/fns/updateStats.js b/website/common/script/fns/updateStats.js
index 669fb46fd2..11278bd04d 100644
--- a/website/common/script/fns/updateStats.js
+++ b/website/common/script/fns/updateStats.js
@@ -6,7 +6,7 @@ import {
 import { toNextLevel } from '../statHelpers';
 import autoAllocate from './autoAllocate';
 
-module.exports = function updateStats (user, stats, req = {}, analytics) {
+module.exports = function updateStats (user, stats) {
   let allocatedStatPoints;
   let totalStatPoints;
   let experienceToNextLevel;
@@ -92,15 +92,6 @@ module.exports = function updateStats (user, stats, req = {}, analytics) {
       user.items.quests[k]++;
       if (user.markModified) user.markModified('items.quests');
 
-      if (analytics) {
-        analytics.track('acquire item', {
-          uuid: user._id,
-          itemKey: k,
-          acquireMethod: 'Level Drop',
-          category: 'behavior',
-          headers: req.headers,
-        });
-      }
       user._tmp.drop = {
         type: 'Quest',
         key: k,
diff --git a/website/common/script/index.js b/website/common/script/index.js
index b636c94bc2..5775880362 100644
--- a/website/common/script/index.js
+++ b/website/common/script/index.js
@@ -26,7 +26,6 @@ import {
   MAX_SUMMARY_SIZE_FOR_GUILDS,
   MAX_SUMMARY_SIZE_FOR_CHALLENGES,
   MIN_SHORTNAME_SIZE_FOR_CHALLENGES,
-  SUPPORTED_SOCIAL_NETWORKS,
   GUILDS_PER_PAGE,
   PARTY_LIMIT_MEMBERS,
   CHAT_FLAG_LIMIT_FOR_HIDING,
@@ -40,7 +39,6 @@ api.constants = {
   MAX_SUMMARY_SIZE_FOR_GUILDS,
   MAX_SUMMARY_SIZE_FOR_CHALLENGES,
   MIN_SHORTNAME_SIZE_FOR_CHALLENGES,
-  SUPPORTED_SOCIAL_NETWORKS,
   GUILDS_PER_PAGE,
   PARTY_LIMIT_MEMBERS,
   CHAT_FLAG_LIMIT_FOR_HIDING,
diff --git a/website/common/script/ops/buy/abstractBuyOperation.js b/website/common/script/ops/buy/abstractBuyOperation.js
index 3f87f08694..79533d4c20 100644
--- a/website/common/script/ops/buy/abstractBuyOperation.js
+++ b/website/common/script/ops/buy/abstractBuyOperation.js
@@ -4,19 +4,16 @@ import {
   NotImplementedError,
   BadRequest,
 } from '../../libs/errors';
-import _merge from 'lodash/merge';
 import _get from 'lodash/get';
 
 export class AbstractBuyOperation {
   /**
    * @param {User} user - the User-Object
    * @param {Request} req - the Request-Object
-   * @param {analytics} analytics
    */
-  constructor (user, req, analytics) {
+  constructor (user, req) {
     this.user = user;
     this.req = req || {};
-    this.analytics = analytics;
 
     let quantity = _get(req, 'quantity');
 
@@ -84,10 +81,6 @@ export class AbstractBuyOperation {
     throw new NotImplementedError('executeChanges');
   }
 
-  analyticsData () {
-    throw new NotImplementedError('sendToAnalytics');
-  }
-
   purchase () {
     if (!this.multiplePurchaseAllowed() && this.quantity > 1) {
       throw new NotAuthorized(this.i18n('messageNotAbleToBuyInBulk'));
@@ -97,37 +90,13 @@ export class AbstractBuyOperation {
 
     let resultObj = this.executeChanges(this.user, this.item, this.req);
 
-    if (this.analytics) {
-      this.sendToAnalytics(this.analyticsData());
-    }
-
     return resultObj;
   }
-
-  analyticsLabel () {
-    return 'acquire item';
-  }
-
-  sendToAnalytics (additionalData = {}) {
-    // spread-operator produces an "unexpected token" error
-    let analyticsData = _merge(additionalData, {
-      // ...additionalData,
-      uuid: this.user._id,
-      category: 'behavior',
-      headers: this.req.headers,
-    });
-
-    if (this.multiplePurchaseAllowed()) {
-      analyticsData.quantityPurchased = this.quantity;
-    }
-
-    this.analytics.track(this.analyticsLabel(), analyticsData);
-  }
 }
 
 export class AbstractGoldItemOperation extends AbstractBuyOperation {
-  constructor (user, req, analytics) {
-    super(user, req, analytics);
+  constructor (user, req) {
+    super(user, req);
   }
 
   canUserPurchase (user, item) {
@@ -150,20 +119,11 @@ export class AbstractGoldItemOperation extends AbstractBuyOperation {
 
     user.stats.gp -= itemValue * this.quantity;
   }
-
-  analyticsData () {
-    return {
-      itemKey: this.getItemKey(this.item),
-      itemType: this.getItemType(this.item),
-      acquireMethod: 'Gold',
-      goldCost: this.getItemValue(this.item),
-    };
-  }
 }
 
 export class AbstractGemItemOperation extends AbstractBuyOperation {
-  constructor (user, req, analytics) {
-    super(user, req, analytics);
+  constructor (user, req) {
+    super(user, req);
   }
 
   canUserPurchase (user, item) {
@@ -184,20 +144,11 @@ export class AbstractGemItemOperation extends AbstractBuyOperation {
 
     user.balance -= itemValue * this.quantity;
   }
-
-  analyticsData () {
-    return {
-      itemKey: this.getItemKey(this.item),
-      itemType: this.getItemType(this.item),
-      acquireMethod: 'Gems',
-      gemCost: this.getItemValue(this.item) * 4,
-    };
-  }
 }
 
 export class AbstractHourglassItemOperation extends AbstractBuyOperation {
-  constructor (user, req, analytics) {
-    super(user, req, analytics);
+  constructor (user, req) {
+    super(user, req);
   }
 
   canUserPurchase (user, item) {
@@ -211,11 +162,4 @@ export class AbstractHourglassItemOperation extends AbstractBuyOperation {
   subtractCurrency (user) {
     user.purchased.plan.consecutive.trinkets--;
   }
-
-  analyticsData () {
-    return {
-      itemKey: this.item.key,
-      acquireMethod: 'Hourglass',
-    };
-  }
 }
diff --git a/website/common/script/ops/buy/buy.js b/website/common/script/ops/buy/buy.js
index b0cc98c053..e3160b2561 100644
--- a/website/common/script/ops/buy/buy.js
+++ b/website/common/script/ops/buy/buy.js
@@ -20,7 +20,7 @@ import {BuyHourglassMountOperation} from './buyMount';
 
 // @TODO: when we are sure buy is the only function used, let's move the buy files to a folder
 
-module.exports = function buy (user, req = {}, analytics, options = {quantity: 1, hourglass: false}) {
+module.exports = function buy (user, req = {}, options = {quantity: 1, hourglass: false}) {
   let key = get(req, 'params.key');
   const hourglass = options.hourglass;
   const quantity = options.quantity;
@@ -36,31 +36,31 @@ module.exports = function buy (user, req = {}, analytics, options = {quantity: 1
 
   switch (type) {
     case 'armoire': {
-      const buyOp = new BuyArmoireOperation(user, req, analytics);
+      const buyOp = new BuyArmoireOperation(user, req);
 
       buyRes = buyOp.purchase();
       break;
     }
     case 'mystery':
-      buyRes = buyMysterySet(user, req, analytics);
+      buyRes = buyMysterySet(user, req);
       break;
     case 'potion': {
-      const buyOp = new BuyHealthPotionOperation(user, req, analytics);
+      const buyOp = new BuyHealthPotionOperation(user, req);
 
       buyRes = buyOp.purchase();
       break;
     }
     case 'gems': {
-      const buyOp = new BuyGemOperation(user, req, analytics);
+      const buyOp = new BuyGemOperation(user, req);
 
       buyRes = buyOp.purchase();
       break;
     }
     case 'quests': {
       if (hourglass) {
-        buyRes = hourglassPurchase(user, req, analytics, quantity);
+        buyRes = hourglassPurchase(user, req, quantity);
       } else {
-        const buyOp = new BuyQuestWithGemOperation(user, req, analytics);
+        const buyOp = new BuyQuestWithGemOperation(user, req);
 
         buyRes = buyOp.purchase();
       }
@@ -71,31 +71,31 @@ module.exports = function buy (user, req = {}, analytics, options = {quantity: 1
     case 'food':
     case 'gear':
     case 'bundles':
-      buyRes = purchaseOp(user, req, analytics);
+      buyRes = purchaseOp(user, req);
       break;
     case 'mounts': {
-      const buyOp = new BuyHourglassMountOperation(user, req, analytics);
+      const buyOp = new BuyHourglassMountOperation(user, req);
 
       buyRes = buyOp.purchase();
       break;
     }
     case 'pets':
-      buyRes = hourglassPurchase(user, req, analytics);
+      buyRes = hourglassPurchase(user, req);
       break;
     case 'quest': {
-      const buyOp = new BuyQuestWithGoldOperation(user, req, analytics);
+      const buyOp = new BuyQuestWithGoldOperation(user, req);
 
       buyRes = buyOp.purchase();
       break;
     }
     case 'special': {
-      const buyOp = new BuySpellOperation(user, req, analytics);
+      const buyOp = new BuySpellOperation(user, req);
 
       buyRes = buyOp.purchase();
       break;
     }
     default: {
-      const buyOp = new BuyMarketGearOperation(user, req, analytics);
+      const buyOp = new BuyMarketGearOperation(user, req);
 
       buyRes = buyOp.purchase();
       break;
diff --git a/website/common/script/ops/buy/buyArmoire.js b/website/common/script/ops/buy/buyArmoire.js
index cd4eb796af..2c38cbfc9c 100644
--- a/website/common/script/ops/buy/buyArmoire.js
+++ b/website/common/script/ops/buy/buyArmoire.js
@@ -18,8 +18,8 @@ const YIELD_EQUIPMENT_THRESHOLD = 0.6;
 const YIELD_FOOD_THRESHOLD = 0.8;
 
 export class BuyArmoireOperation extends AbstractGoldItemOperation {
-  constructor (user, req, analytics) {
-    super(user, req, analytics);
+  constructor (user, req) {
+    super(user, req);
   }
 
   multiplePurchaseAllowed () {
@@ -68,19 +68,6 @@ export class BuyArmoireOperation extends AbstractGoldItemOperation {
     ];
   }
 
-  _trackDropAnalytics (userId, key) {
-    this.analytics.track(
-      'dropped item',
-      {
-        uuid: userId,
-        itemKey: key,
-        acquireMethod: 'Armoire',
-        category: 'behavior',
-        headers: this.req.headers,
-      },
-    );
-  }
-
   _gearResult (user, eligibleEquipment) {
     eligibleEquipment.sort();
     let drop = randomVal(eligibleEquipment);
@@ -104,10 +91,6 @@ export class BuyArmoireOperation extends AbstractGoldItemOperation {
 
     removeItemByPath(user, `gear.flat.${drop.key}`);
 
-    if (this.analytics) {
-      this._trackDropAnalytics(user._id, drop.key);
-    }
-
     let armoireResp = {
       type: 'gear',
       dropKey: drop.key,
@@ -129,10 +112,6 @@ export class BuyArmoireOperation extends AbstractGoldItemOperation {
     user.items.food[drop.key] += 1;
     if (user.markModified) user.markModified('items.food');
 
-    if (this.analytics) {
-      this._trackDropAnalytics(user._id, drop.key);
-    }
-
     return {
       message: this.i18n('armoireFood', {
         image: `<span class="Pet_Food_${drop.key} pull-left"></span>`,
diff --git a/website/common/script/ops/buy/buyGem.js b/website/common/script/ops/buy/buyGem.js
index b2ea03046e..81fa5be9da 100644
--- a/website/common/script/ops/buy/buyGem.js
+++ b/website/common/script/ops/buy/buyGem.js
@@ -9,8 +9,8 @@ import get from 'lodash/get';
 import planGemLimits from '../../libs/planGemLimits';
 
 export class BuyGemOperation extends AbstractGoldItemOperation {
-  constructor (user, req, analytics) {
-    super(user, req, analytics);
+  constructor (user, req) {
+    super(user, req);
   }
 
   multiplePurchaseAllowed () {
@@ -72,8 +72,4 @@ export class BuyGemOperation extends AbstractGoldItemOperation {
       this.i18n('plusGem', {count: this.quantity}),
     ];
   }
-
-  analyticsLabel () {
-    return 'purchase gems';
-  }
 }
diff --git a/website/common/script/ops/buy/buyHealthPotion.js b/website/common/script/ops/buy/buyHealthPotion.js
index e3d6c1062a..5bd6cf4b5c 100644
--- a/website/common/script/ops/buy/buyHealthPotion.js
+++ b/website/common/script/ops/buy/buyHealthPotion.js
@@ -6,8 +6,8 @@ import {
 import { AbstractGoldItemOperation} from './abstractBuyOperation';
 
 export class BuyHealthPotionOperation extends AbstractGoldItemOperation {
-  constructor (user, req, analytics) {
-    super(user, req, analytics);
+  constructor (user, req) {
+    super(user, req);
   }
 
   multiplePurchaseAllowed () {
diff --git a/website/common/script/ops/buy/buyMarketGear.js b/website/common/script/ops/buy/buyMarketGear.js
index 5f8728bf53..7660de1c46 100644
--- a/website/common/script/ops/buy/buyMarketGear.js
+++ b/website/common/script/ops/buy/buyMarketGear.js
@@ -16,8 +16,8 @@ import { AbstractGoldItemOperation } from './abstractBuyOperation';
 import errorMessage from '../../libs/errorMessage';
 
 export class BuyMarketGearOperation extends AbstractGoldItemOperation {
-  constructor (user, req, analytics) {
-    super(user, req, analytics);
+  constructor (user, req) {
+    super(user, req);
   }
 
   multiplePurchaseAllowed () {
diff --git a/website/common/script/ops/buy/buyMount.js b/website/common/script/ops/buy/buyMount.js
index ced5cddfc8..81cf05f16f 100644
--- a/website/common/script/ops/buy/buyMount.js
+++ b/website/common/script/ops/buy/buyMount.js
@@ -10,8 +10,8 @@ import includes from 'lodash/includes';
 import keys from 'lodash/keys';
 
 export class BuyHourglassMountOperation extends AbstractHourglassItemOperation {
-  constructor (user, req, analytics) {
-    super(user, req, analytics);
+  constructor (user, req) {
+    super(user, req);
   }
 
   multiplePurchaseAllowed () {
@@ -50,10 +50,4 @@ export class BuyHourglassMountOperation extends AbstractHourglassItemOperation {
       message,
     ];
   }
-
-  analyticsData () {
-    let data = super.analyticsData();
-    data.itemType = 'mounts';
-    return data;
-  }
 }
diff --git a/website/common/script/ops/buy/buyMysterySet.js b/website/common/script/ops/buy/buyMysterySet.js
index db9ca557f2..e8098e7b23 100644
--- a/website/common/script/ops/buy/buyMysterySet.js
+++ b/website/common/script/ops/buy/buyMysterySet.js
@@ -9,7 +9,7 @@ import {
 } from '../../libs/errors';
 import errorMessage from '../../libs/errorMessage';
 
-module.exports = function buyMysterySet (user, req = {}, analytics) {
+module.exports = function buyMysterySet (user, req = {}) {
   let key = get(req, 'params.key');
   if (!key) throw new BadRequest(errorMessage('missingKeyParam'));
 
@@ -26,16 +26,6 @@ module.exports = function buyMysterySet (user, req = {}, analytics) {
 
   each(mysterySet.items, item => {
     user.items.gear.owned[item.key] = true;
-    if (analytics) {
-      analytics.track('acquire item', {
-        uuid: user._id,
-        itemKey: item.key,
-        itemType: 'Subscriber Gear',
-        acquireMethod: 'Hourglass',
-        category: 'behavior',
-        headers: req.headers,
-      });
-    }
   });
 
   if (user.markModified) user.markModified('items.gear.owned');
diff --git a/website/common/script/ops/buy/buyQuestGem.js b/website/common/script/ops/buy/buyQuestGem.js
index 63ba528ce3..c772e979ca 100644
--- a/website/common/script/ops/buy/buyQuestGem.js
+++ b/website/common/script/ops/buy/buyQuestGem.js
@@ -10,8 +10,8 @@ import errorMessage from '../../libs/errorMessage';
 import {AbstractGemItemOperation} from './abstractBuyOperation';
 
 export class BuyQuestWithGemOperation extends AbstractGemItemOperation {
-  constructor (user, req, analytics) {
-    super(user, req, analytics);
+  constructor (user, req) {
+    super(user, req);
   }
 
   multiplePurchaseAllowed () {
diff --git a/website/common/script/ops/buy/buyQuestGold.js b/website/common/script/ops/buy/buyQuestGold.js
index 09f04dcb59..68c47fcbfa 100644
--- a/website/common/script/ops/buy/buyQuestGold.js
+++ b/website/common/script/ops/buy/buyQuestGold.js
@@ -10,8 +10,8 @@ import {AbstractGoldItemOperation} from './abstractBuyOperation';
 import errorMessage from '../../libs/errorMessage';
 
 export class BuyQuestWithGoldOperation extends AbstractGoldItemOperation {
-  constructor (user, req, analytics) {
-    super(user, req, analytics);
+  constructor (user, req) {
+    super(user, req);
   }
 
   multiplePurchaseAllowed () {
diff --git a/website/common/script/ops/buy/buySpell.js b/website/common/script/ops/buy/buySpell.js
index 46e73a5d81..5397b50125 100644
--- a/website/common/script/ops/buy/buySpell.js
+++ b/website/common/script/ops/buy/buySpell.js
@@ -10,8 +10,8 @@ import {AbstractGoldItemOperation} from './abstractBuyOperation';
 import errorMessage from '../../libs/errorMessage';
 
 export class BuySpellOperation extends AbstractGoldItemOperation {
-  constructor (user, req, analytics) {
-    super(user, req, analytics);
+  constructor (user, req) {
+    super(user, req);
   }
 
   getItemKey () {
diff --git a/website/common/script/ops/buy/hourglassPurchase.js b/website/common/script/ops/buy/hourglassPurchase.js
index 61ae2de568..8fb20a844d 100644
--- a/website/common/script/ops/buy/hourglassPurchase.js
+++ b/website/common/script/ops/buy/hourglassPurchase.js
@@ -9,7 +9,7 @@ import {
 } from '../../libs/errors';
 import errorMessage from '../../libs/errorMessage';
 
-module.exports = function purchaseHourglass (user, req = {}, analytics, quantity = 1) {
+module.exports = function purchaseHourglass (user, req = {}, quantity = 1) {
   let key = get(req, 'params.key');
   if (!key) throw new BadRequest(errorMessage('missingKeyParam'));
 
@@ -57,17 +57,6 @@ module.exports = function purchaseHourglass (user, req = {}, analytics, quantity
     }
   }
 
-  if (analytics) {
-    analytics.track('acquire item', {
-      uuid: user._id,
-      itemKey: key,
-      itemType: type,
-      acquireMethod: 'Hourglass',
-      category: 'behavior',
-      headers: req.headers,
-    });
-  }
-
   return [
     { items: user.items, purchasedPlanConsecutive: user.purchased.plan.consecutive },
     i18n.t('hourglassPurchase', req.language),
diff --git a/website/common/script/ops/buy/purchase.js b/website/common/script/ops/buy/purchase.js
index 20975506f0..e0ae2111e8 100644
--- a/website/common/script/ops/buy/purchase.js
+++ b/website/common/script/ops/buy/purchase.js
@@ -68,7 +68,7 @@ function purchaseItem (user, item, price, type, key) {
 
 const acceptedTypes = ['eggs', 'hatchingPotions', 'food', 'gear', 'bundles'];
 const singlePurchaseTypes = ['gear'];
-module.exports = function purchase (user, req = {}, analytics) {
+module.exports = function purchase (user, req = {}) {
   let type = get(req.params, 'type');
   let key = get(req.params, 'key');
 
@@ -106,19 +106,6 @@ module.exports = function purchase (user, req = {}, analytics) {
     purchaseItem(user, item, price, type, key);
   }
 
-  if (analytics) {
-    analytics.track('acquire item', {
-      uuid: user._id,
-      itemKey: key,
-      itemType: type,
-      acquireMethod: 'Gems',
-      gemCost: price * 4,
-      quantityPurchased: quantity,
-      category: 'behavior',
-      headers: req.headers,
-    });
-  }
-
   return [
     pick(user, splitWhitespace('items balance')),
   ];
diff --git a/website/common/script/ops/changeClass.js b/website/common/script/ops/changeClass.js
index 49af6f481a..5704f92f81 100644
--- a/website/common/script/ops/changeClass.js
+++ b/website/common/script/ops/changeClass.js
@@ -33,18 +33,17 @@ function resetClass (user, req = {}) {
   return balanceRemoved;
 }
 
-module.exports = function changeClass (user, req = {}, analytics) {
+module.exports = function changeClass (user, req = {}) {
   let klass = get(req, 'query.class');
-  let balanceRemoved = 0;
   // user.flags.classSelected is set to false after the user paid the 3 gems
   if (user.stats.lvl < 10) {
     throw new NotAuthorized(i18n.t('lvl10ChangeClass', req.language));
   } else if (!klass) {
     // if no class is specified, reset points and set user.flags.classSelected to false. User will have paid 3 gems and will be prompted to select class.
-    balanceRemoved = resetClass(user, req);
+    resetClass(user, req);
   } else if (klass === 'warrior' || klass === 'rogue' || klass === 'wizard' || klass === 'healer') {
     if (user.flags.classSelected) {
-      balanceRemoved = resetClass(user, req);
+      resetClass(user, req);
     }
 
     user.stats.class = klass;
@@ -57,17 +56,6 @@ module.exports = function changeClass (user, req = {}, analytics) {
     if (user.markModified) user.markModified('items.gear.owned');
 
     removePinnedItemsByOwnedGear(user);
-
-    if (analytics) {
-      analytics.track('change class', {
-        uuid: user._id,
-        class: klass,
-        acquireMethod: balanceRemoved === 0 ? 'Free' : 'Gems',
-        gemCost: balanceRemoved / 0.25,
-        category: 'behavior',
-        headers: req.headers,
-      });
-    }
   } else {
     // if invalid class is specified, throw an error.
     throw new BadRequest(i18n.t('invalidClass', req.language));
diff --git a/website/common/script/ops/openMysteryItem.js b/website/common/script/ops/openMysteryItem.js
index b2cf4ea561..b47a5813dd 100644
--- a/website/common/script/ops/openMysteryItem.js
+++ b/website/common/script/ops/openMysteryItem.js
@@ -13,7 +13,7 @@ function markNotificationAsRead (user) {
   if (index !== -1) user.notifications.splice(index, 1);
 }
 
-module.exports = function openMysteryItem (user, req = {}, analytics) {
+module.exports = function openMysteryItem (user, req = {}) {
   const mysteryItems = user.purchased.plan.mysteryItems;
   let item = mysteryItems.shift();
 
@@ -32,17 +32,6 @@ module.exports = function openMysteryItem (user, req = {}, analytics) {
     user.markModified('items.gear.owned');
   }
 
-  if (analytics) {
-    analytics.track('open mystery item', {
-      uuid: user._id,
-      itemKey: item,
-      itemType: 'Subscriber Gear',
-      acquireMethod: 'Subscriber',
-      category: 'behavior',
-      headers: req.headers,
-    });
-  }
-
   return [
     item,
     i18n.t('mysteryItemOpened', req.language),
diff --git a/website/common/script/ops/rebirth.js b/website/common/script/ops/rebirth.js
index 02207c4ac4..0878130424 100644
--- a/website/common/script/ops/rebirth.js
+++ b/website/common/script/ops/rebirth.js
@@ -11,30 +11,15 @@ import isFreeRebirth from '../libs/isFreeRebirth';
 
 const USERSTATSLIST = ['per', 'int', 'con', 'str', 'points', 'gp', 'exp', 'mp'];
 
-module.exports = function rebirth (user, tasks = [], req = {}, analytics) {
+module.exports = function rebirth (user, tasks = [], req = {}) {
   const notFree = !isFreeRebirth(user);
 
   if (user.balance < 1.5 && notFree) {
     throw new NotAuthorized(i18n.t('notEnoughGems', req.language));
   }
 
-  let analyticsData = {
-    uuid: user._id,
-    category: 'behavior',
-  };
-
   if (notFree) {
     user.balance -= 1.5;
-    analyticsData.acquireMethod = 'Gems';
-    analyticsData.gemCost = 6;
-  } else {
-    analyticsData.gemCost = 0;
-    analyticsData.acquireMethod = '> 100';
-  }
-
-  if (analytics) {
-    analyticsData.headers = req.headers;
-    analytics.track('Rebirth', analyticsData);
   }
 
   let lvl = capByLevel(user.stats.lvl);
diff --git a/website/common/script/ops/releaseBoth.js b/website/common/script/ops/releaseBoth.js
index 75aa65abd7..9722d4e952 100644
--- a/website/common/script/ops/releaseBoth.js
+++ b/website/common/script/ops/releaseBoth.js
@@ -22,21 +22,6 @@ module.exports = function releaseBoth (user, req = {}) {
   let giveBeastMasterAchievement = true;
   let giveMountMasterAchievement = true;
 
-  // @TODO: We are only offering the free version now
-  // if (!user.achievements.triadBingo) {
-  //   if (analytics) {
-  //     analytics.track('release pets & mounts', {
-  //       uuid: user._id,
-  //       acquireMethod: 'Gems',
-  //       gemCost: 6,
-  //       category: 'behavior',
-  //       headers: req.headers,
-  //     });
-  //   }
-  //
-  //   user.balance -= 1.5;
-  // }
-
   let mountInfo = content.mountInfo[user.items.currentMount];
 
   if (mountInfo && mountInfo.type === 'drop') {
diff --git a/website/common/script/ops/releaseMounts.js b/website/common/script/ops/releaseMounts.js
index adb9d96dfd..8cd3e11625 100644
--- a/website/common/script/ops/releaseMounts.js
+++ b/website/common/script/ops/releaseMounts.js
@@ -5,7 +5,7 @@ import {
   NotAuthorized,
 } from '../libs/errors';
 
-module.exports = function releaseMounts (user, req = {}, analytics) {
+module.exports = function releaseMounts (user, req = {}) {
   if (user.balance < 1) {
     throw new NotAuthorized(i18n.t('notEnoughGems', req.language));
   }
@@ -39,16 +39,6 @@ module.exports = function releaseMounts (user, req = {}, analytics) {
     user.achievements.mountMasterCount++;
   }
 
-  if (analytics) {
-    analytics.track('release mounts', {
-      uuid: user._id,
-      acquireMethod: 'Gems',
-      gemCost: 4,
-      category: 'behavior',
-      headers: req.headers,
-    });
-  }
-
   return [
     user.items.mounts,
     i18n.t('mountsReleased'),
diff --git a/website/common/script/ops/releasePets.js b/website/common/script/ops/releasePets.js
index 0764fddb62..955a91f4a0 100644
--- a/website/common/script/ops/releasePets.js
+++ b/website/common/script/ops/releasePets.js
@@ -5,7 +5,7 @@ import {
   NotAuthorized,
 } from '../libs/errors';
 
-module.exports = function releasePets (user, req = {}, analytics) {
+module.exports = function releasePets (user, req = {}) {
   if (user.balance < 1) {
     throw new NotAuthorized(i18n.t('notEnoughGems', req.language));
   }
@@ -39,16 +39,6 @@ module.exports = function releasePets (user, req = {}, analytics) {
     user.achievements.beastMasterCount++;
   }
 
-  if (analytics) {
-    analytics.track('release pets', {
-      uuid: user._id,
-      acquireMethod: 'Gems',
-      gemCost: 4,
-      category: 'behavior',
-      headers: req.headers,
-    });
-  }
-
   return [
     user.items.pets,
     i18n.t('petsReleased'),
diff --git a/website/common/script/ops/reroll.js b/website/common/script/ops/reroll.js
index 9f8da0c839..ffe9e2c5c0 100644
--- a/website/common/script/ops/reroll.js
+++ b/website/common/script/ops/reroll.js
@@ -4,7 +4,7 @@ import {
   NotAuthorized,
 } from '../libs/errors';
 
-module.exports = function reroll (user, tasks = [], req = {}, analytics) {
+module.exports = function reroll (user, tasks = [], req = {}) {
   if (user.balance < 1) {
     throw new NotAuthorized(i18n.t('notEnoughGems', req.language));
   }
@@ -20,16 +20,6 @@ module.exports = function reroll (user, tasks = [], req = {}, analytics) {
     }
   });
 
-  if (analytics) {
-    analytics.track('Fortify Potion', {
-      uuid: user._id,
-      acquireMethod: 'Gems',
-      gemCost: 4,
-      category: 'behavior',
-      headers: req.headers,
-    });
-  }
-
   return [
     {user, tasks},
     i18n.t('fortifyComplete'),
diff --git a/website/common/script/ops/revive.js b/website/common/script/ops/revive.js
index 14ad3d1ddd..8714b0d356 100644
--- a/website/common/script/ops/revive.js
+++ b/website/common/script/ops/revive.js
@@ -12,7 +12,7 @@ import predictableRandom from '../fns/predictableRandom';
 import { removePinnedGearByClass, addPinnedGearByClass, addPinnedGear } from './pinnedGearUtils';
 import getItemInfo from '../libs/getItemInfo';
 
-module.exports = function revive (user, req = {}, analytics) {
+module.exports = function revive (user, req = {}) {
   if (user.stats.hp > 0) {
     throw new NotAuthorized(i18n.t('cannotRevive', req.language));
   }
@@ -105,16 +105,6 @@ module.exports = function revive (user, req = {}, analytics) {
     message = i18n.t('messageLostItem', { itemText: item.text(req.language)}, req.language);
   }
 
-  if (analytics) {
-    analytics.track('Death', {
-      uuid: user._id,
-      lostItem,
-      gaLabel: lostItem,
-      category: 'behavior',
-      headers: req.headers,
-    });
-  }
-
   return [
     user.items,
     message,
diff --git a/website/common/script/ops/scoreTask.js b/website/common/script/ops/scoreTask.js
index abe6ccf0fc..48baa4a2af 100644
--- a/website/common/script/ops/scoreTask.js
+++ b/website/common/script/ops/scoreTask.js
@@ -327,7 +327,6 @@ module.exports = function scoreTask (options = {}, req = {}) {
     }
   }
 
-  req.yesterDailyScored = task.yesterDailyScored;
-  updateStats(user, stats, req);
+  updateStats(user, stats);
   return [delta];
 };
diff --git a/website/common/script/ops/sleep.js b/website/common/script/ops/sleep.js
index e80f766b0a..48a283ce29 100644
--- a/website/common/script/ops/sleep.js
+++ b/website/common/script/ops/sleep.js
@@ -1,14 +1,4 @@
-module.exports = function sleep (user, req = {}, analytics) {
+module.exports = function sleep (user) {
   user.preferences.sleep = !user.preferences.sleep;
-
-  if (analytics) {
-    analytics.track('sleep', {
-      uuid: user._id,
-      status: user.preferences.sleep,
-      category: 'behavior',
-      headers: req.headers,
-    });
-  }
-
   return [user.preferences.sleep];
 };
diff --git a/website/common/script/ops/unlock.js b/website/common/script/ops/unlock.js
index 7adbac48de..bbdb7ea6fc 100644
--- a/website/common/script/ops/unlock.js
+++ b/website/common/script/ops/unlock.js
@@ -15,7 +15,7 @@ import content from '../content/index';
 
 // If item is already purchased -> equip it
 // Otherwise unlock it
-module.exports = function unlock (user, req = {}, analytics) {
+module.exports = function unlock (user, req = {}) {
   let path = get(req.query, 'path');
 
   if (!path) {
@@ -117,18 +117,6 @@ module.exports = function unlock (user, req = {}, analytics) {
     }
 
     user.balance -= cost;
-
-    if (analytics) {
-      analytics.track('acquire item', {
-        uuid: user._id,
-        itemKey: path,
-        itemType: 'customization',
-        acquireMethod: 'Gems',
-        gemCost: cost / 0.25,
-        category: 'behavior',
-        headers: req.headers,
-      });
-    }
   }
 
   let response = [
diff --git a/website/server/controllers/api-v3/auth.js b/website/server/controllers/api-v3/auth.js
index 9d5d2a4977..3e3544aa34 100644
--- a/website/server/controllers/api-v3/auth.js
+++ b/website/server/controllers/api-v3/auth.js
@@ -5,7 +5,6 @@ import {
   authWithHeaders,
 } from '../../middlewares/auth';
 import { model as User } from '../../models/user';
-import common from '../../../common';
 import {
   NotAuthorized,
   BadRequest,
@@ -16,8 +15,6 @@ import { validatePasswordResetCodeAndFindUser, convertToBcrypt} from '../../libs
 import { encrypt } from '../../libs/encryption';
 import {
   loginRes,
-  hasBackupAuth,
-  loginSocial,
   registerLocal,
 } from '../../libs/auth';
 import {verifyUsername} from '../../libs/user/validation';
@@ -29,7 +26,7 @@ let api = {};
 
 /**
  * @api {post} /api/v3/user/auth/local/register Register
- * @apiDescription Register a new user with email, login name, and password or attach local auth to a social user
+ * @apiDescription Register a new user with email, login name, and password
  * @apiName UserRegisterLocal
  * @apiGroup User
  *
@@ -38,7 +35,7 @@ let api = {};
  * @apiParam (Body) {String} password Password for the new user
  * @apiParam (Body) {String} confirmPassword Password confirmation
  *
- * @apiSuccess {Object} data The user object, if local auth was just attached to a social user then only user.auth.local
+ * @apiSuccess {Object} data The user object
  */
 api.registerLocal = {
   method: 'POST',
@@ -98,8 +95,7 @@ api.loginLocal = {
     // load the entire user because we may have to save it to convert the password to bcrypt
     let user = await User.findOne(login).exec();
 
-    // if user is using social login, then user will not have a hashed_password stored
-    if (!user || !user.auth.local.hashed_password) throw new NotAuthorized(res.t('invalidLoginCredentialsLong'));
+    if (!user.auth.local.hashed_password) throw new NotAuthorized(res.t('invalidLoginCredentialsLong'));
 
     let isValidPassword;
 
@@ -117,30 +113,10 @@ api.loginLocal = {
       await user.save();
     }
 
-    res.analytics.track('login', {
-      category: 'behaviour',
-      type: 'local',
-      gaLabel: 'local',
-      uuid: user._id,
-      headers: req.headers,
-    });
-
     return loginRes(user, ...arguments);
   },
 };
 
-// Called as a callback by Facebook (or other social providers). Internal route
-api.loginSocial = {
-  method: 'POST',
-  middlewares: [authWithHeaders({
-    optional: true,
-  })],
-  url: '/user/auth/social',
-  async handler (req, res) {
-    return await loginSocial(req, res);
-  },
-};
-
 /**
  * @api {put} /api/v3/user/auth/update-username Update username
  * @apiDescription Update the username of a local user
@@ -403,33 +379,4 @@ api.resetPasswordSetNewOne = {
   },
 };
 
-/**
- * @api {delete} /api/v3/user/auth/social/:network Delete social authentication method
- * @apiDescription Remove a social authentication method (only facebook supported) from a user profile. The user must have local authentication enabled
- * @apiName UserDeleteSocial
- * @apiGroup User
- *
- * @apiSuccess {Object} data Empty object
- */
-api.deleteSocial = {
-  method: 'DELETE',
-  url: '/user/auth/social/:network',
-  middlewares: [authWithHeaders()],
-  async handler (req, res) {
-    let user = res.locals.user;
-    let network = req.params.network;
-    let isSupportedNetwork = common.constants.SUPPORTED_SOCIAL_NETWORKS.find(supportedNetwork => {
-      return supportedNetwork.key === network;
-    });
-    if (!isSupportedNetwork) throw new BadRequest(res.t('unsupportedNetwork'));
-    if (!hasBackupAuth(user, network)) throw new NotAuthorized(res.t('cantDetachSocial'));
-    let unset = {
-      [`auth.${network}`]: 1,
-    };
-    await User.update({_id: user._id}, {$unset: unset}).exec();
-
-    res.respond(200, {});
-  },
-};
-
 module.exports = api;
diff --git a/website/server/controllers/api-v3/challenges.js b/website/server/controllers/api-v3/challenges.js
index f0a60396a9..00b4ebd310 100644
--- a/website/server/controllers/api-v3/challenges.js
+++ b/website/server/controllers/api-v3/challenges.js
@@ -202,16 +202,6 @@ api.createChallenge = {
     };
     response.group = getChallengeGroupResponse(group);
 
-    res.analytics.track('challenge create', {
-      uuid: user._id,
-      hitType: 'event',
-      category: 'behavior',
-      challengeID: response._id,
-      groupID: group._id,
-      groupName: group.privacy === 'private' ? null : group.name,
-      groupType: group._id === TAVERN_ID ? 'tavern' : group.type,
-    });
-
     res.respond(201, response);
   },
 };
@@ -261,16 +251,6 @@ api.joinChallenge = {
     let chalLeader = await User.findById(response.leader).select(nameFields).exec();
     response.leader = chalLeader ? chalLeader.toJSON({minimize: true}) : null;
 
-    res.analytics.track('challenge join', {
-      uuid: user._id,
-      hitType: 'event',
-      category: 'behavior',
-      challengeID: challenge._id,
-      groupID: group._id,
-      groupName: group.privacy === 'private' ? null : group.name,
-      groupType: group._id === TAVERN_ID ? 'tavern' : group.type,
-    });
-
     res.respond(200, response);
   },
 };
@@ -308,16 +288,6 @@ api.leaveChallenge = {
     // Unlink challenge's tasks from user's tasks and save the challenge
     await challenge.unlinkTasks(user, keep);
 
-    res.analytics.track('challenge leave', {
-      uuid: user._id,
-      hitType: 'event',
-      category: 'behavior',
-      challengeID: challenge._id,
-      groupID: challenge.group._id,
-      groupName: challenge.group.privacy === 'private' ? null : challenge.group.name,
-      groupType: challenge.group._id === TAVERN_ID ? 'tavern' : challenge.group.type,
-    });
-
     res.respond(200, {});
   },
 };
@@ -714,16 +684,6 @@ api.deleteChallenge = {
     // Close channel in background, some ops are run in the background without `await`ing
     await challenge.closeChal({broken: 'CHALLENGE_DELETED'});
 
-    res.analytics.track('challenge delete', {
-      uuid: user._id,
-      hitType: 'event',
-      category: 'behavior',
-      challengeID: challenge._id,
-      groupID: challenge.group._id,
-      groupName: challenge.group.privacy === 'private' ? null : challenge.group.name,
-      groupType: challenge.group._id === TAVERN_ID ? 'tavern' : challenge.group.type,
-    });
-
     res.respond(200, {});
   },
 };
@@ -763,17 +723,6 @@ api.selectChallengeWinner = {
     // Close channel in background, some ops are run in the background without `await`ing
     await challenge.closeChal({broken: 'CHALLENGE_CLOSED', winner});
 
-    res.analytics.track('challenge close', {
-      uuid: user._id,
-      hitType: 'event',
-      category: 'behavior',
-      challengeID: challenge._id,
-      challengeWinnerID: winner._id,
-      groupID: challenge.group._id,
-      groupName: challenge.group.privacy === 'private' ? null : challenge.group.name,
-      groupType: challenge.group._id === TAVERN_ID ? 'tavern' : challenge.group.type,
-    });
-
     res.respond(200, {});
   },
 };
diff --git a/website/server/controllers/api-v3/chat.js b/website/server/controllers/api-v3/chat.js
index e56337e76d..4534e45f39 100644
--- a/website/server/controllers/api-v3/chat.js
+++ b/website/server/controllers/api-v3/chat.js
@@ -10,7 +10,6 @@ import {
 } from '../../libs/errors';
 import { removeFromArray } from '../../libs/collectionManipulators';
 import { getUserInfo, getGroupUrl, sendTxn } from '../../libs/email';
-import slack from '../../libs/slack';
 import { chatReporterFactory } from '../../libs/chatReporting/chatReporterFactory';
 import { getAuthorEmailFromMessage} from '../../libs/chat';
 import nconf from 'nconf';
@@ -89,8 +88,6 @@ function getBannedWordsFromText (message) {
   return getMatchesByWordArray(message, bannedWords);
 }
 
-
-const mentionRegex = new RegExp('\\B@[-\\w]+', 'g');
 /**
  * @api {post} /api/v3/groups/:groupId/chat Post chat message to a group
  * @apiName PostChat
@@ -150,14 +147,6 @@ api.postChat = {
 
       sendTxn(FLAG_REPORT_EMAILS, 'slur-report-to-mods', report);
 
-      // Slack the mods
-      slack.sendSlurNotification({
-        authorEmail,
-        author: user,
-        group,
-        message,
-      });
-
       throw new BadRequest(res.t('bannedSlurUsed'));
     }
 
@@ -213,14 +202,6 @@ api.postChat = {
       ];
 
       sendTxn(FLAG_REPORT_EMAILS, 'shadow-muted-post-report-to-mods', report);
-
-      // Slack the mods
-      slack.sendShadowMutedPostNotification({
-        authorEmail,
-        author: user,
-        group,
-        message,
-      });
     }
 
     const newChatMessage = group.sendChat({message: req.body.message, user, flagCount, metaData: null, client, translate: res.t});
@@ -233,27 +214,6 @@ api.postChat = {
 
     await Promise.all(toSave);
 
-    let analyticsObject = {
-      uuid: user._id,
-      hitType: 'event',
-      category: 'behavior',
-      groupType: group.type,
-      privacy: group.privacy,
-      headers: req.headers,
-    };
-
-    const mentions = req.body.message.match(mentionRegex);
-    if (mentions) {
-      analyticsObject.mentionsCount = mentions.length;
-    } else {
-      analyticsObject.mentionsCount = 0;
-    }
-    if (group.privacy === 'public') {
-      analyticsObject.groupName = group.name;
-    }
-
-    res.analytics.track('group chat', analyticsObject);
-
     if (chatUpdated) {
       res.respond(200, {chat: chatRes.chat});
     } else {
diff --git a/website/server/controllers/api-v3/coupon.js b/website/server/controllers/api-v3/coupon.js
index 7acc406a44..8a441b55e4 100644
--- a/website/server/controllers/api-v3/coupon.js
+++ b/website/server/controllers/api-v3/coupon.js
@@ -58,7 +58,7 @@ api.getCoupons = {
  * @apiGroup Coupon
  * @apiPermission sudo
  *
- * @apiParam (Path) {String=wondercon,google_6mo} event The event for which the coupon should be generated
+ * @apiParam (Path) {String=wondercon} event The event for which the coupon should be generated
  * @apiParam (Query) {Number} count The number of coupon codes to generate
  *
  * @apiSuccess {Array} data Generated coupons
diff --git a/website/server/controllers/api-v3/groups.js b/website/server/controllers/api-v3/groups.js
index 41e1884ae5..262361ab39 100644
--- a/website/server/controllers/api-v3/groups.js
+++ b/website/server/controllers/api-v3/groups.js
@@ -22,10 +22,6 @@ import {
   inviteByUserName,
 } from '../../libs/invites';
 import common from '../../../common';
-import payments from '../../libs/payments/payments';
-import stripePayments from '../../libs/payments/stripe';
-import amzLib from '../../libs/payments/amazon';
-import shared from '../../../common';
 import apiError from '../../libs/apiError';
 
 const MAX_EMAIL_INVITES_BY_USER = 200;
@@ -147,22 +143,6 @@ api.createGroup = {
       profile: {name: user.profile.name},
     };
 
-    let analyticsObject = {
-      uuid: user._id,
-      hitType: 'event',
-      category: 'behavior',
-      owner: true,
-      groupType: savedGroup.type,
-      privacy: savedGroup.privacy,
-      headers: req.headers,
-    };
-
-    if (savedGroup.privacy === 'public') {
-      analyticsObject.groupName = savedGroup.name;
-    }
-
-    res.analytics.track('join group', analyticsObject);
-
     res.respond(201, response); // do not remove chat flags data as we've just created the group
   },
 };
@@ -195,54 +175,6 @@ api.createGroupPlan = {
     let results = await Promise.all([user.save(), group.save()]);
     let savedGroup = results[1];
 
-    // Analytics
-    let analyticsObject = {
-      uuid: user._id,
-      hitType: 'event',
-      category: 'behavior',
-      owner: true,
-      groupType: savedGroup.type,
-      privacy: savedGroup.privacy,
-      headers: req.headers,
-    };
-    res.analytics.track('join group', analyticsObject);
-
-    if (req.body.paymentType === 'Stripe') {
-      let token = req.body.id;
-      let gift = req.query.gift ? JSON.parse(req.query.gift) : undefined;
-      let sub = req.query.sub ? shared.content.subscriptionBlocks[req.query.sub] : false;
-      let groupId = savedGroup._id;
-      let email = req.body.email;
-      let headers = req.headers;
-      let coupon = req.query.coupon;
-
-      await stripePayments.checkout({
-        token,
-        user,
-        gift,
-        sub,
-        groupId,
-        email,
-        headers,
-        coupon,
-      });
-    } else if (req.body.paymentType === 'Amazon') {
-      let billingAgreementId = req.body.billingAgreementId;
-      let sub = req.body.subscription ? shared.content.subscriptionBlocks[req.body.subscription] : false;
-      let coupon = req.body.coupon;
-      let groupId = savedGroup._id;
-      let headers = req.headers;
-
-      await amzLib.subscribe({
-        billingAgreementId,
-        sub,
-        coupon,
-        user,
-        groupId,
-        headers,
-      });
-    }
-
     // Instead of populate we make a find call manually because of https://github.com/Automattic/mongoose/issues/3833
     // await Q.ninvoke(savedGroup, 'populate', ['leader', nameFields]); // doc.populate doesn't return a promise
     let response = savedGroup.toJSON();
@@ -618,10 +550,7 @@ api.joinGroup = {
 
     promises = await Promise.all(promises);
 
-    if (group.hasNotCancelled())  {
-      await payments.addSubToGroupUser(user, group);
-      await group.updateGroupPlan();
-    }
+    if (group.hasNotCancelled()) await group.updateGroupPlan();
 
     let response = await Group.toJSONCleanChat(promises[0], user);
     let leader = await User.findById(response.leader).select(nameFields).exec();
@@ -629,22 +558,6 @@ api.joinGroup = {
       response.leader = leader.toJSON({minimize: true});
     }
 
-    let analyticsObject = {
-      uuid: user._id,
-      hitType: 'event',
-      category: 'behavior',
-      owner: false,
-      groupType: group.type,
-      privacy: group.privacy,
-      headers: req.headers,
-    };
-
-    if (group.privacy === 'public') {
-      analyticsObject.groupName = group.name;
-    }
-
-    res.analytics.track('join group', analyticsObject);
-
     res.respond(200, response);
   },
 };
@@ -779,12 +692,7 @@ api.leaveGroup = {
       if (guildIndex >= 0) user.guilds.splice(guildIndex, 1);
     }
 
-    let isMemberOfGroupPlan = await user.isMemberOfGroupPlan();
-    if (!isMemberOfGroupPlan) {
-      await payments.cancelGroupSubscriptionForUser(user, group);
-    }
-
-    if (group.hasNotCancelled()) await group.updateGroupPlan(true);
+    if (group.hasNotCancelled()) await group.updateGroupPlan();
     res.respond(200, {});
   },
 };
@@ -916,8 +824,7 @@ api.removeGroupMember = {
     ]);
 
     if (isInGroup && group.hasNotCancelled())  {
-      await group.updateGroupPlan(true);
-      await payments.cancelGroupSubscriptionForUser(member, group, true);
+      await group.updateGroupPlan();
     }
 
     res.respond(200, {});
@@ -1060,16 +967,6 @@ api.inviteToGroup = {
       results.push(...usernameResults);
     }
 
-    let analyticsObject = {
-      uuid: user._id,
-      hitType: 'event',
-      category: 'behavior',
-      groupType: group.type,
-      headers: req.headers,
-    };
-
-    res.analytics.track('group invite', analyticsObject);
-
     res.respond(200, results);
   },
 };
diff --git a/website/server/controllers/api-v3/members.js b/website/server/controllers/api-v3/members.js
index 3623477205..9c59c17a43 100644
--- a/website/server/controllers/api-v3/members.js
+++ b/website/server/controllers/api-v3/members.js
@@ -18,7 +18,6 @@ import {
   getUserInfo,
   sendTxn as sendTxnEmail,
 } from '../../libs/email';
-import { sendNotification as sendPushNotification } from '../../libs/pushNotifications';
 import { achievements } from '../../../../website/common/';
 import {sentMessage} from '../../libs/inbox';
 
@@ -642,7 +641,7 @@ api.sendPrivateMessage = {
     const objections = sender.getObjectionsToInteraction('send-private-message', receiver);
     if (objections.length > 0 && !sender.isAdmin()) throw new NotAuthorized(res.t(objections[0]));
 
-    const messageSent = await sentMessage(sender, receiver, message, res.t);
+    const messageSent = await sentMessage(sender, receiver, message);
 
     res.respond(200, {message: messageSent});
   },
@@ -722,15 +721,6 @@ api.transferGems = {
         {name: 'X_GEMS_GIFTED', content: gemAmount},
       ]);
     }
-    if (receiver.preferences.pushNotifications.giftedGems !== false) {
-      sendPushNotification(receiver,
-        {
-          title: res.t('giftedGems', receiverLang),
-          message: res.t('giftedGemsInfo', {amount: gemAmount, name: byUsername}, receiverLang),
-          identifier: 'giftedGems',
-          payload: {replyTo: sender._id},
-        });
-    }
 
     res.respond(200, {});
   },
diff --git a/website/server/controllers/api-v3/quests.js b/website/server/controllers/api-v3/quests.js
index f43b5f7f6b..79fc1f036e 100644
--- a/website/server/controllers/api-v3/quests.js
+++ b/website/server/controllers/api-v3/quests.js
@@ -1,6 +1,5 @@
 import _ from 'lodash';
 import { authWithHeaders } from '../../middlewares/auth';
-import analytics from '../../libs/analyticsService';
 import {
   model as Group,
   basicFields as basicGroupFields,
@@ -16,7 +15,6 @@ import {
   sendTxn as sendTxnEmail,
 } from '../../libs/email';
 import common from '../../../common';
-import { sendNotification as sendPushNotification } from '../../libs/pushNotifications';
 import apiError from '../../libs/apiError';
 
 const questScrolls = common.content.quests;
@@ -79,7 +77,7 @@ api.inviteToQuest = {
       'party._id': group._id,
       _id: {$ne: user._id},
     })
-      .select('auth.facebook auth.google auth.local preferences.emailNotifications preferences.pushNotifications preferences.language profile.name pushDevices')
+      .select('auth.local preferences.emailNotifications profile.name')
       .exec();
 
     group.markModified('quest');
@@ -119,19 +117,6 @@ api.inviteToQuest = {
     // send out invites
     let inviterVars = getUserInfo(user, ['name', 'email']);
     let membersToEmail = members.filter(member => {
-      // send push notifications while filtering members before sending emails
-      if (member.preferences.pushNotifications.invitedQuest !== false) {
-        sendPushNotification(
-          member,
-          {
-            title: quest.text(member.preferences.language),
-            message: res.t('questInvitationNotificationInfo', member.preferences.language),
-            identifier: 'questInvitation',
-            category: 'questInvitation',
-          }
-        );
-      }
-
       return member.preferences.emailNotifications.invitedQuest !== false;
     });
     sendTxnEmail(membersToEmail, `invite-${quest.boss ? 'boss' : 'collection'}-quest`, [
@@ -139,17 +124,6 @@ api.inviteToQuest = {
       {name: 'INVITER', content: inviterVars.name},
       {name: 'PARTY_URL', content: '/party'},
     ]);
-
-    // track that the inviting user has accepted the quest
-    analytics.track('quest', {
-      category: 'behavior',
-      owner: true,
-      response: 'accept',
-      gaLabel: 'accept',
-      questName: questKey,
-      uuid: user._id,
-      headers: req.headers,
-    });
   },
 };
 
@@ -198,17 +172,6 @@ api.acceptQuest = {
     let savedGroup = await group.save();
 
     res.respond(200, savedGroup.quest);
-
-    // track that a user has accepted the quest
-    analytics.track('quest', {
-      category: 'behavior',
-      owner: false,
-      response: 'accept',
-      gaLabel: 'accept',
-      questName: group.quest.key,
-      uuid: user._id,
-      headers: req.headers,
-    });
   },
 };
 
@@ -258,16 +221,6 @@ api.rejectQuest = {
     let savedGroup = await group.save();
 
     res.respond(200, savedGroup.quest);
-
-    analytics.track('quest', {
-      category: 'behavior',
-      owner: false,
-      response: 'reject',
-      gaLabel: 'reject',
-      questName: group.quest.key,
-      uuid: user._id,
-      headers: req.headers,
-    });
   },
 };
 
@@ -317,16 +270,6 @@ api.forceStart = {
     ]);
 
     res.respond(200, savedGroup.quest);
-
-    analytics.track('quest', {
-      category: 'behavior',
-      owner: user._id === group.quest.leader,
-      response: 'force-start',
-      gaLabel: 'force-start',
-      questName: group.quest.key,
-      uuid: user._id,
-      headers: req.headers,
-    });
   },
 };
 
diff --git a/website/server/controllers/api-v3/tasks.js b/website/server/controllers/api-v3/tasks.js
index 0eb220767f..c780161563 100644
--- a/website/server/controllers/api-v3/tasks.js
+++ b/website/server/controllers/api-v3/tasks.js
@@ -23,7 +23,6 @@ import {
 import common from '../../../common';
 import _ from 'lodash';
 import logger from '../../libs/logger';
-import moment from 'moment';
 import apiError from '../../libs/apiError';
 
 function canNotEditTasks (group, user, assignedUserId) {
@@ -166,17 +165,6 @@ api.createUserTasks = {
     res.respond(201, tasks.length === 1 ? tasks[0] : tasks);
 
     tasks.forEach((task) => {
-      // Track when new users (first 7 days) create tasks
-      if (moment().diff(user.auth.timestamps.created, 'days') < 7) {
-        res.analytics.track('task create', {
-          uuid: user._id,
-          hitType: 'event',
-          category: 'behavior',
-          taskType: task.type,
-          headers: req.headers,
-        });
-      }
-
       taskActivityWebhook.send(user, {
         type: 'created',
         task,
@@ -252,16 +240,6 @@ api.createChallengeTasks = {
 
     // If adding tasks to a challenge -> sync users
     if (challenge) challenge.addTasks(tasks);
-
-    tasks.forEach((task) => {
-      res.analytics.track('task create', {
-        uuid: user._id,
-        hitType: 'event',
-        category: 'behavior',
-        taskType: task.type,
-        challengeID: challenge._id,
-      });
-    });
   },
 };
 
@@ -587,7 +565,6 @@ api.scoreTask = {
 
         let managers = await User.find({_id: managerIds}, 'notifications preferences').exec(); // Use this method so we can get access to notifications
 
-        // @TODO: we can use the User.pushNotification function because we need to ensure notifications are translated
         let managerPromises = [];
         managers.forEach((manager) => {
           manager.addNotification('GROUP_TASK_APPROVAL', {
@@ -615,7 +592,7 @@ api.scoreTask = {
 
     let [delta] = common.ops.scoreTask({task, user, direction}, req);
     // Drop system (don't run on the client, as it would only be discarded since ops are sent to the API, not the results)
-    if (direction === 'up') common.fns.randomDrop(user, {task, delta}, req, res.analytics);
+    if (direction === 'up') common.fns.randomDrop(user, {task, delta}, req);
 
     // If a todo was completed or uncompleted move it in or out of the user.tasksOrder.todos list
     // TODO move to common code?
@@ -690,18 +667,6 @@ api.scoreTask = {
         logger.error(e);
       }
     }
-
-    // Track when new users (first 7 days) score tasks
-    if (moment().diff(user.auth.timestamps.created, 'days') < 7) {
-      res.analytics.track('task score', {
-        uuid: user._id,
-        hitType: 'event',
-        category: 'behavior',
-        taskType: task.type,
-        direction,
-        headers: req.headers,
-      });
-    }
   },
 };
 
diff --git a/website/server/controllers/api-v3/tasks/groups.js b/website/server/controllers/api-v3/tasks/groups.js
index 27fcc62db4..05164b41aa 100644
--- a/website/server/controllers/api-v3/tasks/groups.js
+++ b/website/server/controllers/api-v3/tasks/groups.js
@@ -60,16 +60,6 @@ api.createGroupTasks = {
     let tasks = await createTasks(req, res, {user, group});
 
     res.respond(201, tasks.length === 1 ? tasks[0] : tasks);
-
-    tasks.forEach((task) => {
-      res.analytics.track('task create', {
-        uuid: user._id,
-        hitType: 'event',
-        category: 'behavior',
-        taskType: task.type,
-        groupID: group._id,
-      });
-    });
   },
 };
 
diff --git a/website/server/controllers/api-v3/user.js b/website/server/controllers/api-v3/user.js
index c1b721650e..70cd50820c 100644
--- a/website/server/controllers/api-v3/user.js
+++ b/website/server/controllers/api-v3/user.js
@@ -24,7 +24,6 @@ import nconf from 'nconf';
 import get from 'lodash/get';
 
 const TECH_ASSISTANCE_EMAIL = nconf.get('EMAILS_TECH_ASSISTANCE_EMAIL');
-const DELETE_CONFIRMATION = 'DELETE';
 
 /**
  * @apiDefine UserNotFound
@@ -56,7 +55,6 @@ let api = {};
  * Preferences (user selected prefs)
  * Profile (name, photo url, blurb)
  * Purchased (includes purchase history, gem purchased items, plans)
- * PushDevices (identifiers for mobile devices authorized)
  * Stats (standard RPG stats, class, buffs, xp, etc..)
  * Tags
  * TasksOrder (list of all ids for dailys, habits, rewards and todos)
@@ -261,8 +259,6 @@ api.deleteUser = {
     if (user.auth.local.hashed_password && user.auth.local.email) {
       let isValidPassword = await passwordUtils.compare(user, password);
       if (!isValidPassword) throw new NotAuthorized(res.t('wrongPassword'));
-    } else if ((user.auth.facebook.id || user.auth.google.id) && password !== DELETE_CONFIRMATION) {
-      throw new NotAuthorized(res.t('incorrectDeletePhrase', {magicWord: 'DELETE'}));
     }
 
     let feedback = req.body.feedback;
@@ -300,12 +296,6 @@ api.deleteUser = {
       ]);
     }
 
-    res.analytics.track('account delete', {
-      uuid: user._id,
-      hitType: 'event',
-      category: 'behavior',
-    });
-
     res.respond(200, {});
   },
 };
@@ -347,8 +337,6 @@ api.getUserAnonymized = {
     delete user.apiToken;
     if (user.auth) {
       delete user.auth.local;
-      delete user.auth.facebook;
-      delete user.auth.google;
     }
     delete user.newMessages;
     delete user.profile;
@@ -412,7 +400,7 @@ api.sleep = {
   url: '/user/sleep',
   async handler (req, res) {
     let user = res.locals.user;
-    let sleepRes = common.ops.sleep(user, req, res.analytics);
+    let sleepRes = common.ops.sleep(user);
     await user.save();
     res.respond(200, ...sleepRes);
   },
@@ -472,7 +460,7 @@ api.buy = {
     let quantity = 1;
     if (req.body.quantity) quantity = req.body.quantity;
     req.quantity = quantity;
-    buyRes = common.ops.buy(user, req, res.analytics);
+    buyRes = common.ops.buy(user, req);
 
     await user.save();
     res.respond(200, ...buyRes);
@@ -520,7 +508,7 @@ api.buyGear = {
   url: '/user/buy-gear/:key',
   async handler (req, res) {
     let user = res.locals.user;
-    let buyGearRes = common.ops.buy(user, req, res.analytics);
+    let buyGearRes = common.ops.buy(user, req);
     await user.save();
     res.respond(200, ...buyGearRes);
   },
@@ -562,7 +550,7 @@ api.buyArmoire = {
     let user = res.locals.user;
     req.type = 'armoire';
     req.params.key = 'armoire';
-    let buyArmoireResponse = common.ops.buy(user, req, res.analytics);
+    let buyArmoireResponse = common.ops.buy(user, req);
     await user.save();
     res.respond(200, ...buyArmoireResponse);
   },
@@ -602,7 +590,7 @@ api.buyHealthPotion = {
     let user = res.locals.user;
     req.type = 'potion';
     req.params.key = 'potion';
-    let buyHealthPotionResponse = common.ops.buy(user, req, res.analytics);
+    let buyHealthPotionResponse = common.ops.buy(user, req);
     await user.save();
     res.respond(200, ...buyHealthPotionResponse);
   },
@@ -643,7 +631,7 @@ api.buyMysterySet = {
   async handler (req, res) {
     let user = res.locals.user;
     req.type = 'mystery';
-    let buyMysterySetRes = common.ops.buy(user, req, res.analytics);
+    let buyMysterySetRes = common.ops.buy(user, req);
     await user.save();
     res.respond(200, ...buyMysterySetRes);
   },
@@ -686,7 +674,7 @@ api.buyQuest = {
   async handler (req, res) {
     let user = res.locals.user;
     req.type = 'quest';
-    let buyQuestRes = common.ops.buy(user, req, res.analytics);
+    let buyQuestRes = common.ops.buy(user, req);
     await user.save();
     res.respond(200, ...buyQuestRes);
   },
@@ -900,7 +888,7 @@ api.changeClass = {
   url: '/user/change-class',
   async handler (req, res) {
     let user = res.locals.user;
-    let changeClassRes = common.ops.changeClass(user, req, res.analytics);
+    let changeClassRes = common.ops.changeClass(user, req);
     await user.save();
     res.respond(200, ...changeClassRes);
   },
@@ -969,7 +957,7 @@ api.purchase = {
     if (req.body.quantity) quantity = req.body.quantity;
     req.quantity = quantity;
 
-    let purchaseRes = common.ops.buy(user, req, res.analytics);
+    let purchaseRes = common.ops.buy(user, req);
     await user.save();
     res.respond(200, ...purchaseRes);
   },
@@ -1005,7 +993,7 @@ api.userPurchaseHourglass = {
     let user = res.locals.user;
     const quantity = req.body.quantity || 1;
     if (quantity < 1 || !Number.isInteger(quantity)) throw new BadRequest(res.t('invalidQuantity'), req.language);
-    let purchaseHourglassRes = common.ops.buy(user, req, res.analytics, {quantity, hourglass: true});
+    let purchaseHourglassRes = common.ops.buy(user, req, {quantity, hourglass: true});
     await user.save();
     res.respond(200, ...purchaseHourglassRes);
   },
@@ -1099,7 +1087,7 @@ api.userOpenMysteryItem = {
   url: '/user/open-mystery-item',
   async handler (req, res) {
     let user = res.locals.user;
-    let openMysteryItemRes = common.ops.openMysteryItem(user, req, res.analytics);
+    let openMysteryItemRes = common.ops.openMysteryItem(user, req);
     await user.save();
     res.respond(200, ...openMysteryItemRes);
   },
@@ -1131,7 +1119,7 @@ api.userReleasePets = {
   url: '/user/release-pets',
   async handler (req, res) {
     let user = res.locals.user;
-    let releasePetsRes = common.ops.releasePets(user, req, res.analytics);
+    let releasePetsRes = common.ops.releasePets(user, req);
     await user.save();
     res.respond(200, ...releasePetsRes);
   },
@@ -1180,7 +1168,7 @@ api.userReleaseBoth = {
   url: '/user/release-both',
   async handler (req, res) {
     let user = res.locals.user;
-    let releaseBothRes = common.ops.releaseBoth(user, req, res.analytics);
+    let releaseBothRes = common.ops.releaseBoth(user, req);
     await user.save();
     res.respond(200, ...releaseBothRes);
   },
@@ -1216,7 +1204,7 @@ api.userReleaseMounts = {
   url: '/user/release-mounts',
   async handler (req, res) {
     let user = res.locals.user;
-    let releaseMountsRes = common.ops.releaseMounts(user, req, res.analytics);
+    let releaseMountsRes = common.ops.releaseMounts(user, req);
     await user.save();
     res.respond(200, ...releaseMountsRes);
   },
@@ -1289,7 +1277,7 @@ api.userUnlock = {
   url: '/user/unlock',
   async handler (req, res) {
     let user = res.locals.user;
-    let unlockRes = common.ops.unlock(user, req, res.analytics);
+    let unlockRes = common.ops.unlock(user, req);
     await user.save();
     res.respond(200, ...unlockRes);
   },
@@ -1315,7 +1303,7 @@ api.userRevive = {
   url: '/user/revive',
   async handler (req, res) {
     let user = res.locals.user;
-    let reviveRes = common.ops.revive(user, req, res.analytics);
+    let reviveRes = common.ops.revive(user, req);
     await user.save();
     res.respond(200, ...reviveRes);
   },
diff --git a/website/server/controllers/api-v4/auth.js b/website/server/controllers/api-v4/auth.js
index 05f8b6dd9b..55514c0275 100644
--- a/website/server/controllers/api-v4/auth.js
+++ b/website/server/controllers/api-v4/auth.js
@@ -56,7 +56,7 @@ api.verifyUsername = {
 
 /**
  * @api {post} /api/v4/user/auth/local/register Register
- * @apiDescription Register a new user with email, login name, and password or attach local auth to a social user
+ * @apiDescription Register a new user with email, login name, and password
  * @apiName UserRegisterLocal
  * @apiGroup User
  *
@@ -65,7 +65,7 @@ api.verifyUsername = {
  * @apiParam (Body) {String} password Password for the new user
  * @apiParam (Body) {String} confirmPassword Password confirmation
  *
- * @apiSuccess {Object} data The user object, if local auth was just attached to a social user then only user.auth.local
+ * @apiSuccess {Object} data The user object
  */
 api.registerLocal = {
   method: 'POST',
diff --git a/website/server/controllers/api-v4/members.js b/website/server/controllers/api-v4/members.js
index 57a1b39ddd..24cffe91dd 100644
--- a/website/server/controllers/api-v4/members.js
+++ b/website/server/controllers/api-v4/members.js
@@ -5,7 +5,7 @@ let api = {};
 
 /**
  * @api {post} /api/v4/members/flag-private-message/:messageId Flag a private message
- * @apiDescription An email and slack message are sent to the moderators about every flagged message.
+ * @apiDescription An email is sent to the moderators about every flagged message.
  * @apiName FlagPrivateMessage
  * @apiGroup Member
  *
diff --git a/website/server/controllers/api-v4/user.js b/website/server/controllers/api-v4/user.js
index 2474c31dc0..75f6890796 100644
--- a/website/server/controllers/api-v4/user.js
+++ b/website/server/controllers/api-v4/user.js
@@ -33,7 +33,6 @@ const api = {};
  * Preferences (user selected prefs)
  * Profile (name, photo url, blurb)
  * Purchased (includes purchase history, gem purchased items, plans)
- * PushDevices (identifiers for mobile devices authorized)
  * Stats (standard RPG stats, class, buffs, xp, etc..)
  * Tags
  * TasksOrder (list of all ids for dailys, habits, rewards and todos)
diff --git a/website/server/controllers/top-level/dataexport.js b/website/server/controllers/top-level/dataexport.js
index 39333edead..2b3388ae74 100644
--- a/website/server/controllers/top-level/dataexport.js
+++ b/website/server/controllers/top-level/dataexport.js
@@ -9,17 +9,7 @@ import _ from 'lodash';
 import csvStringify from '../../libs/csvStringify';
 import moment from 'moment';
 import * as js2xml from 'js2xmlparser';
-import Pageres from 'pageres';
-import nconf from 'nconf';
-import got from 'got';
 import md from 'habitica-markdown';
-import {
-  S3,
-} from '../../libs/aws';
-
-const S3_BUCKET = nconf.get('S3_BUCKET');
-
-const BASE_URL = nconf.get('BASE_URL');
 
 let api = {};
 
@@ -224,75 +214,6 @@ api.exportUserAvatarHtml = {
   },
 };
 
-/**
- * @api {get} /export/avatar-:uuid.png Render a user avatar as a PNG file
- * @apiName ExportUserAvatarPng
- * @apiGroup DataExport
- *
- * @apiParam (Path) {String} uuid The User ID of the user
- *
- * @apiSuccess {PNG} File A png file of the user's avatar.
- */
-api.exportUserAvatarPng = {
-  method: 'GET',
-  url: '/export/avatar-:memberId.png',
-  async handler (req, res) {
-    req.checkParams('memberId', res.t('memberIdRequired')).notEmpty().isUUID();
-
-    let validationErrors = req.validationErrors();
-    if (validationErrors) throw validationErrors;
-
-    let memberId = req.params.memberId;
-
-    let filename = `avatars/${memberId}.png`;
-    let s3url = `https://${S3_BUCKET}.s3.amazonaws.com/${filename}`;
-
-    let response;
-    try {
-      response = await got.head(s3url);
-    } catch (gotError) {
-      // If the file does not exist AWS S3 can return a 403 error
-      if (gotError.code !== 'ENOTFOUND' && gotError.statusCode !== 404 && gotError.statusCode !== 403) {
-        throw gotError;
-      }
-    }
-
-    // cache images for 30 minutes on aws, else upload a new one
-    if (response && response.statusCode === 200 && moment().diff(response.headers['last-modified'], 'minutes') < 30) {
-      return res.redirect(s3url);
-    }
-
-    const pageBuffer = await new Pageres()
-      .src(`${BASE_URL}/export/avatar-${memberId}.html`, ['140x147'], {
-        crop: true,
-        filename: filename.replace('.png', ''),
-      })
-      .run();
-
-    let s3upload = S3.upload({
-      Bucket: S3_BUCKET,
-      Key: filename,
-      ACL: 'public-read',
-      StorageClass: 'REDUCED_REDUNDANCY',
-      ContentType: 'image/png',
-      Expires: moment().add({minutes: 5}).toDate(),
-      Body: pageBuffer,
-    });
-
-    let s3res = await new Promise((resolve, reject) => {
-      s3upload.send((err, s3uploadRes) => {
-        if (err) {
-          reject(err);
-        } else {
-          resolve(s3uploadRes);
-        }
-      });
-    });
-
-    res.redirect(s3res.Location);
-  },
-};
-
 /**
  * @api {get} /export/inbox.html Export user private messages as HTML document
  * @apiName ExportUserPrivateMessages
diff --git a/website/server/index.js b/website/server/index.js
index c1d6757dee..8259255218 100644
--- a/website/server/index.js
+++ b/website/server/index.js
@@ -12,9 +12,6 @@ const setupNconf = require('./libs/setupNconf');
 setupNconf();
 const nconf = require('nconf');
 
-// Initialize @google-cloud/trace-agent
-require('./libs/gcpTraceAgent');
-
 const cluster = require('cluster');
 const logger = require('./libs/logger');
 
diff --git a/website/server/libs/auth/index.js b/website/server/libs/auth/index.js
index 609f546ad8..0ec22f525c 100644
--- a/website/server/libs/auth/index.js
+++ b/website/server/libs/auth/index.js
@@ -7,12 +7,10 @@ import * as passwordUtils from '../../libs/password';
 import { model as User } from '../../models/user';
 import { model as EmailUnsubscription } from '../../models/emailUnsubscription';
 import { sendTxn as sendTxnEmail } from '../../libs/email';
-import common from '../../../common';
 import logger from '../../libs/logger';
 import { decrypt } from '../../libs/encryption';
 import { model as Group } from '../../models/group';
 import moment from 'moment';
-import { loginSocial } from './social.js';
 import { loginRes } from './utils';
 import { verifyUsername } from '../user/validation';
 
@@ -59,20 +57,8 @@ function hasLocalAuth (user) {
   return user.auth.local.email && user.auth.local.hashed_password;
 }
 
-function hasBackupAuth (user, networkToRemove) {
-  if (hasLocalAuth(user)) {
-    return true;
-  }
-
-  let hasAlternateNetwork = common.constants.SUPPORTED_SOCIAL_NETWORKS.find((network) => {
-    return network.key !== networkToRemove && user.auth[network.key].id;
-  });
-
-  return hasAlternateNetwork;
-}
-
 async function registerLocal (req, res, { isV3 = false }) {
-  const existingUser = res.locals.user; // If adding local auth to social user
+  const existingUser = res.locals.user;
 
   req.checkBody({
     username: {
@@ -143,19 +129,8 @@ async function registerLocal (req, res, { isV3 = false }) {
     },
   };
 
-  if (existingUser) {
-    let hasSocialAuth = common.constants.SUPPORTED_SOCIAL_NETWORKS.find(network => {
-      if (existingUser.auth.hasOwnProperty(network.key)) {
-        return existingUser.auth[network.key].id;
-      }
-    });
-    if (!hasSocialAuth) throw new NotAuthorized(res.t('onlySocialAttachLocal'));
-    existingUser.auth.local = newUser.auth.local;
-    newUser = existingUser;
-  } else {
-    newUser = new User(newUser);
-    newUser.registeredThrough = req.headers['x-client']; // Not saved, used to create the correct tasks based on the device used
-  }
+  newUser = new User(newUser);
+  newUser.registeredThrough = req.headers['x-client']; // Not saved, used to create the correct tasks based on the device used
 
   // we check for partyInvite for backward compatibility
   if (req.query.groupInvite || req.query.partyInvite) {
@@ -191,24 +166,11 @@ async function registerLocal (req, res, { isV3 = false }) {
       }
     });
 
-  if (!existingUser) {
-    res.analytics.track('register', {
-      category: 'acquisition',
-      type: 'local',
-      gaLabel: 'local',
-      uuid: savedUser._id,
-      headers: req.headers,
-      user: savedUser,
-    });
-  }
-
   return null;
 }
 
 module.exports = {
   loginRes,
-  hasBackupAuth,
   hasLocalAuth,
-  loginSocial,
   registerLocal,
 };
diff --git a/website/server/libs/auth/utils.js b/website/server/libs/auth/utils.js
index 588c596037..8e9265be22 100644
--- a/website/server/libs/auth/utils.js
+++ b/website/server/libs/auth/utils.js
@@ -1,15 +1,8 @@
 import nconf from 'nconf';
-import shortid from 'short-uuid';
 
 import { NotAuthorized } from '../errors';
 
 const COMMUNITY_MANAGER_EMAIL = nconf.get('EMAILS_COMMUNITY_MANAGER_EMAIL');
-const translator = shortid('0123456789abcdefghijklmnopqrstuvwxyz');
-
-function generateUsername () {
-  let newName = `hb-${translator.new()}`;
-  return newName.substring(0, 20);
-}
 
 function loginRes (user, req, res) {
   if (user.auth.blocked) throw new NotAuthorized(res.t('accountSuspended', {communityManagerEmail: COMMUNITY_MANAGER_EMAIL, userId: user._id}));
@@ -25,6 +18,5 @@ function loginRes (user, req, res) {
 }
 
 module.exports = {
-  generateUsername,
   loginRes,
 };
diff --git a/website/server/libs/chat.js b/website/server/libs/chat.js
index a19e9b260c..3554bc90ee 100644
--- a/website/server/libs/chat.js
+++ b/website/server/libs/chat.js
@@ -1,6 +1,5 @@
 import { model as User } from '../models/user';
 import { getUserInfo } from './email';
-import {sendNotification as sendPushNotification} from './pushNotifications';
 
 export async function getAuthorEmailFromMessage (message) {
   let authorId = message.uuid;
@@ -17,26 +16,3 @@ export async function getAuthorEmailFromMessage (message) {
     return 'Author Account Deleted';
   }
 }
-
-export async function sendChatPushNotifications (user, group, message, translate) {
-  let members = await User.find({
-    'party._id': group._id,
-    _id: {$ne: user._id},
-  })
-    .select('preferences.pushNotifications preferences.language profile.name pushDevices')
-    .exec();
-  members.forEach(member => {
-    if (member.preferences.pushNotifications.partyActivity !== false) {
-      sendPushNotification(
-        member,
-        {
-          title: translate('groupActivityNotificationTitle', {user: message.user, group: group.name}, member.preferences.language),
-          message: message.text,
-          identifier: 'groupActivity',
-          category: 'groupActivity',
-          payload: {groupID: group._id, type: group.type, groupName: group.name, message: message.text, timestamp: message.timestamp, senderName: message.user},
-        }
-      );
-    }
-  });
-}
\ No newline at end of file
diff --git a/website/server/libs/chatReporting/groupChatReporter.js b/website/server/libs/chatReporting/groupChatReporter.js
index b41f142579..806358dbd7 100644
--- a/website/server/libs/chatReporting/groupChatReporter.js
+++ b/website/server/libs/chatReporting/groupChatReporter.js
@@ -7,7 +7,6 @@ import {
   NotFound,
 } from '../errors';
 import { sendTxn } from '../email';
-import slack from '../slack';
 import { model as Group } from '../../models/group';
 import { chatModel as Chat } from '../../models/message';
 import apiError from '../apiError';
@@ -49,22 +48,13 @@ export default class GroupChatReporter extends ChatReporter {
     return {message, group, userComment};
   }
 
-  async notify (group, message, userComment, automatedComment = '') {
+  async notify (group, message, userComment) {
     let emailVariables = await this.getMessageVariables(group, message);
     emailVariables = emailVariables.concat([
       {name: 'REPORTER_COMMENT', content: userComment || ''},
     ]);
 
     sendTxn(FLAG_REPORT_EMAILS, 'flag-report-to-mods-with-comments', emailVariables);
-
-    slack.sendFlagNotification({
-      authorEmail: this.authorEmail,
-      flagger: this.user,
-      group,
-      message,
-      userComment,
-      automatedComment,
-    });
   }
 
   async flagGroupMessage (group, message, increaseFlagCount) {
@@ -91,14 +81,12 @@ export default class GroupChatReporter extends ChatReporter {
     let {message, group, userComment} = await this.validate();
 
     let increaseFlagCount = true;
-    let automatedComment = '';
     if (moment().diff(this.user.auth.timestamps.created, 'days') < USER_AGE_FOR_FLAGGING) {
       increaseFlagCount = false;
-      automatedComment = `The post's flag count has not been increased because the flagger's account is less than ${USER_AGE_FOR_FLAGGING} days old.`;
       // This is to prevent trolls from making new accounts to maliciously flag-and-hide.
     }
 
-    await this.notify(group, message, userComment, automatedComment);
+    await this.notify(group, message, userComment);
     await this.flagGroupMessage(group, message, increaseFlagCount);
     return message;
   }
diff --git a/website/server/libs/chatReporting/inboxChatReporter.js b/website/server/libs/chatReporting/inboxChatReporter.js
index 207b570fd3..e8078d83cf 100644
--- a/website/server/libs/chatReporting/inboxChatReporter.js
+++ b/website/server/libs/chatReporting/inboxChatReporter.js
@@ -6,7 +6,6 @@ import {
   BadRequest,
 } from '../errors';
 import { getUserInfo, sendTxn} from '../email';
-import slack from '../slack';
 import apiError from '../apiError';
 
 import * as inboxLib from '../inbox';
@@ -55,13 +54,6 @@ export default class InboxChatReporter extends ChatReporter {
     ]);
 
     sendTxn(FLAG_REPORT_EMAILS, 'flag-report-to-mods-with-comments', emailVariables);
-
-    slack.sendInboxFlagNotification({
-      authorEmail: this.authorEmail,
-      flagger: this.user,
-      message,
-      userComment,
-    });
   }
 
   async getAuthorVariables (message) {
diff --git a/website/server/libs/cron.js b/website/server/libs/cron.js
index 2e01b1a917..80642b16ab 100644
--- a/website/server/libs/cron.js
+++ b/website/server/libs/cron.js
@@ -85,12 +85,12 @@ function grantEndOfTheMonthPerks (user, now) {
       // If offset is now less than 0, the user EITHER has a single-month recurring subscription and MIGHT be due for perks,
       // OR has a multi-month subscription that renewed some time in the previous calendar month and so they are due for a new set of perks
       // (strictly speaking, they should have been given the perks at the time that next payment was taken, but we don't have support for
-      // tracking payments like that - giving the perks when offset is < 0 is a workaround).
+      // tracking like that - giving the perks when offset is < 0 is a workaround).
 
       if (plan.consecutive.offset < 0) {
         if (plan.planId) {
           // NB gift subscriptions don't have a planID (which doesn't matter because we don't need to reapply perks for them and by this point they should have expired anyway)
-          let planIdRegExp = new RegExp('_([0-9]+)mo'); // e.g., matches 'google_6mo' / 'basic_12mo' and captures '6' / '12'
+          let planIdRegExp = new RegExp('_([0-9]+)mo'); // e.g., matches 'basic_12mo' and captures '6' / '12'
           let match = plan.planId.match(planIdRegExp);
           if (match !== null && match[0] !== null) {
             planMonthsLength = match[1]; // 3 for 3-month recurring subscription, etc
@@ -172,32 +172,6 @@ function resetHabitCounters (user, tasksByType, now, daysMissed) {
   });
 }
 
-function trackCronAnalytics (analytics, user, _progress, options) {
-  analytics.track('Cron', {
-    category: 'behavior',
-    gaLabel: 'Cron Count',
-    gaValue: user.flags.cronCount,
-    uuid: user._id,
-    user,
-    resting: user.preferences.sleep,
-    cronCount: user.flags.cronCount,
-    progressUp: _.min([_progress.up, 900]),
-    progressDown: _progress.down,
-    headers: options.headers,
-    loginIncentives: user.loginIncentives,
-  });
-
-  if (user.party && user.party.quest && !user.party.quest.RSVPNeeded && !user.party.quest.completed && user.party.quest.key && !user.preferences.sleep) {
-    analytics.track('quest participation', {
-      category: 'behavior',
-      uuid: user._id,
-      user,
-      questName: user.party.quest.key,
-      headers: options.headers,
-    });
-  }
-}
-
 function awardLoginIncentives (user) {
   if (user.loginIncentives > MAX_INCENTIVES) return;
 
@@ -248,7 +222,7 @@ function awardLoginIncentives (user) {
 
 // Perform various beginning-of-day reset actions.
 export function cron (options = {}) {
-  let {user, tasksByType, analytics, now = new Date(), daysMissed, timezoneOffsetFromUserPrefs} = options;
+  let {user, tasksByType, now = new Date(), daysMissed, timezoneOffsetFromUserPrefs} = options;
   let _progress = {down: 0, up: 0, collectedItems: 0};
 
   // Record pre-cron values of HP and MP to show notifications later
@@ -488,9 +462,7 @@ export function cron (options = {}) {
     mp: user.stats.mp - beforeCronStats.mp - (oldCronNotif ? oldCronNotif.data.mp : 0),
   });
 
-  // Analytics
   user.flags.cronCount++;
-  trackCronAnalytics(analytics, user, _progress, options);
 
   return _progress;
 }
diff --git a/website/server/libs/email.js b/website/server/libs/email.js
index 02e236fe60..b37c3e8a0a 100644
--- a/website/server/libs/email.js
+++ b/website/server/libs/email.js
@@ -3,7 +3,6 @@ import { TAVERN_ID } from '../models/group';
 import { encrypt } from './encryption';
 import got from 'got';
 import logger from './logger';
-import common from '../../common';
 
 const IS_PROD = nconf.get('IS_PROD');
 const EMAIL_SERVER = {
@@ -25,12 +24,6 @@ export function getUserInfo (user, fields = []) {
   if (fields.indexOf('email') !== -1) {
     if (user.auth.local && user.auth.local.email) {
       info.email = user.auth.local.email;
-    } else {
-      common.constants.SUPPORTED_SOCIAL_NETWORKS.forEach(network => {
-        if (user.auth[network.key] && user.auth[network.key].emails && user.auth[network.key].emails[0] && user.auth[network.key].emails[0].value) {
-          info.email = user.auth[network.key].emails[0].value;
-        }
-      });
     }
   }
 
diff --git a/website/server/libs/inbox/index.js b/website/server/libs/inbox/index.js
index 9cb610cc5e..b4c0649328 100644
--- a/website/server/libs/inbox/index.js
+++ b/website/server/libs/inbox/index.js
@@ -1,10 +1,9 @@
 import {mapInboxMessage, inboxModel as Inbox} from '../../models/message';
 import {getUserInfo, sendTxn as sendTxnEmail} from '../email';
-import {sendNotification as sendPushNotification} from '../pushNotifications';
 
 const PM_PER_PAGE = 10;
 
-export async function sentMessage (sender, receiver, message, translate) {
+export async function sentMessage (sender, receiver, message) {
   const messageSent = await sender.sendMessage(receiver, { receiverMsg: message });
   const senderName = getUserInfo(sender, ['name']).name;
 
@@ -14,19 +13,6 @@ export async function sentMessage (sender, receiver, message, translate) {
     ]);
   }
 
-  if (receiver.preferences.pushNotifications.newPM !== false) {
-    sendPushNotification(
-      receiver,
-      {
-        title: translate('newPMNotificationTitle', {name: getUserInfo(sender, ['name']).name}, receiver.preferences.language),
-        message,
-        identifier: 'newPM',
-        category: 'newPM',
-        payload: {replyTo: sender._id, senderName, message},
-      }
-    );
-  }
-
   return messageSent;
 }
 
diff --git a/website/server/libs/invites/index.js b/website/server/libs/invites/index.js
index 2429794e68..7616855f2a 100644
--- a/website/server/libs/invites/index.js
+++ b/website/server/libs/invites/index.js
@@ -1,7 +1,6 @@
 import _ from 'lodash';
 
 import { encrypt } from '../encryption';
-import { sendNotification as sendPushNotification } from '../pushNotifications';
 import {
   NotFound,
   BadRequest,
@@ -16,22 +15,6 @@ import {
   model as Group,
 } from '../../models/group';
 
-function sendInvitePushNotification (userToInvite, groupLabel, group, publicGuild, res) {
-  if (userToInvite.preferences.pushNotifications[`invited${groupLabel}`] === false) return;
-
-  const identifier = group.type === 'guild' ? 'invitedGuild' : 'invitedParty';
-
-  sendPushNotification(
-    userToInvite,
-    {
-      title: group.name,
-      message: res.t(identifier, userToInvite.preferences.language),
-      identifier,
-      payload: {groupID: group._id, publicGuild},
-    }
-  );
-}
-
 function sendInviteEmail (userToInvite, groupLabel, group, inviter) {
   if (userToInvite.preferences.emailNotifications[`invited${groupLabel}`] === false) return;
   const groupTemplate = group.type === 'guild' ? 'guild' : 'party';
@@ -111,7 +94,6 @@ async function addInvitationToUser (userToInvite, group, inviter, res) {
 
   const groupLabel = group.type === 'guild' ? 'Guild' : 'Party';
   sendInviteEmail(userToInvite, groupLabel, group, inviter);
-  sendInvitePushNotification(userToInvite, groupLabel, group, publicGuild, res);
 
   const userInvited = await userToInvite.save();
   if (group.type === 'guild') {
@@ -147,8 +129,6 @@ async function inviteByEmail (invite, group, inviter, req, res) {
 
   let userToContact = await User.findOne({$or: [
     {'auth.local.email': invite.email},
-    {'auth.facebook.emails.value': invite.email},
-    {'auth.google.emails.value': invite.email},
   ]})
     .select({_id: true, 'preferences.emailNotifications': true})
     .exec();
diff --git a/website/server/libs/logger.js b/website/server/libs/logger.js
index 7da144a7cf..8a260a1a6b 100644
--- a/website/server/libs/logger.js
+++ b/website/server/libs/logger.js
@@ -1,6 +1,5 @@
 // Logger utility
 import winston from 'winston';
-import 'winston-loggly-bulk';
 import nconf from 'nconf';
 import _ from 'lodash';
 import {
@@ -21,12 +20,6 @@ if (IS_PROD) {
       colorize: false,
       prettyPrint: false,
     });
-    logger.add(winston.transports.Loggly, {
-      inputToken: nconf.get('LOGGLY_TOKEN'),
-      subdomain: nconf.get('LOGGLY_SUBDOMAIN'),
-      tags: ['Winston-NodeJS'],
-      json: true,
-    });
   }
 } else if (!IS_TEST || IS_TEST && ENABLE_LOGS_IN_TEST) { // Do not log anything when testing unless specified
   logger
diff --git a/website/server/libs/payments/gems.js b/website/server/libs/payments/gems.js
index 35d18cc706..400bf08e65 100644
--- a/website/server/libs/payments/gems.js
+++ b/website/server/libs/payments/gems.js
@@ -1,9 +1,7 @@
-import analytics from '../analyticsService';
 import {
   getUserInfo,
   sendTxn as txnEmail,
 } from '../email';
-import { sendNotification as sendPushNotification } from '../pushNotifications';
 import shared from '../../../common';
 
 function getGiftMessage (data, byUsername, gemAmount, language) {
@@ -37,18 +35,6 @@ async function buyGemGift (data) {
     ]);
   }
 
-  // Only send push notifications if sending to a user other than yourself
-  if (data.gift.member._id !== data.user._id && data.gift.member.preferences.pushNotifications.giftedGems !== false) {
-    sendPushNotification(
-      data.gift.member,
-      {
-        title: shared.i18n.t('giftedGems', languages[1]),
-        message: shared.i18n.t('giftedGemsInfo', {amount: gemAmount, name: byUsername}, languages[1]),
-        identifier: 'giftedGems',
-      }
-    );
-  }
-
   await data.gift.member.save();
 }
 
@@ -75,21 +61,10 @@ async function buyGems (data) {
   updateUserBalance(data, amt);
   data.user.purchased.txnCount++;
 
-  if (!data.gift) txnEmail(data.user, 'donation');
-
-  analytics.trackPurchase({
-    uuid: data.user._id,
-    itemPurchased: 'Gems',
-    sku: `${data.paymentMethod.toLowerCase()}-checkout`,
-    purchaseType: 'checkout',
-    paymentMethod: data.paymentMethod,
-    quantity: 1,
-    gift: Boolean(data.gift),
-    purchaseValue: amt,
-    headers: data.headers,
-  });
-
-  if (data.gift) await buyGemGift(data);
+  if (data.gift)
+    await buyGemGift(data);
+  else
+    txnEmail(data.user, 'donation');
 
   await data.user.save();
 }
diff --git a/website/server/libs/payments/groupPayments.js b/website/server/libs/payments/groupPayments.js
index ff4c9abf97..e3413ed12a 100644
--- a/website/server/libs/payments/groupPayments.js
+++ b/website/server/libs/payments/groupPayments.js
@@ -1,4 +1,3 @@
-import nconf from 'nconf';
 import _ from 'lodash';
 import moment from 'moment';
 
@@ -8,11 +7,9 @@ import {
   basicFields as basicGroupFields,
 } from '../../models/group';
 import {
-  getUserInfo,
   sendTxn as txnEmail,
 } from '../email';
 
-const TECH_ASSISTANCE_EMAIL = nconf.get('EMAILS_TECH_ASSISTANCE_EMAIL');
 const JOINED_GROUP_PLAN = 'joined group plan';
 
 function _dateDiff (earlyDate, lateDate) {
@@ -53,8 +50,6 @@ async function addSubscriptionToGroupUsers (group) {
 async function addSubToGroupUser (member, group) {
   // These EMAIL_TEMPLATE constants are used to pass strings into templates that are
   // stored externally and so their values must not be changed.
-  const EMAIL_TEMPLATE_SUBSCRIPTION_TYPE_GOOGLE = 'Google_subscription';
-  const EMAIL_TEMPLATE_SUBSCRIPTION_TYPE_IOS = 'iOS_subscription';
   const EMAIL_TEMPLATE_SUBSCRIPTION_TYPE_GROUP_PLAN = 'group_plan_free_subscription';
   const EMAIL_TEMPLATE_SUBSCRIPTION_TYPE_LIFETIME_FREE = 'lifetime_free_subscription';
   const EMAIL_TEMPLATE_SUBSCRIPTION_TYPE_NORMAL = 'normal_subscription';
@@ -64,7 +59,6 @@ async function addSubToGroupUser (member, group) {
   // When changing customerIdsToIgnore or paymentMethodsToIgnore, the code blocks below for
   // the `group-member-join` email template will probably need to be changed.
   let customerIdsToIgnore = [this.constants.GROUP_PLAN_CUSTOMER_ID, this.constants.UNLIMITED_CUSTOMER_ID];
-  let paymentMethodsToIgnore = [this.constants.GOOGLE_PAYMENT_METHOD, this.constants.IOS_PAYMENT_METHOD];
   let previousSubscriptionType = EMAIL_TEMPLATE_SUBSCRIPTION_TYPE_NONE;
   let leader = await User.findById(group.leader).exec();
 
@@ -99,29 +93,12 @@ async function addSubToGroupUser (member, group) {
   let memberPlan = member.purchased.plan;
   if (member.isSubscribed()) {
     let customerHasCancelledGroupPlan = memberPlan.customerId === this.constants.GROUP_PLAN_CUSTOMER_ID && !member.hasNotCancelled();
-    let ignorePaymentPlan = paymentMethodsToIgnore.indexOf(memberPlan.paymentMethod) !== -1;
     let ignoreCustomerId = customerIdsToIgnore.indexOf(memberPlan.customerId) !== -1;
 
-    if (ignorePaymentPlan) {
-      txnEmail({email: TECH_ASSISTANCE_EMAIL}, 'admin-user-subscription-details', [
-        {name: 'PROFILE_NAME', content: member.profile.name},
-        {name: 'UUID', content: member._id},
-        {name: 'EMAIL', content: getUserInfo(member, ['email']).email},
-        {name: 'PAYMENT_METHOD', content: memberPlan.paymentMethod},
-        {name: 'PURCHASED_PLAN', content: JSON.stringify(memberPlan)},
-        {name: 'ACTION_NEEDED', content: 'User has joined group plan and has been told to cancel their subscription then email us. Ensure they do that then give them free sub.'},
-        // TODO User won't get email instructions if they've opted out of all emails. See if we can make this email an exception and if not, report here whether they've opted out.
-      ]);
-    }
-
-    if ((ignorePaymentPlan || ignoreCustomerId) && !customerHasCancelledGroupPlan) {
+    if (ignoreCustomerId && !customerHasCancelledGroupPlan) {
       // member has been added to group plan but their subscription will not be changed
       // automatically so they need a special message in the email
-      if (memberPlan.paymentMethod === this.constants.GOOGLE_PAYMENT_METHOD) {
-        previousSubscriptionType = EMAIL_TEMPLATE_SUBSCRIPTION_TYPE_GOOGLE;
-      } else if (memberPlan.paymentMethod === this.constants.IOS_PAYMENT_METHOD) {
-        previousSubscriptionType = EMAIL_TEMPLATE_SUBSCRIPTION_TYPE_IOS;
-      } else if (memberPlan.customerId === this.constants.UNLIMITED_CUSTOMER_ID) {
+      if (memberPlan.customerId === this.constants.UNLIMITED_CUSTOMER_ID) {
         previousSubscriptionType = EMAIL_TEMPLATE_SUBSCRIPTION_TYPE_LIFETIME_FREE;
       } else if (memberPlan.customerId === this.constants.GROUP_PLAN_CUSTOMER_ID) {
         previousSubscriptionType = EMAIL_TEMPLATE_SUBSCRIPTION_TYPE_GROUP_PLAN;
diff --git a/website/server/libs/payments/payments.js b/website/server/libs/payments/payments.js
index da3e189d70..57b9a64b05 100644
--- a/website/server/libs/payments/payments.js
+++ b/website/server/libs/payments/payments.js
@@ -18,8 +18,6 @@ api.constants = {
   UNLIMITED_CUSTOMER_ID: 'habitrpg', // Users with the customerId have an unlimted free subscription
   GROUP_PLAN_CUSTOMER_ID: 'group-plan',
   GROUP_PLAN_PAYMENT_METHOD: 'Group Plan',
-  GOOGLE_PAYMENT_METHOD: 'Google',
-  IOS_PAYMENT_METHOD: 'Apple',
 };
 
 api.addSubscriptionToGroupUsers = addSubscriptionToGroupUsers;
diff --git a/website/server/libs/payments/subscriptions.js b/website/server/libs/payments/subscriptions.js
index ba7305da8b..f01602701a 100644
--- a/website/server/libs/payments/subscriptions.js
+++ b/website/server/libs/payments/subscriptions.js
@@ -1,8 +1,6 @@
 import _ from 'lodash';
 import moment from 'moment';
 
-import analytics from '../analyticsService';
-import slack from '../slack';
 import {
   getUserInfo,
   sendTxn as txnEmail,
@@ -16,7 +14,6 @@ import {
   NotFound,
 } from '../errors';
 import shared from '../../../common';
-import { sendNotification as sendPushNotification } from '../pushNotifications';
 
 // @TODO: Abstract to shared/constant
 const JOINED_GROUP_PLAN = 'joined group plan';
@@ -56,9 +53,6 @@ async function createSubscription (data) {
   let today = new Date();
   let plan;
   let group;
-  let groupId;
-  let itemPurchased = 'Subscription';
-  let purchaseType = 'subscribe';
   let emailType = 'subscription-begins';
 
   //  If we are buying a group subscription
@@ -75,10 +69,7 @@ async function createSubscription (data) {
     }
 
     recipient = group;
-    itemPurchased = 'Group-Subscription';
-    purchaseType = 'group-subscribe';
     emailType = 'group-subscription-begins';
-    groupId = group._id;
     recipient.purchased.plan.quantity = data.sub.quantity;
 
     await this.addSubscriptionToGroupUsers(group);
@@ -110,9 +101,7 @@ async function createSubscription (data) {
       paymentMethod: data.paymentMethod,
       extraMonths: Number(plan.extraMonths) + _dateDiff(today, plan.dateTerminated),
       dateTerminated: null,
-      // Specify a lastBillingDate just for Amazon Payments
-      // Resetted every time the subscription restarts
-      lastBillingDate: data.paymentMethod === 'Amazon Payments' ? today : undefined,
+      lastBillingDate: undefined,
       nextPaymentProcessing: data.nextPaymentProcessing,
       nextBillingDate: data.nextBillingDate,
       additionalData: data.additionalData,
@@ -150,19 +139,6 @@ async function createSubscription (data) {
     txnEmail(data.user, emailType);
   }
 
-  analytics.trackPurchase({
-    uuid: data.user._id,
-    groupId,
-    itemPurchased,
-    sku: `${data.paymentMethod.toLowerCase()}-subscription`,
-    purchaseType,
-    paymentMethod: data.paymentMethod,
-    quantity: 1,
-    gift: Boolean(data.gift),
-    purchaseValue: block.price,
-    headers: data.headers,
-  });
-
   if (!group) data.user.purchased.txnCount++;
 
   if (data.gift) {
@@ -197,48 +173,17 @@ async function createSubscription (data) {
         {name: 'X_MONTHS_SUBSCRIPTION', content: months},
       ]);
     }
-
-    if (data.gift.member._id !== data.user._id) { // Only send push notifications if sending to a user other than yourself
-      if (data.gift.member.preferences.pushNotifications.giftedSubscription !== false) {
-        sendPushNotification(data.gift.member,
-          {
-            title: shared.i18n.t('giftedSubscription', languages[1]),
-            message: shared.i18n.t('giftedSubscriptionInfo', {months, name: byUserName}, languages[1]),
-            identifier: 'giftedSubscription',
-            payload: {replyTo: data.user._id},
-          }
-        );
-      }
-    }
   }
 
   if (group) await group.save();
   if (data.user && data.user.isModified()) await data.user.save();
   if (data.gift) await data.gift.member.save();
-
-  slack.sendSubscriptionNotification({
-    buyer: {
-      id: data.user._id,
-      name: data.user.profile.name,
-      email: getUserInfo(data.user, ['email']).email,
-    },
-    recipient: data.gift ? {
-      id: data.gift.member._id,
-      name: data.gift.member.profile.name,
-      email: getUserInfo(data.gift.member, ['email']).email,
-    } : {},
-    paymentMethod: data.paymentMethod,
-    months: group ? 1 : months,
-    groupId,
-  });
 }
 
 // Cancels a subscription or group plan, setting termination to happen later
 async function cancelSubscription (data) {
   let plan;
   let group;
-  let cancelType = 'unsubscribe';
-  let groupId;
   let emailType;
   let emailMergeData = [];
   let sendEmail = true;
@@ -300,20 +245,6 @@ async function cancelSubscription (data) {
   }
 
   if (sendEmail) txnEmail(data.user, emailType, emailMergeData);
-
-  if (group) {
-    cancelType = 'group-unsubscribe';
-    groupId = group._id;
-  }
-
-  analytics.track(cancelType, {
-    uuid: data.user._id,
-    groupId,
-    gaCategory: 'commerce',
-    gaLabel: data.paymentMethod,
-    paymentMethod: data.paymentMethod,
-    headers: data.headers,
-  });
 }
 
 module.exports = {
diff --git a/website/server/libs/setupPassport.js b/website/server/libs/setupPassport.js
index 215c91daa5..1d2c933392 100644
--- a/website/server/libs/setupPassport.js
+++ b/website/server/libs/setupPassport.js
@@ -1,32 +1,9 @@
 import passport from 'passport';
-import nconf from 'nconf';
-import { Strategy as FacebookStrategy } from 'passport-facebook';
-import { Strategy as GoogleStrategy } from 'passport-google-oauth20';
 
 // Passport session setup.
 //   To support persistent login sessions, Passport needs to be able to
 //   serialize users into and deserialize users out of the session.  Typically,
 //   this will be as simple as storing the User ID when serializing, and finding
-//   the user by ID when deserializing.  However, since this example does not
-//   have a database of user records, the complete Facebook profile is serialized
-//   and deserialized.
+//   the user by ID when deserializing.
 passport.serializeUser((user, done) => done(null, user));
 passport.deserializeUser((obj, done) => done(null, obj));
-
-// TODO remove?
-// This auth strategy is no longer used. It's just kept around for auth.js#loginFacebook() (passport._strategies.facebook.userProfile)
-// The proper fix would be to move to a general OAuth module simply to verify accessTokens
-passport.use(new FacebookStrategy({
-  clientID: nconf.get('FACEBOOK_KEY'),
-  clientSecret: nconf.get('FACEBOOK_SECRET'),
-  profileFields: ['id', 'email', 'displayName'],
-  profileURL: 'https://graph.facebook.com/v2.8/me',
-  authorizationURL: 'https://www.facebook.com/v2.8/dialog/oauth',
-  tokenURL: 'https://graph.facebook.com/v2.8/oauth/access_token',
-  // callbackURL: nconf.get("BASE_URL") + "/auth/facebook/callback"
-}, (accessToken, refreshToken, profile, done) => done(null, profile)));
-
-passport.use(new GoogleStrategy({
-  clientID: nconf.get('GOOGLE_CLIENT_ID'),
-  clientSecret: nconf.get('GOOGLE_CLIENT_SECRET'),
-}, (accessToken, refreshToken, profile, done) => done(null, profile)));
diff --git a/website/server/libs/user/index.js b/website/server/libs/user/index.js
index 1274e16d21..5737a9ed6c 100644
--- a/website/server/libs/user/index.js
+++ b/website/server/libs/user/index.js
@@ -198,12 +198,6 @@ export async function reset (req, res, { isV3 = false }) {
     user.save(),
   ]);
 
-  res.analytics.track('account reset', {
-    uuid: user._id,
-    hitType: 'event',
-    category: 'behavior',
-  });
-
   res.respond(200, ...resetRes);
 }
 
@@ -215,7 +209,7 @@ export async function reroll (req, res, { isV3 = false }) {
     ...Tasks.taskIsGroupOrChallengeQuery,
   };
   let tasks = await Tasks.Task.find(query).exec();
-  const rerollRes = common.ops.reroll(user, tasks, req, res.analytics);
+  const rerollRes = common.ops.reroll(user, tasks, req);
   if (isV3) {
     rerollRes[0].user = await rerollRes[0].user.toJSONWithInbox();
   }
@@ -236,7 +230,7 @@ export async function rebirth (req, res, { isV3 = false }) {
     ...Tasks.taskIsGroupOrChallengeQuery,
   }).exec();
 
-  const rebirthRes = common.ops.rebirth(user, tasks, req, res.analytics);
+  const rebirthRes = common.ops.rebirth(user, tasks, req);
   if (isV3) {
     rebirthRes[0].user = await rebirthRes[0].user.toJSONWithInbox();
   }
diff --git a/website/server/middlewares/appRoutes.js b/website/server/middlewares/appRoutes.js
index 5819c7231d..ce018e7718 100644
--- a/website/server/middlewares/appRoutes.js
+++ b/website/server/middlewares/appRoutes.js
@@ -1,6 +1,5 @@
 import express from 'express';
 import expressValidator from 'express-validator';
-import analytics from './analytics';
 import setupBody from './setupBody';
 import routes from '../libs/routes';
 import path from 'path';
@@ -16,7 +15,6 @@ app.set('view engine', 'pug');
 app.set('views', `${__dirname}/../../views`);
 
 app.use(expressValidator());
-app.use(analytics);
 app.use(setupBody);
 
 const topLevelRouter = express.Router(); // eslint-disable-line new-cap
diff --git a/website/server/middlewares/auth.js b/website/server/middlewares/auth.js
index 402cb93c27..0908dd42d7 100644
--- a/website/server/middlewares/auth.js
+++ b/website/server/middlewares/auth.js
@@ -6,7 +6,6 @@ import {
 } from '../models/user';
 import nconf from 'nconf';
 import url from 'url';
-import gcpStackdriverTracer from '../libs/gcpTraceAgent';
 
 const COMMUNITY_MANAGER_EMAIL = nconf.get('EMAILS_COMMUNITY_MANAGER_EMAIL');
 const USER_FIELDS_ALWAYS_LOADED = ['_id', 'notifications', 'preferences', 'auth', 'flags'];
@@ -40,13 +39,6 @@ function getUserFields (options, req) {
   return userFieldOptions.concat(USER_FIELDS_ALWAYS_LOADED).join(' ');
 }
 
-// Make sure stackdriver traces are storing the user id
-function stackdriverTraceUserId (userId) {
-  if (gcpStackdriverTracer) {
-    gcpStackdriverTracer.getCurrentRootSpan().addLabel('userId', userId);
-  }
-}
-
 // Strins won't be translated here because getUserLanguage has not run yet
 
 // Authenticate a request through the x-api-user and x-api key header
@@ -78,7 +70,6 @@ export function authWithHeaders (options = {}) {
 
         res.locals.user = user;
         req.session.userId = user._id;
-        stackdriverTraceUserId(user._id);
         user.auth.timestamps.updated = new Date();
         return next();
       })
@@ -107,7 +98,6 @@ export function authWithSession (req, res, next) {
       if (!user) throw new NotAuthorized(res.t('invalidCredentials'));
 
       res.locals.user = user;
-      stackdriverTraceUserId(user._id);
       user.auth.timestamps.updated = new Date();
       return next();
     })
diff --git a/website/server/middlewares/cron.js b/website/server/middlewares/cron.js
index 47368dc8fd..6b1115a809 100644
--- a/website/server/middlewares/cron.js
+++ b/website/server/middlewares/cron.js
@@ -54,7 +54,6 @@ async function cronAsync (req, res) {
   let user = res.locals.user;
   if (!user) return null; // User might not be available when authentication is not mandatory
 
-  let analytics = res.analytics;
   let now = new Date();
 
   try {
@@ -83,7 +82,7 @@ async function cronAsync (req, res) {
     tasks.forEach(task => tasksByType[`${task.type}s`].push(task));
 
     // Run cron
-    let progress = cron({user, tasksByType, now, daysMissed, analytics, timezoneOffsetFromUserPrefs, headers: req.headers});
+    let progress = cron({user, tasksByType, now, daysMissed, timezoneOffsetFromUserPrefs, headers: req.headers});
 
     // Clear old completed todos - 30 days for free users, 90 for subscribers
     // Do not delete challenges completed todos TODO unless the task is broken?
diff --git a/website/server/middlewares/errorHandler.js b/website/server/middlewares/errorHandler.js
index 5b3cdb7390..e10fb3f749 100644
--- a/website/server/middlewares/errorHandler.js
+++ b/website/server/middlewares/errorHandler.js
@@ -50,12 +50,6 @@ module.exports = function errorHandler (err, req, res, next) { // eslint-disable
     });
   }
 
-  // Handle Stripe Card errors errors (can be safely shown to the users)
-  // https://stripe.com/docs/api/node#errors
-  if (err.type === 'StripeCardError') {
-    responseErr = new BadRequest(err.message);
-  }
-
   if (!responseErr || responseErr.httpCode >= 500) {
     // Try to identify the error...
     // ...
diff --git a/website/server/middlewares/notFound.js b/website/server/middlewares/notFound.js
index adf74bcbd1..67f63b364d 100644
--- a/website/server/middlewares/notFound.js
+++ b/website/server/middlewares/notFound.js
@@ -7,10 +7,6 @@ import { serveClient } from '../libs/client';
 // in which case, respond with a 404 error.
 const TOP_LEVEL_ROUTES = [
   '/api',
-  '/amazon',
-  '/iap',
-  '/paypal',
-  '/stripe',
   '/export',
   '/email',
   '/qr-code',
diff --git a/website/server/models/challenge.js b/website/server/models/challenge.js
index 97b37338d8..3f3444501c 100644
--- a/website/server/models/challenge.js
+++ b/website/server/models/challenge.js
@@ -10,7 +10,6 @@ import {
 import { removeFromArray } from '../libs/collectionManipulators';
 import shared from '../../common';
 import { sendTxn as txnEmail } from '../libs/email';
-import { sendNotification as sendPushNotification } from '../libs/pushNotifications';
 import { TaskQueue } from 'cwait';
 import { syncableAttrs, setNextDue } from '../libs/taskManager';
 
@@ -342,14 +341,6 @@ schema.methods.closeChal = async function closeChal (broken = {}) {
         {name: 'CHALLENGE_NAME', content: challenge.name},
       ]);
     }
-    if (savedWinner.preferences.pushNotifications.wonChallenge !== false) {
-      sendPushNotification(savedWinner,
-        {
-          title: challenge.name,
-          message: shared.i18n.t('wonChallenge', savedWinner.preferences.language),
-          identifier: 'wonChallenge',
-        });
-    }
   }
 
   // Run some operations in the background withouth blocking the thread
diff --git a/website/server/models/coupon.js b/website/server/models/coupon.js
index f08a8135eb..fe391c9684 100644
--- a/website/server/models/coupon.js
+++ b/website/server/models/coupon.js
@@ -12,7 +12,7 @@ import {
 
 export let schema = new mongoose.Schema({
   _id: {$type: String, default: couponCode.generate, required: true},
-  event: {$type: String, enum: ['wondercon', 'google_6mo']},
+  event: {$type: String, enum: ['wondercon']},
   user: {$type: String, ref: 'User'},
 }, {
   strict: true,
diff --git a/website/server/models/group.js b/website/server/models/group.js
index f7325bc636..489aba6938 100644
--- a/website/server/models/group.js
+++ b/website/server/models/group.js
@@ -28,18 +28,14 @@ import {
 import baseModel from '../libs/baseModel';
 import { sendTxn as sendTxnEmail } from '../libs/email';
 import nconf from 'nconf';
-import { sendNotification as sendPushNotification } from '../libs/pushNotifications';
 import {
   syncableAttrs,
 } from '../libs/taskManager';
 import {
   schema as SubscriptionPlanSchema,
 } from './subscriptionPlan';
-import amazonPayments from '../libs/payments/amazon';
-import stripePayments from '../libs/payments/stripe';
 import { getGroupChat, translateMessage } from '../libs/chat/group-chat';
 import { model as UserNotification } from './userNotification';
-import { sendChatPushNotifications } from '../libs/chat';
 
 const questScrolls = shared.content.quests;
 const questSeriesAchievements = shared.content.questSeriesAchievements;
@@ -513,7 +509,7 @@ schema.methods.getMemberCount = async function getMemberCount () {
 };
 
 schema.methods.sendChat = function sendChat (options = {}) {
-  const {message, user, metaData, client, flagCount = 0, info = {}, translate} = options;
+  const {message, user, metaData, client, flagCount = 0, info = {}} = options;
   let newMessage = messageDefaults(message, user, client, flagCount, info);
   let newChatMessage = new Chat();
   newChatMessage = Object.assign(newChatMessage, newMessage);
@@ -575,10 +571,6 @@ schema.methods.sendChat = function sendChat (options = {}) {
     User.update(query, lastSeenUpdateAddNew, {multi: true}).exec();
   });
 
-  if (this.type === 'party' && user) {
-    sendChatPushNotifications(user, this, newChatMessage, translate);
-  }
-
   return newChatMessage;
 };
 
@@ -622,7 +614,7 @@ schema.methods.startQuest = async function startQuest (user) {
   await User.find({
     _id: {$in: Object.keys(this.quest.members)},
   })
-    .select('party.quest party._id items.quests auth preferences.emailNotifications preferences.pushNotifications preferences.language pushDevices profile.name webhooks')
+    .select('party.quest party._id items.quests auth preferences.emailNotifications profile.name webhooks')
     .lean()
     .exec()
     .then(partyMembers => {
@@ -698,16 +690,6 @@ schema.methods.startQuest = async function startQuest (user) {
       if (member.preferences.emailNotifications.questStarted !== false) {
         membersToEmail.push(member);
       }
-
-      // send push notifications and filter users that disabled emails
-      if (member.preferences.pushNotifications.questStarted !== false) {
-        const memberLang = member.preferences.language;
-        sendPushNotification(member, {
-          title: quest.text(memberLang),
-          message: shared.i18n.t('questStarted', memberLang),
-          identifier: 'questStarted',
-        });
-      }
     }
 
     // Send webhooks
@@ -1580,7 +1562,7 @@ schema.methods.hasCancelled = function hasNotCancelled () {
   return Boolean(this.isSubscribed() && plan.dateTerminated);
 };
 
-schema.methods.updateGroupPlan = async function updateGroupPlan (removingMember) {
+schema.methods.updateGroupPlan = async function updateGroupPlan () {
   // Recheck the group plan count
   let members;
   if (this.type === 'guild') {
@@ -1589,12 +1571,6 @@ schema.methods.updateGroupPlan = async function updateGroupPlan (removingMember)
     members = await User.find({'party._id': this._id}).select('_id').exec();
   }
   this.memberCount = members.length;
-
-  if (this.purchased.plan.paymentMethod === stripePayments.constants.PAYMENT_METHOD) {
-    await stripePayments.chargeForAdditionalGroupMember(this);
-  } else if (this.purchased.plan.paymentMethod === amazonPayments.constants.PAYMENT_METHOD && !removingMember) {
-    await amazonPayments.chargeForAdditionalGroupMember(this);
-  }
 };
 
 export let model = mongoose.model('Group', schema);
diff --git a/website/server/models/subscriptionPlan.js b/website/server/models/subscriptionPlan.js
index aaf2cbf148..383ea0c102 100644
--- a/website/server/models/subscriptionPlan.js
+++ b/website/server/models/subscriptionPlan.js
@@ -7,8 +7,8 @@ export let schema = new mongoose.Schema({
   subscriptionId: String,
   owner: {$type: String, ref: 'User', validate: [v => validator.isUUID(v), 'Invalid uuid.']},
   quantity: {$type: Number, default: 1},
-  paymentMethod: String, // enum: ['Paypal', 'Stripe', 'Gift', 'Amazon Payments', 'Google', '']}
-  customerId: String, // Billing Agreement Id in case of Amazon Payments
+  paymentMethod: String, // enum: ['Gift', '']}
+  customerId: String,
   dateCreated: Date,
   dateTerminated: Date,
   dateUpdated: Date,
@@ -16,10 +16,10 @@ export let schema = new mongoose.Schema({
   gemsBought: {$type: Number, default: 0},
   mysteryItems: {$type: Array, default: () => []},
   lastReminderDate: Date, // indicates the last time a subscription reminder was sent
-  lastBillingDate: Date, // Used only for Amazon Payments to keep track of billing date
-  additionalData: mongoose.Schema.Types.Mixed, // Example for Google: {'receipt': 'serialized receipt json', 'signature': 'signature string'}
+  lastBillingDate: Date,
+  additionalData: mongoose.Schema.Types.Mixed,
   nextPaymentProcessing: Date, // indicates when the queue server should process this subscription again.
-  nextBillingDate: Date, // Next time google will bill this user.
+  nextBillingDate: Date,
   consecutive: {
     count: {$type: Number, default: 0},
     offset: {$type: Number, default: 0}, // when gifted subs, offset++ for each month. offset-- each new-month (cron). count doesn't ++ until offset==0
diff --git a/website/server/models/user/methods.js b/website/server/models/user/methods.js
index 5a49fea5a0..14ccb1fee8 100644
--- a/website/server/models/user/methods.js
+++ b/website/server/models/user/methods.js
@@ -17,9 +17,6 @@ import { model as UserNotification } from '../userNotification';
 import schema from './schema';
 import payments from '../../libs/payments/payments';
 import * as inboxLib from '../../libs/inbox';
-import amazonPayments from '../../libs/payments/amazon';
-import stripePayments from '../../libs/payments/stripe';
-import paypalPayments from '../../libs/payments/paypal';
 
 const daysSince = common.daysSince;
 
@@ -244,7 +241,7 @@ schema.statics.addComputedStatsToJSONObj = function addComputedStatsToUserJSONOb
  * @param  options
  * @param  options.user  The user object who is purchasing
  * @param  options.groupId  The id of the group purchasing a subscription
- * @param  options.headers  The request headers (only for Amazon subscriptions)
+ * @param  options.headers  The request headers
  * @param  options.cancellationReason  A text string to control sending an email
  *
  * @return a Promise from api.cancelSubscription()
@@ -255,18 +252,7 @@ schema.statics.addComputedStatsToJSONObj = function addComputedStatsToUserJSONOb
 // In summary, currently is is best practice to use this method to cancel a user subscription, rather than calling the
 // payment helper.
 schema.methods.cancelSubscription = async function cancelSubscription (options = {}) {
-  let plan = this.purchased.plan;
-
   options.user = this;
-  if (plan.paymentMethod === amazonPayments.constants.PAYMENT_METHOD) {
-    return await amazonPayments.cancelSubscription(options);
-  } else if (plan.paymentMethod === stripePayments.constants.PAYMENT_METHOD) {
-    return await stripePayments.cancelSubscription(options);
-  } else if (plan.paymentMethod === paypalPayments.constants.PAYMENT_METHOD) {
-    return await paypalPayments.subscribeCancel(options);
-  }
-  // Android and iOS subscriptions cannot be cancelled by Habitica.
-
   return await payments.cancelSubscription(options);
 };
 
diff --git a/website/server/models/user/schema.js b/website/server/models/user/schema.js
index af67e08522..621f66e92c 100644
--- a/website/server/models/user/schema.js
+++ b/website/server/models/user/schema.js
@@ -2,7 +2,6 @@ import mongoose from 'mongoose';
 import shared from '../../../common';
 import validator from 'validator';
 import { schema as TagSchema } from '../tag';
-import { schema as PushDeviceSchema } from '../pushDevice';
 import { schema as WebhookSchema } from '../webhook';
 import {
   schema as UserNotificationSchema,
@@ -27,12 +26,6 @@ let schema = new Schema({
 
   auth: {
     blocked: Boolean,
-    facebook: {$type: Schema.Types.Mixed, default: () => {
-      return {};
-    }},
-    google: {$type: Schema.Types.Mixed, default: () => {
-      return {};
-    }},
     local: {
       email: {
         $type: String,
@@ -493,22 +486,6 @@ let schema = new Schema({
       majorUpdates: {$type: Boolean, default: true},
       subscriptionReminders: {$type: Boolean, default: true},
     },
-    pushNotifications: {
-      unsubscribeFromAll: {$type: Boolean, default: false},
-      newPM: {$type: Boolean, default: true},
-      wonChallenge: {$type: Boolean, default: true},
-      giftedGems: {$type: Boolean, default: true},
-      giftedSubscription: {$type: Boolean, default: true},
-      invitedParty: {$type: Boolean, default: true},
-      invitedGuild: {$type: Boolean, default: true},
-      questStarted: {$type: Boolean, default: true},
-      invitedQuest: {$type: Boolean, default: true},
-      majorUpdates: {$type: Boolean, default: true},
-      mentionParty: {$type: Boolean, default: true},
-      mentionJoinedGuild: {$type: Boolean, default: true},
-      mentionUnjoinedGuild: {$type: Boolean, default: true},
-      partyActivity: {$type: Boolean, default: true},
-    },
     suppressModals: {
       levelUp: {$type: Boolean, default: false},
       hatchPet: {$type: Boolean, default: false},
@@ -589,7 +566,6 @@ let schema = new Schema({
   extra: {$type: Schema.Types.Mixed, default: () => {
     return {};
   }},
-  pushDevices: [PushDeviceSchema],
   _ABtests: {$type: Schema.Types.Mixed, default: () => {
     return {};
   }},
